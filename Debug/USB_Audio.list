
USB_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005448  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08005628  08005628  00006628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b0  080059b0  000071e4  2**0
                  CONTENTS
  4 .ARM          00000008  080059b0  080059b0  000069b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059b8  080059b8  000071e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b8  080059b8  000069b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059bc  080059bc  000069bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080059c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200001e4  08005ba4  000071e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08005ba4  000073d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000457f  00000000  00000000  00007214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f73  00000000  00000000  0000b793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d0  00000000  00000000  0000c708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001fa  00000000  00000000  0000c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b09b  00000000  00000000  0000cbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004e71  00000000  00000000  00027c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000942ac  00000000  00000000  0002cade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0d8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001934  00000000  00000000  000c0dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c2704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005610 	.word	0x08005610

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	08005610 	.word	0x08005610

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return 1;
 8000eec:	2301      	movs	r3, #1
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_kill>:

int _kill(int pid, int sig)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f02:	f002 fcb5 	bl	8003870 <__errno>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2216      	movs	r2, #22
 8000f0a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_exit>:

void _exit (int status)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ffe7 	bl	8000ef8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f2a:	bf00      	nop
 8000f2c:	e7fd      	b.n	8000f2a <_exit+0x12>

08000f2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e00a      	b.n	8000f56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f40:	f3af 8000 	nop.w
 8000f44:	4601      	mov	r1, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	60ba      	str	r2, [r7, #8]
 8000f4c:	b2ca      	uxtb	r2, r1
 8000f4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dbf0      	blt.n	8000f40 <_read+0x12>
  }

  return len;
 8000f5e:	687b      	ldr	r3, [r7, #4]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e009      	b.n	8000f8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	60ba      	str	r2, [r7, #8]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	dbf1      	blt.n	8000f7a <_write+0x12>
  }
  return len;
 8000f96:	687b      	ldr	r3, [r7, #4]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_close>:

int _close(int file)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fc8:	605a      	str	r2, [r3, #4]
  return 0;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_isatty>:

int _isatty(int file)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fe0:	2301      	movs	r3, #1
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b085      	sub	sp, #20
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001010:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <_sbrk+0x5c>)
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <_sbrk+0x60>)
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	4b13      	ldr	r3, [pc, #76]	@ (800106c <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <_sbrk+0x64>)
 8001026:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <_sbrk+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	429a      	cmp	r2, r3
 8001036:	d207      	bcs.n	8001048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001038:	f002 fc1a 	bl	8003870 <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e009      	b.n	800105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b07      	ldr	r3, [pc, #28]	@ (800106c <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20040000 	.word	0x20040000
 8001068:	00000400 	.word	0x00000400
 800106c:	20000200 	.word	0x20000200
 8001070:	200003d8 	.word	0x200003d8

08001074 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <Clock_Setup_OSC>:
#define MCO2_GPIO_PORT			GPIOC
#define MCO2_PIN           	    (1 << 9)


Error_HandleTypeDef Clock_Setup_OSC(OSC_ConfigSetTypeDef *osc_config)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	uint32_t pll_config;
	uint32_t TickStart;
	if(osc_config == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <Clock_Setup_OSC+0x12>
	{
		return STATE_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e1a4      	b.n	80013f4 <Clock_Setup_OSC+0x35c>
	}

	/* ---------------------HSE Configuration--------------------- */
	if((osc_config->OSC_TYPE & OSC_TYPE_HSE) == OSC_TYPE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8086 	beq.w	80011c4 <Clock_Setup_OSC+0x12c>
	{
		if((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_HSE || ((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL && (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE) == RCC_PLLCFGR_PLLSRC_HSE))
 80010b8:	4b8b      	ldr	r3, [pc, #556]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d00c      	beq.n	80010de <Clock_Setup_OSC+0x46>
 80010c4:	4b88      	ldr	r3, [pc, #544]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 030c 	and.w	r3, r3, #12
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d112      	bne.n	80010f6 <Clock_Setup_OSC+0x5e>
 80010d0:	4b85      	ldr	r3, [pc, #532]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010dc:	d10b      	bne.n	80010f6 <Clock_Setup_OSC+0x5e>
		{
			if((RCC->CR & RCC_CR_HSERDY) != RESET && (osc_config->HSE_SET.HSE_STATE) == HSE_OFF)
 80010de:	4b82      	ldr	r3, [pc, #520]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d06b      	beq.n	80011c2 <Clock_Setup_OSC+0x12a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d167      	bne.n	80011c2 <Clock_Setup_OSC+0x12a>
			{
				return STATE_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e17e      	b.n	80013f4 <Clock_Setup_OSC+0x35c>
			}
		}
		else
		{
			HSE_CONFIG(osc_config->HSE_SET.HSE_STATE);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10c      	bne.n	8001118 <Clock_Setup_OSC+0x80>
 80010fe:	4b7a      	ldr	r3, [pc, #488]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a79      	ldr	r2, [pc, #484]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b77      	ldr	r3, [pc, #476]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a76      	ldr	r2, [pc, #472]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001110:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e029      	b.n	800116c <Clock_Setup_OSC+0xd4>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001120:	d106      	bne.n	8001130 <Clock_Setup_OSC+0x98>
 8001122:	4b71      	ldr	r3, [pc, #452]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a70      	ldr	r2, [pc, #448]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e01d      	b.n	800116c <Clock_Setup_OSC+0xd4>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001138:	d10c      	bne.n	8001154 <Clock_Setup_OSC+0xbc>
 800113a:	4b6b      	ldr	r3, [pc, #428]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a6a      	ldr	r2, [pc, #424]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a67      	ldr	r2, [pc, #412]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e00b      	b.n	800116c <Clock_Setup_OSC+0xd4>
 8001154:	4b64      	ldr	r3, [pc, #400]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a63      	ldr	r2, [pc, #396]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 800115a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b61      	ldr	r3, [pc, #388]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a60      	ldr	r2, [pc, #384]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800116a:	6013      	str	r3, [r2, #0]
			if(osc_config->HSE_SET.HSE_STATE == HSE_ON)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001174:	d112      	bne.n	800119c <Clock_Setup_OSC+0x104>
			{
				TickStart = uwTick;
 8001176:	4b5d      	ldr	r3, [pc, #372]	@ (80012ec <Clock_Setup_OSC+0x254>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_HSERDY) == RESET)
 800117c:	e007      	b.n	800118e <Clock_Setup_OSC+0xf6>
				{
					if((uwTick - TickStart) > HSE_TIMEOUT_VALUE)
 800117e:	4b5b      	ldr	r3, [pc, #364]	@ (80012ec <Clock_Setup_OSC+0x254>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	@ 0x64
 8001188:	d901      	bls.n	800118e <Clock_Setup_OSC+0xf6>
					{
						return STATE_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e132      	b.n	80013f4 <Clock_Setup_OSC+0x35c>
				while((RCC->CR & RCC_CR_HSERDY) == RESET)
 800118e:	4b56      	ldr	r3, [pc, #344]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f1      	beq.n	800117e <Clock_Setup_OSC+0xe6>
 800119a:	e013      	b.n	80011c4 <Clock_Setup_OSC+0x12c>
					}
				}
			}
			else
			{
				TickStart = uwTick;
 800119c:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <Clock_Setup_OSC+0x254>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_HSERDY) == RESET)
 80011a2:	e007      	b.n	80011b4 <Clock_Setup_OSC+0x11c>
				{
					if((uwTick - TickStart) > HSE_TIMEOUT_VALUE)
 80011a4:	4b51      	ldr	r3, [pc, #324]	@ (80012ec <Clock_Setup_OSC+0x254>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b64      	cmp	r3, #100	@ 0x64
 80011ae:	d901      	bls.n	80011b4 <Clock_Setup_OSC+0x11c>
					{
						return STATE_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e11f      	b.n	80013f4 <Clock_Setup_OSC+0x35c>
				while((RCC->CR & RCC_CR_HSERDY) == RESET)
 80011b4:	4b4c      	ldr	r3, [pc, #304]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0f1      	beq.n	80011a4 <Clock_Setup_OSC+0x10c>
 80011c0:	e000      	b.n	80011c4 <Clock_Setup_OSC+0x12c>
			if((RCC->CR & RCC_CR_HSERDY) != RESET && (osc_config->HSE_SET.HSE_STATE) == HSE_OFF)
 80011c2:	bf00      	nop
			}
		}
	}

	/* ---------------------HSI Configuration--------------------- */
	if((osc_config->OSC_TYPE & OSC_TYPE_HSI) == OSC_TYPE_HSI)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d069      	beq.n	80012a4 <Clock_Setup_OSC+0x20c>
	{
		if((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_HSI || ((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL && (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))
 80011d0:	4b45      	ldr	r3, [pc, #276]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00b      	beq.n	80011f4 <Clock_Setup_OSC+0x15c>
 80011dc:	4b42      	ldr	r3, [pc, #264]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d11d      	bne.n	8001224 <Clock_Setup_OSC+0x18c>
 80011e8:	4b3f      	ldr	r3, [pc, #252]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d117      	bne.n	8001224 <Clock_Setup_OSC+0x18c>
		{
			if((RCC->CR & RCC_CR_HSIRDY) != RESET && (osc_config->HSI_SET.HSI_STATE) == HSI_OFF)
 80011f4:	4b3c      	ldr	r3, [pc, #240]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <Clock_Setup_OSC+0x176>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <Clock_Setup_OSC+0x176>
			{
				return STATE_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e0f2      	b.n	80013f4 <Clock_Setup_OSC+0x35c>
			}
			else
			{
				RCC_HSI_CALIBRATION_ADJUST(osc_config->HSI_SET.HSI_CAL);
 800120e:	4b36      	ldr	r3, [pc, #216]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4932      	ldr	r1, [pc, #200]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 800121e:	4313      	orrs	r3, r2
 8001220:	600b      	str	r3, [r1, #0]
			if((RCC->CR & RCC_CR_HSIRDY) != RESET && (osc_config->HSI_SET.HSI_STATE) == HSI_OFF)
 8001222:	e03f      	b.n	80012a4 <Clock_Setup_OSC+0x20c>
			}
		}
		else
		{
			if(osc_config->HSI_SET.HSI_STATE == HSI_ON)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800122a:	2b01      	cmp	r3, #1
 800122c:	d122      	bne.n	8001274 <Clock_Setup_OSC+0x1dc>
			{
				HSI_ENABLE();
 800122e:	4b2e      	ldr	r3, [pc, #184]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a2d      	ldr	r2, [pc, #180]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6013      	str	r3, [r2, #0]
				TickStart = uwTick;
 800123a:	4b2c      	ldr	r3, [pc, #176]	@ (80012ec <Clock_Setup_OSC+0x254>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_HSIRDY) == RESET)
 8001240:	e007      	b.n	8001252 <Clock_Setup_OSC+0x1ba>
				{
					if((uwTick - TickStart) > HSI_TIMEOUT_VALUE)
 8001242:	4b2a      	ldr	r3, [pc, #168]	@ (80012ec <Clock_Setup_OSC+0x254>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <Clock_Setup_OSC+0x1ba>
					{
						return STATE_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e0d0      	b.n	80013f4 <Clock_Setup_OSC+0x35c>
				while((RCC->CR & RCC_CR_HSIRDY) == RESET)
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f1      	beq.n	8001242 <Clock_Setup_OSC+0x1aa>
					}
				}
				RCC_HSI_CALIBRATION_ADJUST(osc_config->HSI_SET.HSI_CAL);
 800125e:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	491e      	ldr	r1, [pc, #120]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
 8001272:	e017      	b.n	80012a4 <Clock_Setup_OSC+0x20c>
			}
			else
			{
				HSI_DISEBLE();
 8001274:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	6013      	str	r3, [r2, #0]
				TickStart = uwTick;
 8001280:	4b1a      	ldr	r3, [pc, #104]	@ (80012ec <Clock_Setup_OSC+0x254>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
				while((RCC->CR & RCC_CR_HSIRDY) == RESET)
 8001286:	e007      	b.n	8001298 <Clock_Setup_OSC+0x200>
				{
					if((uwTick - TickStart) > HSI_TIMEOUT_VALUE)
 8001288:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <Clock_Setup_OSC+0x254>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <Clock_Setup_OSC+0x200>
					{
						return STATE_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e0ad      	b.n	80013f4 <Clock_Setup_OSC+0x35c>
				while((RCC->CR & RCC_CR_HSIRDY) == RESET)
 8001298:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f1      	beq.n	8001288 <Clock_Setup_OSC+0x1f0>
				}
			}
		}
	}

	if(osc_config->PLL_SET.PLL_STATE != PLL_NONE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	791b      	ldrb	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80a2 	beq.w	80013f2 <Clock_Setup_OSC+0x35a>
	{
		if((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL)
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d169      	bne.n	800138e <Clock_Setup_OSC+0x2f6>
		{
			if(osc_config->PLL_SET.PLL_STATE == PLL_ON)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	791b      	ldrb	r3, [r3, #4]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d14c      	bne.n	800135c <Clock_Setup_OSC+0x2c4>
			{
				PLL_DISEBLE();
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a08      	ldr	r2, [pc, #32]	@ (80012e8 <Clock_Setup_OSC+0x250>)
 80012c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012cc:	6013      	str	r3, [r2, #0]

				TickStart = uwTick;
 80012ce:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <Clock_Setup_OSC+0x254>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_PLLON) != RESET)
 80012d4:	e00c      	b.n	80012f0 <Clock_Setup_OSC+0x258>
				{
					if((uwTick - TickStart) > PLL_TIMEOUT_VALUE)
 80012d6:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <Clock_Setup_OSC+0x254>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d906      	bls.n	80012f0 <Clock_Setup_OSC+0x258>
					{
						return STATE_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e086      	b.n	80013f4 <Clock_Setup_OSC+0x35c>
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	20000284 	.word	0x20000284
				while((RCC->CR & RCC_CR_PLLON) != RESET)
 80012f0:	4b43      	ldr	r3, [pc, #268]	@ (8001400 <Clock_Setup_OSC+0x368>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ec      	bne.n	80012d6 <Clock_Setup_OSC+0x23e>
					}
				}

				RCC_PLL_CONFIG(osc_config->PLL_SET.PLLSRC, osc_config->PLL_SET.PLLM, osc_config->PLL_SET.PLLN, osc_config->PLL_SET.PLLP, osc_config->PLL_SET.PLLQ);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	019b      	lsls	r3, r3, #6
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	3b01      	subs	r3, #1
 8001316:	041b      	lsls	r3, r3, #16
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	061b      	lsls	r3, r3, #24
 8001320:	4313      	orrs	r3, r2
 8001322:	4a37      	ldr	r2, [pc, #220]	@ (8001400 <Clock_Setup_OSC+0x368>)
 8001324:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001328:	6053      	str	r3, [r2, #4]

				PLL_ENABLE();
 800132a:	4b35      	ldr	r3, [pc, #212]	@ (8001400 <Clock_Setup_OSC+0x368>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a34      	ldr	r2, [pc, #208]	@ (8001400 <Clock_Setup_OSC+0x368>)
 8001330:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001334:	6013      	str	r3, [r2, #0]

				TickStart = uwTick;
 8001336:	4b33      	ldr	r3, [pc, #204]	@ (8001404 <Clock_Setup_OSC+0x36c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_PLLON) == RESET)
 800133c:	e007      	b.n	800134e <Clock_Setup_OSC+0x2b6>
				{
					if((uwTick - TickStart) > PLL_TIMEOUT_VALUE)
 800133e:	4b31      	ldr	r3, [pc, #196]	@ (8001404 <Clock_Setup_OSC+0x36c>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <Clock_Setup_OSC+0x2b6>
					{
						return STATE_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e052      	b.n	80013f4 <Clock_Setup_OSC+0x35c>
				while((RCC->CR & RCC_CR_PLLON) == RESET)
 800134e:	4b2c      	ldr	r3, [pc, #176]	@ (8001400 <Clock_Setup_OSC+0x368>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f1      	beq.n	800133e <Clock_Setup_OSC+0x2a6>
 800135a:	e04a      	b.n	80013f2 <Clock_Setup_OSC+0x35a>
					}
				}
			}
			else
			{
				PLL_DISEBLE();
 800135c:	4b28      	ldr	r3, [pc, #160]	@ (8001400 <Clock_Setup_OSC+0x368>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a27      	ldr	r2, [pc, #156]	@ (8001400 <Clock_Setup_OSC+0x368>)
 8001362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001366:	6013      	str	r3, [r2, #0]

				TickStart = uwTick;
 8001368:	4b26      	ldr	r3, [pc, #152]	@ (8001404 <Clock_Setup_OSC+0x36c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_PLLON) != RESET)
 800136e:	e007      	b.n	8001380 <Clock_Setup_OSC+0x2e8>
				{
					if((uwTick - TickStart) > PLL_TIMEOUT_VALUE)
 8001370:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <Clock_Setup_OSC+0x36c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <Clock_Setup_OSC+0x2e8>
					{
						return STATE_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e039      	b.n	80013f4 <Clock_Setup_OSC+0x35c>
				while((RCC->CR & RCC_CR_PLLON) != RESET)
 8001380:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <Clock_Setup_OSC+0x368>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f1      	bne.n	8001370 <Clock_Setup_OSC+0x2d8>
 800138c:	e031      	b.n	80013f2 <Clock_Setup_OSC+0x35a>
				}
			}
		}
		else
		{
			pll_config = RCC->PLLCFGR;
 800138e:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <Clock_Setup_OSC+0x368>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	60bb      	str	r3, [r7, #8]
			if(osc_config->PLL_SET.PLL_STATE == PLL_OFF ||
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	791b      	ldrb	r3, [r3, #4]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d028      	beq.n	80013ee <Clock_Setup_OSC+0x356>
					READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != osc_config->PLL_SET.PLLSRC ||
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
			if(osc_config->PLL_SET.PLL_STATE == PLL_OFF ||
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d121      	bne.n	80013ee <Clock_Setup_OSC+0x356>
					READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != osc_config->PLL_SET.PLLM ||
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
					READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != osc_config->PLL_SET.PLLSRC ||
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d11a      	bne.n	80013ee <Clock_Setup_OSC+0x356>
					READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != osc_config->PLL_SET.PLLN << RCC_PLLCFGR_PLLN_Pos ||
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013be:	4013      	ands	r3, r2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6912      	ldr	r2, [r2, #16]
 80013c4:	0192      	lsls	r2, r2, #6
					READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != osc_config->PLL_SET.PLLM ||
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d111      	bne.n	80013ee <Clock_Setup_OSC+0x356>
					READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((osc_config->PLL_SET.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos ||
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	085b      	lsrs	r3, r3, #1
 80013d6:	3b01      	subs	r3, #1
 80013d8:	041b      	lsls	r3, r3, #16
					READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != osc_config->PLL_SET.PLLN << RCC_PLLCFGR_PLLN_Pos ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d107      	bne.n	80013ee <Clock_Setup_OSC+0x356>
					READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != osc_config->PLL_SET.PLLQ << RCC_PLLCFGR_PLLQ_Pos)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	061b      	lsls	r3, r3, #24
					READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((osc_config->PLL_SET.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos ||
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d001      	beq.n	80013f2 <Clock_Setup_OSC+0x35a>
			{
				return STATE_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <Clock_Setup_OSC+0x35c>
			}
		}
	}
	return STATE_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40023800 	.word	0x40023800
 8001404:	20000284 	.word	0x20000284

08001408 <Clock_Setup_Clock>:

Error_HandleTypeDef Clock_Setup_Clock(Clock_ConfigTypeDef *clock_config)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	uint32_t TickStart;

	if(clock_config == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <Clock_Setup_Clock+0x12>
	{
		return STATE_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e0e7      	b.n	80015ea <Clock_Setup_Clock+0x1e2>
	}

	if(clock_config->FLatency > FLASH_GET_LATENCY())
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	4b75      	ldr	r3, [pc, #468]	@ (80015f4 <Clock_Setup_Clock+0x1ec>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	429a      	cmp	r2, r3
 8001428:	d921      	bls.n	800146e <Clock_Setup_Clock+0x66>
	{
		FLASH_SET_LATENCY(clock_config->FLatency);
 800142a:	4b72      	ldr	r3, [pc, #456]	@ (80015f4 <Clock_Setup_Clock+0x1ec>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a71      	ldr	r2, [pc, #452]	@ (80015f4 <Clock_Setup_Clock+0x1ec>)
 8001430:	f023 030f 	bic.w	r3, r3, #15
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b6f      	ldr	r3, [pc, #444]	@ (80015f4 <Clock_Setup_Clock+0x1ec>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	496d      	ldr	r1, [pc, #436]	@ (80015f4 <Clock_Setup_Clock+0x1ec>)
 8001440:	4313      	orrs	r3, r2
 8001442:	600b      	str	r3, [r1, #0]

		TickStart = uwTick;
 8001444:	4b6c      	ldr	r3, [pc, #432]	@ (80015f8 <Clock_Setup_Clock+0x1f0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]
		while((FLASH->ACR & FLASH_ACR_LATENCY) != clock_config->FLatency)
 800144a:	e008      	b.n	800145e <Clock_Setup_Clock+0x56>
		{
			if((uwTick - TickStart) > 1000)
 800144c:	4b6a      	ldr	r3, [pc, #424]	@ (80015f8 <Clock_Setup_Clock+0x1f0>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001458:	d901      	bls.n	800145e <Clock_Setup_Clock+0x56>
			{
				return STATE_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e0c5      	b.n	80015ea <Clock_Setup_Clock+0x1e2>
		while((FLASH->ACR & FLASH_ACR_LATENCY) != clock_config->FLatency)
 800145e:	4b65      	ldr	r3, [pc, #404]	@ (80015f4 <Clock_Setup_Clock+0x1ec>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 020f 	and.w	r2, r3, #15
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	429a      	cmp	r2, r3
 800146c:	d1ee      	bne.n	800144c <Clock_Setup_Clock+0x44>
			}
		}
	}

	if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_HCLK) == RCC_CLK_TYPE_HCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d020      	beq.n	80014bc <Clock_Setup_Clock+0xb4>
	{
		if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_PCLK1) == RCC_CLK_TYPE_PCLK1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <Clock_Setup_Clock+0x8a>
		{
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001486:	4b5d      	ldr	r3, [pc, #372]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	4a5c      	ldr	r2, [pc, #368]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 800148c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001490:	6093      	str	r3, [r2, #8]
		}
		if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_PCLK2) == RCC_CLK_TYPE_PCLK2)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <Clock_Setup_Clock+0xa2>
		{
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800149e:	4b57      	ldr	r3, [pc, #348]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	4a56      	ldr	r2, [pc, #344]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 80014a4:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014a8:	6093      	str	r3, [r2, #8]
		}

		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, clock_config->AHBCLK_DIV);
 80014aa:	4b54      	ldr	r3, [pc, #336]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	4951      	ldr	r1, [pc, #324]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]
	}

	if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_SYSCLK) == RCC_CLK_TYPE_SYSCLK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d03f      	beq.n	8001548 <Clock_Setup_Clock+0x140>
	{
		if((clock_config->SYSCLK_SOURCE) == RCC_SYSCLKSOURCE_HSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d107      	bne.n	80014e0 <Clock_Setup_Clock+0xd8>
		{
			if((RCC->CR & RCC_CR_HSERDY) != RESET)
 80014d0:	4b4a      	ldr	r3, [pc, #296]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d015      	beq.n	8001508 <Clock_Setup_Clock+0x100>
			{
				return STATE_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e084      	b.n	80015ea <Clock_Setup_Clock+0x1e2>
			}
		}
		else if((clock_config->SYSCLK_SOURCE) == RCC_SYSCLKSOURCE_PLLCLK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d107      	bne.n	80014f8 <Clock_Setup_Clock+0xf0>
		{
			if((RCC->CR & RCC_CR_PLLRDY) != RESET)
 80014e8:	4b44      	ldr	r3, [pc, #272]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d009      	beq.n	8001508 <Clock_Setup_Clock+0x100>
			{
				return STATE_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e078      	b.n	80015ea <Clock_Setup_Clock+0x1e2>
			}
		}
		else
		{
			if((RCC->CR & RCC_CR_HSIRDY) != RESET)
 80014f8:	4b40      	ldr	r3, [pc, #256]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <Clock_Setup_Clock+0x100>
			{
				return STATE_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e070      	b.n	80015ea <Clock_Setup_Clock+0x1e2>
			}
		}

		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, (clock_config->SYSCLK_SOURCE));
 8001508:	4b3c      	ldr	r3, [pc, #240]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f023 0203 	bic.w	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	4939      	ldr	r1, [pc, #228]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]

		TickStart = uwTick;
 800151a:	4b37      	ldr	r3, [pc, #220]	@ (80015f8 <Clock_Setup_Clock+0x1f0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	60fb      	str	r3, [r7, #12]

		while((RCC->CFGR & RCC_CFGR_SWS) != (clock_config->SYSCLK_SOURCE) << RCC_CFGR_SWS_Pos)
 8001520:	e009      	b.n	8001536 <Clock_Setup_Clock+0x12e>
		{
			if((uwTick - TickStart) > CLK_SW_TIMEOUT_VALUE)
 8001522:	4b35      	ldr	r3, [pc, #212]	@ (80015f8 <Clock_Setup_Clock+0x1f0>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800152e:	4293      	cmp	r3, r2
 8001530:	d901      	bls.n	8001536 <Clock_Setup_Clock+0x12e>
			{
				return STATE_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e059      	b.n	80015ea <Clock_Setup_Clock+0x1e2>
		while((RCC->CFGR & RCC_CFGR_SWS) != (clock_config->SYSCLK_SOURCE) << RCC_CFGR_SWS_Pos)
 8001536:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 020c 	and.w	r2, r3, #12
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	429a      	cmp	r2, r3
 8001546:	d1ec      	bne.n	8001522 <Clock_Setup_Clock+0x11a>
			}
		}
	}

	if(clock_config->FLatency < FLASH_GET_LATENCY())
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695a      	ldr	r2, [r3, #20]
 800154c:	4b29      	ldr	r3, [pc, #164]	@ (80015f4 <Clock_Setup_Clock+0x1ec>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	429a      	cmp	r2, r3
 8001556:	d216      	bcs.n	8001586 <Clock_Setup_Clock+0x17e>
	{
		FLASH_SET_LATENCY(clock_config->FLatency);
 8001558:	4b26      	ldr	r3, [pc, #152]	@ (80015f4 <Clock_Setup_Clock+0x1ec>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a25      	ldr	r2, [pc, #148]	@ (80015f4 <Clock_Setup_Clock+0x1ec>)
 800155e:	f023 030f 	bic.w	r3, r3, #15
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b23      	ldr	r3, [pc, #140]	@ (80015f4 <Clock_Setup_Clock+0x1ec>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	4921      	ldr	r1, [pc, #132]	@ (80015f4 <Clock_Setup_Clock+0x1ec>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]

		if(FLASH_GET_LATENCY() != clock_config->FLatency)
 8001572:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <Clock_Setup_Clock+0x1ec>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 020f 	and.w	r2, r3, #15
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	429a      	cmp	r2, r3
 8001580:	d001      	beq.n	8001586 <Clock_Setup_Clock+0x17e>
		{
			return STATE_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e031      	b.n	80015ea <Clock_Setup_Clock+0x1e2>
		}
	}

	if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_PCLK1) == RCC_CLK_TYPE_PCLK1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b00      	cmp	r3, #0
 8001590:	d008      	beq.n	80015a4 <Clock_Setup_Clock+0x19c>
	{
	    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, clock_config->APB1CLK_DIV);
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	4917      	ldr	r1, [pc, #92]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
	}
	if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_PCLK2) == RCC_CLK_TYPE_PCLK2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <Clock_Setup_Clock+0x1ba>
	{
	    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, clock_config->APB2CLK_DIV);
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	490f      	ldr	r1, [pc, #60]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	608b      	str	r3, [r1, #8]
	}

	SystemCoreClock = Get_SysClock_Freq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015c2:	f000 f87b 	bl	80016bc <Get_SysClock_Freq>
 80015c6:	4602      	mov	r2, r0
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <Clock_Setup_Clock+0x1f4>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	490b      	ldr	r1, [pc, #44]	@ (8001600 <Clock_Setup_Clock+0x1f8>)
 80015d4:	5ccb      	ldrb	r3, [r1, r3]
 80015d6:	fa22 f303 	lsr.w	r3, r2, r3
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <Clock_Setup_Clock+0x1fc>)
 80015dc:	6013      	str	r3, [r2, #0]

	Tick_Init(uwTickPrio);
 80015de:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <Clock_Setup_Clock+0x200>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fd00 	bl	8001fe8 <Tick_Init>

	return STATE_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023c00 	.word	0x40023c00
 80015f8:	20000284 	.word	0x20000284
 80015fc:	40023800 	.word	0x40023800
 8001600:	08005628 	.word	0x08005628
 8001604:	20000000 	.word	0x20000000
 8001608:	20000004 	.word	0x20000004

0800160c <MCO_Config>:

void MCO_Config(uint32_t MCOx, uint32_t MCO_SRC, uint32_t MCO_DIV)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
	GPIO_ConfigTypeDef config;

	if(MCOx == RCC_MCO1)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d121      	bne.n	8001662 <MCO_Config+0x56>
	{
		MCO1_CLK_ENABLE();
 800161e:	4b24      	ldr	r3, [pc, #144]	@ (80016b0 <MCO_Config+0xa4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a23      	ldr	r2, [pc, #140]	@ (80016b0 <MCO_Config+0xa4>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30

		config.PIN = MCO1_PIN;
 800162a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800162e:	617b      	str	r3, [r7, #20]
		config.MODE = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
		config.SPEED = GPIO_SPEED_FREQ_HIGH;
 8001634:	2302      	movs	r3, #2
 8001636:	623b      	str	r3, [r7, #32]
		config.PULL = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
		config.ALT = (uint8_t)0x00;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_Config(MCO1_GPIO_PORT, &config);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	481b      	ldr	r0, [pc, #108]	@ (80016b4 <MCO_Config+0xa8>)
 8001648:	f000 fa06 	bl	8001a58 <GPIO_Config>

		MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (MCO_SRC | MCO_DIV));
 800164c:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <MCO_Config+0xa4>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	430b      	orrs	r3, r1
 800165a:	4915      	ldr	r1, [pc, #84]	@ (80016b0 <MCO_Config+0xa4>)
 800165c:	4313      	orrs	r3, r2
 800165e:	608b      	str	r3, [r1, #8]
		config.ALT = (uint8_t)0x00;
		GPIO_Config(MCO2_GPIO_PORT, &config);

		MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (MCO_SRC | (MCO_DIV << 3)));
	}
}
 8001660:	e021      	b.n	80016a6 <MCO_Config+0x9a>
		MCO2_CLK_ENABLE();
 8001662:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <MCO_Config+0xa4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <MCO_Config+0xa4>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
		config.PIN = MCO2_PIN;
 800166e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001672:	617b      	str	r3, [r7, #20]
		config.MODE = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
		config.SPEED = GPIO_SPEED_FREQ_HIGH;
 8001678:	2302      	movs	r3, #2
 800167a:	623b      	str	r3, [r7, #32]
		config.PULL = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
		config.ALT = (uint8_t)0x00;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_Config(MCO2_GPIO_PORT, &config);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	480b      	ldr	r0, [pc, #44]	@ (80016b8 <MCO_Config+0xac>)
 800168c:	f000 f9e4 	bl	8001a58 <GPIO_Config>
		MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (MCO_SRC | (MCO_DIV << 3)));
 8001690:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <MCO_Config+0xa4>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	00d9      	lsls	r1, r3, #3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	430b      	orrs	r3, r1
 80016a0:	4903      	ldr	r1, [pc, #12]	@ (80016b0 <MCO_Config+0xa4>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	@ 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020800 	.word	0x40020800

080016bc <Get_SysClock_Freq>:

uint32_t Get_SysClock_Freq(void)
{
 80016bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c0:	b090      	sub	sp, #64	@ 0x40
 80016c2:	af00      	add	r7, sp, #0
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80016c8:	2300      	movs	r3, #0
 80016ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016cc:	2300      	movs	r3, #0
 80016ce:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t sysclock_freq = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	63bb      	str	r3, [r7, #56]	@ 0x38
	switch (RCC->CFGR & RCC_CFGR_SWS)
 80016d4:	4b5b      	ldr	r3, [pc, #364]	@ (8001844 <Get_SysClock_Freq+0x188>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d00d      	beq.n	80016fc <Get_SysClock_Freq+0x40>
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	f200 80a1 	bhi.w	8001828 <Get_SysClock_Freq+0x16c>
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d002      	beq.n	80016f0 <Get_SysClock_Freq+0x34>
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d003      	beq.n	80016f6 <Get_SysClock_Freq+0x3a>
 80016ee:	e09b      	b.n	8001828 <Get_SysClock_Freq+0x16c>
	{
	case RCC_SYSCLKSOURCE_STATUS_HSI:
	{
		sysclock_freq = HSI_VALUE;
 80016f0:	4b55      	ldr	r3, [pc, #340]	@ (8001848 <Get_SysClock_Freq+0x18c>)
 80016f2:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 80016f4:	e09b      	b.n	800182e <Get_SysClock_Freq+0x172>
	}
	case RCC_SYSCLKSOURCE_STATUS_HSE:
	{
		sysclock_freq = HSE_VALUE;
 80016f6:	4b55      	ldr	r3, [pc, #340]	@ (800184c <Get_SysClock_Freq+0x190>)
 80016f8:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 80016fa:	e098      	b.n	800182e <Get_SysClock_Freq+0x172>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK:
	{
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016fc:	4b51      	ldr	r3, [pc, #324]	@ (8001844 <Get_SysClock_Freq+0x188>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001704:	637b      	str	r3, [r7, #52]	@ 0x34
		if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) != RCC_PLLCFGR_PLLSRC_HSI)
 8001706:	4b4f      	ldr	r3, [pc, #316]	@ (8001844 <Get_SysClock_Freq+0x188>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d028      	beq.n	8001764 <Get_SysClock_Freq+0xa8>
		{
	        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001712:	4b4c      	ldr	r3, [pc, #304]	@ (8001844 <Get_SysClock_Freq+0x188>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	099b      	lsrs	r3, r3, #6
 8001718:	2200      	movs	r2, #0
 800171a:	623b      	str	r3, [r7, #32]
 800171c:	627a      	str	r2, [r7, #36]	@ 0x24
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001724:	2100      	movs	r1, #0
 8001726:	4b49      	ldr	r3, [pc, #292]	@ (800184c <Get_SysClock_Freq+0x190>)
 8001728:	fb03 f201 	mul.w	r2, r3, r1
 800172c:	2300      	movs	r3, #0
 800172e:	fb00 f303 	mul.w	r3, r0, r3
 8001732:	4413      	add	r3, r2
 8001734:	4a45      	ldr	r2, [pc, #276]	@ (800184c <Get_SysClock_Freq+0x190>)
 8001736:	fba0 1202 	umull	r1, r2, r0, r2
 800173a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800173c:	460a      	mov	r2, r1
 800173e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001742:	4413      	add	r3, r2
 8001744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001748:	2200      	movs	r2, #0
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	61fa      	str	r2, [r7, #28]
 800174e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001752:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001756:	f7ff fa4f 	bl	8000bf8 <__aeabi_uldivmod>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4613      	mov	r3, r2
 8001760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001762:	e053      	b.n	800180c <Get_SysClock_Freq+0x150>
		}
		else
		{
	        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001764:	4b37      	ldr	r3, [pc, #220]	@ (8001844 <Get_SysClock_Freq+0x188>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	2200      	movs	r2, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	617a      	str	r2, [r7, #20]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001776:	f04f 0b00 	mov.w	fp, #0
 800177a:	4652      	mov	r2, sl
 800177c:	465b      	mov	r3, fp
 800177e:	f04f 0000 	mov.w	r0, #0
 8001782:	f04f 0100 	mov.w	r1, #0
 8001786:	0159      	lsls	r1, r3, #5
 8001788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800178c:	0150      	lsls	r0, r2, #5
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	ebb2 080a 	subs.w	r8, r2, sl
 8001796:	eb63 090b 	sbc.w	r9, r3, fp
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017ae:	ebb2 0408 	subs.w	r4, r2, r8
 80017b2:	eb63 0509 	sbc.w	r5, r3, r9
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	00eb      	lsls	r3, r5, #3
 80017c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017c4:	00e2      	lsls	r2, r4, #3
 80017c6:	4614      	mov	r4, r2
 80017c8:	461d      	mov	r5, r3
 80017ca:	eb14 030a 	adds.w	r3, r4, sl
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	eb45 030b 	adc.w	r3, r5, fp
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017e2:	4629      	mov	r1, r5
 80017e4:	028b      	lsls	r3, r1, #10
 80017e6:	4621      	mov	r1, r4
 80017e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017ec:	4621      	mov	r1, r4
 80017ee:	028a      	lsls	r2, r1, #10
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f6:	2200      	movs	r2, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	60fa      	str	r2, [r7, #12]
 80017fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001800:	f7ff f9fa 	bl	8000bf8 <__aeabi_uldivmod>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4613      	mov	r3, r2
 800180a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
	    pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800180c:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <Get_SysClock_Freq+0x188>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	0c1b      	lsrs	r3, r3, #16
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	3301      	adds	r3, #1
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	633b      	str	r3, [r7, #48]	@ 0x30

	    sysclock_freq = pllvco / pllp;
 800181c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800181e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001820:	fbb2 f3f3 	udiv	r3, r2, r3
 8001824:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 8001826:	e002      	b.n	800182e <Get_SysClock_Freq+0x172>
	}
	default:
	{
		sysclock_freq = HSI_VALUE;
 8001828:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <Get_SysClock_Freq+0x18c>)
 800182a:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 800182c:	bf00      	nop
	}
	}

	Tick_Init(uwTickPrio);
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <Get_SysClock_Freq+0x194>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fbd8 	bl	8001fe8 <Tick_Init>

	return sysclock_freq;
 8001838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800183a:	4618      	mov	r0, r3
 800183c:	3740      	adds	r7, #64	@ 0x40
 800183e:	46bd      	mov	sp, r7
 8001840:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001844:	40023800 	.word	0x40023800
 8001848:	00f42400 	.word	0x00f42400
 800184c:	016e3600 	.word	0x016e3600
 8001850:	20000004 	.word	0x20000004

08001854 <Delay_Ms>:

void Delay_Ms(uint32_t delay_time)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	uint32_t TickStart = uwTick;
 800185c:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <Delay_Ms+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60bb      	str	r3, [r7, #8]
	uint32_t wait = delay_time;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]

	if(wait < MS_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d002      	beq.n	8001874 <Delay_Ms+0x20>
	{
		wait += (uint32_t)1;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3301      	adds	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
	}

	while((uwTick - TickStart) < wait);
 8001874:	bf00      	nop
 8001876:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <Delay_Ms+0x40>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	429a      	cmp	r2, r3
 8001882:	d8f8      	bhi.n	8001876 <Delay_Ms+0x22>
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000284 	.word	0x20000284

08001898 <RCC_GetPCLK_Freq>:

uint32_t RCC_GetPCLK_Freq(uint32_t cfgr_ppre, uint32_t cfgr_pos)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
	return (SystemCoreClock >> APBPrescTable[cfgr_ppre >> cfgr_pos]);
 80018a2:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <RCC_GetPCLK_Freq+0x28>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	fa21 f202 	lsr.w	r2, r1, r2
 80018ae:	4905      	ldr	r1, [pc, #20]	@ (80018c4 <RCC_GetPCLK_Freq+0x2c>)
 80018b0:	5c8a      	ldrb	r2, [r1, r2]
 80018b2:	40d3      	lsrs	r3, r2
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	20000000 	.word	0x20000000
 80018c4:	08005638 	.word	0x08005638

080018c8 <PeriphCLKConfig>:

Error_HandleTypeDef PeriphCLKConfig(RCC_Periph_CLK_ConfigTypedef *periph_clk_config)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	uint32_t TickStart = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg0 = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
	uint32_t plli2s_used = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
	uint32_t pllsai_used = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

	if(((periph_clk_config->PeriphClockSelection) & (uint32_t)0x80000) == (uint32_t)0x80000U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d010      	beq.n	800190e <PeriphCLKConfig+0x46>
	{
		MODIFY_REG(RCC->DCKCFGR1, RCC_DCKCFGR1_SAI1SEL, (uint32_t)(periph_clk_config->Sai1ClockSelection));
 80018ec:	4b58      	ldr	r3, [pc, #352]	@ (8001a50 <PeriphCLKConfig+0x188>)
 80018ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018fa:	4955      	ldr	r1, [pc, #340]	@ (8001a50 <PeriphCLKConfig+0x188>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
		if((periph_clk_config->Sai1ClockSelection) == (uint32_t)0x00U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <PeriphCLKConfig+0x46>
		{
			pllsai_used = 1;
 800190a:	2301      	movs	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
		}
	}

	if(((periph_clk_config->PeriphClockSelection) & 0x40U) == 0x40U)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00a      	beq.n	8001930 <PeriphCLKConfig+0x68>
	{
		MODIFY_REG(RCC->DCKCFGR2, RCC_DCKCFGR2_USART1SEL, (uint32_t)(periph_clk_config->Usart1ClockSelection));
 800191a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a50 <PeriphCLKConfig+0x188>)
 800191c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001920:	f023 0203 	bic.w	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001928:	4949      	ldr	r1, [pc, #292]	@ (8001a50 <PeriphCLKConfig+0x188>)
 800192a:	4313      	orrs	r3, r2
 800192c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
	}

	if(pllsai_used == 1)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b01      	cmp	r3, #1
 8001934:	f040 8084 	bne.w	8001a40 <PeriphCLKConfig+0x178>
	{
		RCC->CR &= ~(RCC_CR_PLLSAION);
 8001938:	4b45      	ldr	r3, [pc, #276]	@ (8001a50 <PeriphCLKConfig+0x188>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a44      	ldr	r2, [pc, #272]	@ (8001a50 <PeriphCLKConfig+0x188>)
 800193e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001942:	6013      	str	r3, [r2, #0]

		TickStart = uwTick;
 8001944:	4b43      	ldr	r3, [pc, #268]	@ (8001a54 <PeriphCLKConfig+0x18c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	613b      	str	r3, [r7, #16]
		while(((RCC->CR & RCC_CR_PLLSAIRDY) == RCC_CR_PLLSAIRDY) == RESET)
 800194a:	e007      	b.n	800195c <PeriphCLKConfig+0x94>
		{
			if((uwTick - TickStart) > PLLSAI_TIMEOUT_VALUE)
 800194c:	4b41      	ldr	r3, [pc, #260]	@ (8001a54 <PeriphCLKConfig+0x18c>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b64      	cmp	r3, #100	@ 0x64
 8001956:	d901      	bls.n	800195c <PeriphCLKConfig+0x94>
			{
				return STATE_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e072      	b.n	8001a42 <PeriphCLKConfig+0x17a>
		while(((RCC->CR & RCC_CR_PLLSAIRDY) == RCC_CR_PLLSAIRDY) == RESET)
 800195c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a50 <PeriphCLKConfig+0x188>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001968:	d1f0      	bne.n	800194c <PeriphCLKConfig+0x84>
			}
		}

	    if(((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x80000U) == (uint32_t)0x80000U) && (periph_clk_config->Sai1ClockSelection == (uint32_t)0x00U)) ||\
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <PeriphCLKConfig+0xb6>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800197a:	2b00      	cmp	r3, #0
 800197c:	d009      	beq.n	8001992 <PeriphCLKConfig+0xca>
	       ((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x100000U) == (uint32_t)0x100000) && (periph_clk_config->Sai2ClockSelection == (uint32_t)0x00U)))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
	    if(((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x80000U) == (uint32_t)0x80000U) && (periph_clk_config->Sai1ClockSelection == (uint32_t)0x00U)) ||\
 8001986:	2b00      	cmp	r3, #0
 8001988:	d023      	beq.n	80019d2 <PeriphCLKConfig+0x10a>
	       ((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x100000U) == (uint32_t)0x100000) && (periph_clk_config->Sai2ClockSelection == (uint32_t)0x00U)))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800198e:	2b00      	cmp	r3, #0
 8001990:	d11f      	bne.n	80019d2 <PeriphCLKConfig+0x10a>
	    {
	    	tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001992:	4b2f      	ldr	r3, [pc, #188]	@ (8001a50 <PeriphCLKConfig+0x188>)
 8001994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001998:	0c1b      	lsrs	r3, r3, #16
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	60fb      	str	r3, [r7, #12]

	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	019a      	lsls	r2, r3, #6
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	431a      	orrs	r2, r3
	    			tmpreg0 |
					((periph_clk_config->PLLSAI.PLLSAIQ) << RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	061b      	lsls	r3, r3, #24
	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 80019b0:	4927      	ldr	r1, [pc, #156]	@ (8001a50 <PeriphCLKConfig+0x188>)
	    			tmpreg0 |
 80019b2:	4313      	orrs	r3, r2
	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 80019b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

	    	MODIFY_REG(RCC->DCKCFGR1, RCC_DCKCFGR1_PLLSAIDIVQ, (periph_clk_config->PLLSAIDivQ - 1) << 8);
 80019b8:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <PeriphCLKConfig+0x188>)
 80019ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019be:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	4921      	ldr	r1, [pc, #132]	@ (8001a50 <PeriphCLKConfig+0x188>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
	    }

	    if((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x200000U) == (uint32_t)0x200000U) && (periph_clk_config->Clk48ClockSelection == RCC_DCKCFGR2_CK48MSEL))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d017      	beq.n	8001a0e <PeriphCLKConfig+0x146>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80019e6:	d112      	bne.n	8001a0e <PeriphCLKConfig+0x146>
		{

	    	tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80019e8:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <PeriphCLKConfig+0x188>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ee:	0e1b      	lsrs	r3, r3, #24
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	60fb      	str	r3, [r7, #12]

	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	019a      	lsls	r2, r3, #6
					((periph_clk_config->PLLSAI.PLLSAIP) << RCC_PLLSAICFGR_PLLSAIP_Pos) |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	041b      	lsls	r3, r3, #16
	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 8001a02:	431a      	orrs	r2, r3
 8001a04:	4912      	ldr	r1, [pc, #72]	@ (8001a50 <PeriphCLKConfig+0x188>)
					((periph_clk_config->PLLSAI.PLLSAIP) << RCC_PLLSAICFGR_PLLSAIP_Pos) |
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 8001a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
					tmpreg0;
		}

	    (RCC->CR |= (RCC_CR_PLLSAION));
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <PeriphCLKConfig+0x188>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a0f      	ldr	r2, [pc, #60]	@ (8001a50 <PeriphCLKConfig+0x188>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	6013      	str	r3, [r2, #0]

	    TickStart = uwTick;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <PeriphCLKConfig+0x18c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	613b      	str	r3, [r7, #16]

	    while(((RCC->CR & RCC_CR_PLLSAIRDY) == RCC_CR_PLLSAIRDY) == RESET)
 8001a20:	e007      	b.n	8001a32 <PeriphCLKConfig+0x16a>
	    {
			if((uwTick - TickStart) > PLLSAI_TIMEOUT_VALUE)
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <PeriphCLKConfig+0x18c>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	@ 0x64
 8001a2c:	d901      	bls.n	8001a32 <PeriphCLKConfig+0x16a>
			{
				return STATE_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e007      	b.n	8001a42 <PeriphCLKConfig+0x17a>
	    while(((RCC->CR & RCC_CR_PLLSAIRDY) == RCC_CR_PLLSAIRDY) == RESET)
 8001a32:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <PeriphCLKConfig+0x188>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a3e:	d1f0      	bne.n	8001a22 <PeriphCLKConfig+0x15a>
			}
	    }
	}
	return STATE_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	20000284 	.word	0x20000284

08001a58 <GPIO_Config>:

#define GPIO_NUMBER           ((uint32_t)16U)


void GPIO_Config(GPIO_TypeDef *GPIOx, GPIO_ConfigTypeDef *GPIO_Conf)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
	uint32_t position = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
	uint32_t ioposition = 0x00;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
	uint32_t iocurrent = 0x00;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
	uint32_t temp = 0x00;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]

	for(position = 0; position < GPIO_NUMBER; position++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e163      	b.n	8001d40 <GPIO_Config+0x2e8>
	{
		ioposition = ((uint32_t)0x01) << position;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	60fb      	str	r3, [r7, #12]

		iocurrent = (uint32_t)(GPIO_Conf->PIN) & ioposition;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]

		if(iocurrent == ioposition)
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f040 8152 	bne.w	8001d3a <GPIO_Config+0x2e2>
		{
			if(((GPIO_Conf->MODE & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Conf->MODE & GPIO_MODE) == MODE_AF))
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d005      	beq.n	8001aae <GPIO_Config+0x56>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d130      	bne.n	8001b10 <GPIO_Config+0xb8>
			{
				temp = GPIOx->OSPEEDR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_Conf->SPEED << (position * 2));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
				GPIOx->OSPEEDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	609a      	str	r2, [r3, #8]

				temp = GPIOx->OTYPER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OTYPER_OT0 << position);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Conf->MODE & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 0201 	and.w	r2, r3, #1
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
				GPIOx->OTYPER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	605a      	str	r2, [r3, #4]
			}
		    if((GPIO_Conf->MODE & GPIO_MODE) != MODE_ANALOG)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d017      	beq.n	8001b4c <GPIO_Config+0xf4>
		    {
		        temp = GPIOx->PUPDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	613b      	str	r3, [r7, #16]
		        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
		        temp |= ((GPIO_Conf->PULL) << (position * 2));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
		        GPIOx->PUPDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	60da      	str	r2, [r3, #12]
		    }
		    if ((GPIO_Conf->MODE & GPIO_MODE) == MODE_AF)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d123      	bne.n	8001ba0 <GPIO_Config+0x148>
		    {
		        temp = GPIOx->AFR[position >> 3];
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b64:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
		        temp |= ((uint32_t)(GPIO_Conf->ALT) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
		        GPIOx->AFR[position >> 3] = temp;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	08da      	lsrs	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	6939      	ldr	r1, [r7, #16]
 8001b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		    }
		    temp = GPIOx->MODER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	613b      	str	r3, [r7, #16]
		    temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
		    temp |= ((GPIO_Conf->MODE & GPIO_MODE) << (position * 2));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
		    GPIOx->MODER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	601a      	str	r2, [r3, #0]

		    if((GPIO_Conf->MODE & EXTI_MODE) != 0x00u)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ac 	beq.w	8001d3a <GPIO_Config+0x2e2>
		    {
		    	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN);
 8001be2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d58 <GPIO_Config+0x300>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d58 <GPIO_Config+0x300>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	@ 0x44

		    	temp = SYSCFG->EXTICR[position >> 2];
 8001bee:	4a5b      	ldr	r2, [pc, #364]	@ (8001d5c <GPIO_Config+0x304>)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfa:	613b      	str	r3, [r7, #16]
		    	temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	220f      	movs	r2, #15
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
		    	temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a52      	ldr	r2, [pc, #328]	@ (8001d60 <GPIO_Config+0x308>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d02b      	beq.n	8001c72 <GPIO_Config+0x21a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a51      	ldr	r2, [pc, #324]	@ (8001d64 <GPIO_Config+0x30c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d025      	beq.n	8001c6e <GPIO_Config+0x216>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a50      	ldr	r2, [pc, #320]	@ (8001d68 <GPIO_Config+0x310>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01f      	beq.n	8001c6a <GPIO_Config+0x212>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d6c <GPIO_Config+0x314>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d019      	beq.n	8001c66 <GPIO_Config+0x20e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4e      	ldr	r2, [pc, #312]	@ (8001d70 <GPIO_Config+0x318>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <GPIO_Config+0x20a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4d      	ldr	r2, [pc, #308]	@ (8001d74 <GPIO_Config+0x31c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00d      	beq.n	8001c5e <GPIO_Config+0x206>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4c      	ldr	r2, [pc, #304]	@ (8001d78 <GPIO_Config+0x320>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d007      	beq.n	8001c5a <GPIO_Config+0x202>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4b      	ldr	r2, [pc, #300]	@ (8001d7c <GPIO_Config+0x324>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <GPIO_Config+0x1fe>
 8001c52:	2307      	movs	r3, #7
 8001c54:	e00e      	b.n	8001c74 <GPIO_Config+0x21c>
 8001c56:	2308      	movs	r3, #8
 8001c58:	e00c      	b.n	8001c74 <GPIO_Config+0x21c>
 8001c5a:	2306      	movs	r3, #6
 8001c5c:	e00a      	b.n	8001c74 <GPIO_Config+0x21c>
 8001c5e:	2305      	movs	r3, #5
 8001c60:	e008      	b.n	8001c74 <GPIO_Config+0x21c>
 8001c62:	2304      	movs	r3, #4
 8001c64:	e006      	b.n	8001c74 <GPIO_Config+0x21c>
 8001c66:	2303      	movs	r3, #3
 8001c68:	e004      	b.n	8001c74 <GPIO_Config+0x21c>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e002      	b.n	8001c74 <GPIO_Config+0x21c>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <GPIO_Config+0x21c>
 8001c72:	2300      	movs	r3, #0
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	f002 0203 	and.w	r2, r2, #3
 8001c7a:	0092      	lsls	r2, r2, #2
 8001c7c:	4093      	lsls	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
		    	SYSCFG->EXTICR[position >> 2] = temp;
 8001c84:	4935      	ldr	r1, [pc, #212]	@ (8001d5c <GPIO_Config+0x304>)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		        temp = EXTI->RTSR;
 8001c92:	4b3b      	ldr	r3, [pc, #236]	@ (8001d80 <GPIO_Config+0x328>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)iocurrent);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
		        if ((GPIO_Conf->MODE & TRIGGER_RISING) != 0x00u)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <GPIO_Config+0x25e>
		        {
		        	temp |= iocurrent;
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
		        }
		        EXTI->RTSR = temp;
 8001cb6:	4a32      	ldr	r2, [pc, #200]	@ (8001d80 <GPIO_Config+0x328>)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	6093      	str	r3, [r2, #8]

		        temp = EXTI->FTSR;
 8001cbc:	4b30      	ldr	r3, [pc, #192]	@ (8001d80 <GPIO_Config+0x328>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)iocurrent);
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
		        if ((GPIO_Conf->MODE & TRIGGER_FALLING) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <GPIO_Config+0x288>
		        {
		        	temp |= iocurrent;
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
		        }
		        EXTI->FTSR = temp;
 8001ce0:	4a27      	ldr	r2, [pc, #156]	@ (8001d80 <GPIO_Config+0x328>)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	60d3      	str	r3, [r2, #12]

		        temp = EXTI->EMR;
 8001ce6:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <GPIO_Config+0x328>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)iocurrent);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
		        if ((GPIO_Conf->MODE & EXTI_EVT) != 0x00u)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <GPIO_Config+0x2b2>
		        {
		        	temp |= iocurrent;
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
		        }
		        EXTI->EMR = temp;
 8001d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d80 <GPIO_Config+0x328>)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	6053      	str	r3, [r2, #4]

		        temp = EXTI->IMR;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	@ (8001d80 <GPIO_Config+0x328>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)iocurrent);
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
		        if ((GPIO_Conf->MODE & EXTI_IT) != 0x00u)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <GPIO_Config+0x2dc>
		        {
		        	temp |= iocurrent;
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
		        }
		        EXTI->IMR = temp;
 8001d34:	4a12      	ldr	r2, [pc, #72]	@ (8001d80 <GPIO_Config+0x328>)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	6013      	str	r3, [r2, #0]
	for(position = 0; position < GPIO_NUMBER; position++)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2b0f      	cmp	r3, #15
 8001d44:	f67f ae98 	bls.w	8001a78 <GPIO_Config+0x20>
		    }
		}
	}
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	371c      	adds	r7, #28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40013800 	.word	0x40013800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020c00 	.word	0x40020c00
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40021400 	.word	0x40021400
 8001d78:	40021800 	.word	0x40021800
 8001d7c:	40021c00 	.word	0x40021c00
 8001d80:	40013c00 	.word	0x40013c00

08001d84 <GPIO_Write>:

void GPIO_Write(GPIO_TypeDef *GPIOx, uint16_t Pin, GPIO_State State)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
	if(State != GPIO_RESET)
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <GPIO_Write+0x1e>
	{
		GPIOx->BSRR = Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	619a      	str	r2, [r3, #24]
	}
	else
	{
		GPIOx->BSRR = (uint32_t)Pin << 16;
	}
}
 8001da0:	e003      	b.n	8001daa <GPIO_Write+0x26>
		GPIOx->BSRR = (uint32_t)Pin << 16;
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	041a      	lsls	r2, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <NMI_Handler>:
 */

#include "interrupt.h"

void NMI_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
	while(1);
 8001dba:	bf00      	nop
 8001dbc:	e7fd      	b.n	8001dba <NMI_Handler+0x4>

08001dbe <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
	while(1);
 8001dc2:	bf00      	nop
 8001dc4:	e7fd      	b.n	8001dc2 <HardFault_Handler+0x4>

08001dc6 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
	while(1);
 8001dca:	bf00      	nop
 8001dcc:	e7fd      	b.n	8001dca <MemManage_Handler+0x4>

08001dce <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
	while(1);
 8001dd2:	bf00      	nop
 8001dd4:	e7fd      	b.n	8001dd2 <BusFault_Handler+0x4>

08001dd6 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
	while(1);
 8001dda:	bf00      	nop
 8001ddc:	e7fd      	b.n	8001dda <UsageFault_Handler+0x4>

08001dde <SVC_Handler>:
}

void SVC_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0

}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <PendSV_Handler>:

void PendSV_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
	uwTick += 1U;
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <SysTick_Handler+0x18>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	4a03      	ldr	r2, [pc, #12]	@ (8001e20 <SysTick_Handler+0x18>)
 8001e14:	6013      	str	r3, [r2, #0]
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	20000284 	.word	0x20000284

08001e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e34:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <__NVIC_SetPriorityGrouping+0x40>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e40:	4013      	ands	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <__NVIC_SetPriorityGrouping+0x40>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00
 8001e68:	05fa0000 	.word	0x05fa0000

08001e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e70:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <__NVIC_GetPriorityGrouping+0x18>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	f003 0307 	and.w	r3, r3, #7
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db0a      	blt.n	8001eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	490c      	ldr	r1, [pc, #48]	@ (8001ed4 <__NVIC_SetPriority+0x4c>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb0:	e00a      	b.n	8001ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4908      	ldr	r1, [pc, #32]	@ (8001ed8 <__NVIC_SetPriority+0x50>)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	761a      	strb	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e100 	.word	0xe000e100
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	@ 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f1c3 0307 	rsb	r3, r3, #7
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	bf28      	it	cs
 8001efa:	2304      	movcs	r3, #4
 8001efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d902      	bls.n	8001f0c <NVIC_EncodePriority+0x30>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3b03      	subs	r3, #3
 8001f0a:	e000      	b.n	8001f0e <NVIC_EncodePriority+0x32>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	4313      	orrs	r3, r2
         );
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	@ 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f54:	d301      	bcc.n	8001f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00f      	b.n	8001f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <SysTick_Config+0x40>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f62:	210f      	movs	r1, #15
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f7ff ff8e 	bl	8001e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <SysTick_Config+0x40>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f72:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <SysTick_Config+0x40>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	e000e010 	.word	0xe000e010

08001f88 <System_Config>:

#include "system_config.h"


void System_Config(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
	NVIC_SetPriorityGrouping((uint32_t)PRIORITY_GROUP);
 8001f8e:	2003      	movs	r0, #3
 8001f90:	f7ff ff48 	bl	8001e24 <__NVIC_SetPriorityGrouping>

	Tick_Init(TICK_INT_PRIORITY);
 8001f94:	2015      	movs	r0, #21
 8001f96:	f000 f827 	bl	8001fe8 <Tick_Init>

	do
	{
		__IO uint32_t tmpreg;
		SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8001f9a:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <System_Config+0x58>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	4a10      	ldr	r2, [pc, #64]	@ (8001fe0 <System_Config+0x58>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	6413      	str	r3, [r2, #64]	@ 0x40
		tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <System_Config+0x58>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	607b      	str	r3, [r7, #4]
		UNUSED(tmpreg);
 8001fb0:	687b      	ldr	r3, [r7, #4]
	while(0);

	do
	{
		__IO uint32_t tmpreg;
		SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN);
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <System_Config+0x58>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <System_Config+0x58>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fbc:	6453      	str	r3, [r2, #68]	@ 0x44
		tmpreg = READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN);
 8001fbe:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <System_Config+0x58>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fc6:	603b      	str	r3, [r7, #0]
		UNUSED(tmpreg);
 8001fc8:	683b      	ldr	r3, [r7, #0]
	}
	while(0);

	MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_CR1_VOS);
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <System_Config+0x5c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a05      	ldr	r2, [pc, #20]	@ (8001fe4 <System_Config+0x5c>)
 8001fd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fd4:	6013      	str	r3, [r2, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40007000 	.word	0x40007000

08001fe8 <Tick_Init>:

void Tick_Init(uint32_t TickPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	uint32_t priority_group = 0x00;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]

	priority_group = NVIC_GetPriorityGrouping();
 8001ff4:	f7ff ff3a 	bl	8001e6c <__NVIC_GetPriorityGrouping>
 8001ff8:	60f8      	str	r0, [r7, #12]
	SysTick_Config(SystemCoreClock / (1000U / 1U));
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <Tick_Init+0x50>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800203c <Tick_Init+0x54>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ff9c 	bl	8001f44 <SysTick_Config>

	if(TickPriority < (1U << __NVIC_PRIO_BITS))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	d80d      	bhi.n	800202e <Tick_Init+0x46>
	{
		NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(priority_group, TickPriority, 0));
 8002012:	2200      	movs	r2, #0
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f7ff ff60 	bl	8001edc <NVIC_EncodePriority>
 800201c:	4603      	mov	r3, r0
 800201e:	4619      	mov	r1, r3
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f7ff ff30 	bl	8001e88 <__NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8002028:	4a05      	ldr	r2, [pc, #20]	@ (8002040 <Tick_Init+0x58>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
	}
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000000 	.word	0x20000000
 800203c:	10624dd3 	.word	0x10624dd3
 8002040:	20000004 	.word	0x20000004

08002044 <UART_Config>:

static void UART_EndRxTransfer(UART_HandleTypeDef *huart);


Error_HandleTypeDef UART_Config(UART_HandleTypeDef *huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	if(huart == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <UART_Config+0x12>
	{
		return STATE_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e039      	b.n	80020ca <UART_Config+0x86>
	}

	if(huart->gSTATE == UART_STATE_RST)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <UART_Config+0x28>
	{
		huart->LOCK = UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

		UART_Pin_Config(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fb08 	bl	800267c <UART_Pin_Config>
	}
	huart->gSTATE = UART_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2224      	movs	r2, #36	@ 0x24
 8002070:	675a      	str	r2, [r3, #116]	@ 0x74

	huart->INSTANCE->CR1 &= ~(USART_CR1_UE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]
	if(huart->ADV_INIT.ADV_FEAT_INIT != 0x00U)
	{

	}

	if(UART_SetConfig(huart) == STATE_ERROR)
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f826 	bl	80020d4 <UART_SetConfig>
 8002088:	4603      	mov	r3, r0
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <UART_Config+0x4e>
	{
		return STATE_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e01b      	b.n	80020ca <UART_Config+0x86>
	}

	CLEAR_BIT(huart->INSTANCE->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020a0:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(huart->INSTANCE->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020b0:	609a      	str	r2, [r3, #8]

	huart->INSTANCE->CR1 |= USART_CR1_UE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

	return (UART_CheckIdleState(huart));
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fa82 	bl	80025cc <UART_CheckIdleState>
 80020c8:	4603      	mov	r3, r0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <UART_SetConfig>:

Error_HandleTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;
	uint16_t brrtemp;
	UART_ClockSourceTypeDef clocksource;
	uint32_t usartdiv;
	Error_HandleTypeDef ret = STATE_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	77bb      	strb	r3, [r7, #30]
	uint32_t pclk;

	tmpreg = (uint32_t)huart->INIT.WORD_LEN | huart->INIT.PARITY | huart->INIT.MODE | huart->INIT.OVER_SAMPLE ;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
	MODIFY_REG((huart->INSTANCE->CR1), USART_CR1_FIELDS, tmpreg);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4ba6      	ldr	r3, [pc, #664]	@ (8002398 <UART_SetConfig+0x2c4>)
 8002100:	4013      	ands	r3, r2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	6979      	ldr	r1, [r7, #20]
 8002108:	430b      	orrs	r3, r1
 800210a:	6013      	str	r3, [r2, #0]

	MODIFY_REG(huart->INSTANCE->CR2, USART_CR2_STOP, huart->INIT.STOP_BIT);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]

	tmpreg = (uint32_t)huart->INIT.FLOW_CTRL;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	617b      	str	r3, [r7, #20]

	tmpreg |= huart->INIT.ONEB_SAMPLE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	4313      	orrs	r3, r2
 8002130:	617b      	str	r3, [r7, #20]
	MODIFY_REG(huart->INSTANCE->CR3, USART_CR3_FIELDS, tmpreg);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	430a      	orrs	r2, r1
 8002144:	609a      	str	r2, [r3, #8]
	UART_GETCLOCKSOURCE(huart, clocksource);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a94      	ldr	r2, [pc, #592]	@ (800239c <UART_SetConfig+0x2c8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d120      	bne.n	8002192 <UART_SetConfig+0xbe>
 8002150:	4b93      	ldr	r3, [pc, #588]	@ (80023a0 <UART_SetConfig+0x2cc>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b03      	cmp	r3, #3
 800215c:	d816      	bhi.n	800218c <UART_SetConfig+0xb8>
 800215e:	a201      	add	r2, pc, #4	@ (adr r2, 8002164 <UART_SetConfig+0x90>)
 8002160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002164:	08002175 	.word	0x08002175
 8002168:	08002181 	.word	0x08002181
 800216c:	0800217b 	.word	0x0800217b
 8002170:	08002187 	.word	0x08002187
 8002174:	2301      	movs	r3, #1
 8002176:	77fb      	strb	r3, [r7, #31]
 8002178:	e150      	b.n	800241c <UART_SetConfig+0x348>
 800217a:	2302      	movs	r3, #2
 800217c:	77fb      	strb	r3, [r7, #31]
 800217e:	e14d      	b.n	800241c <UART_SetConfig+0x348>
 8002180:	2304      	movs	r3, #4
 8002182:	77fb      	strb	r3, [r7, #31]
 8002184:	e14a      	b.n	800241c <UART_SetConfig+0x348>
 8002186:	2308      	movs	r3, #8
 8002188:	77fb      	strb	r3, [r7, #31]
 800218a:	e147      	b.n	800241c <UART_SetConfig+0x348>
 800218c:	2310      	movs	r3, #16
 800218e:	77fb      	strb	r3, [r7, #31]
 8002190:	e144      	b.n	800241c <UART_SetConfig+0x348>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a83      	ldr	r2, [pc, #524]	@ (80023a4 <UART_SetConfig+0x2d0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d132      	bne.n	8002202 <UART_SetConfig+0x12e>
 800219c:	4b80      	ldr	r3, [pc, #512]	@ (80023a0 <UART_SetConfig+0x2cc>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b0c      	cmp	r3, #12
 80021a8:	d828      	bhi.n	80021fc <UART_SetConfig+0x128>
 80021aa:	a201      	add	r2, pc, #4	@ (adr r2, 80021b0 <UART_SetConfig+0xdc>)
 80021ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b0:	080021e5 	.word	0x080021e5
 80021b4:	080021fd 	.word	0x080021fd
 80021b8:	080021fd 	.word	0x080021fd
 80021bc:	080021fd 	.word	0x080021fd
 80021c0:	080021f1 	.word	0x080021f1
 80021c4:	080021fd 	.word	0x080021fd
 80021c8:	080021fd 	.word	0x080021fd
 80021cc:	080021fd 	.word	0x080021fd
 80021d0:	080021eb 	.word	0x080021eb
 80021d4:	080021fd 	.word	0x080021fd
 80021d8:	080021fd 	.word	0x080021fd
 80021dc:	080021fd 	.word	0x080021fd
 80021e0:	080021f7 	.word	0x080021f7
 80021e4:	2300      	movs	r3, #0
 80021e6:	77fb      	strb	r3, [r7, #31]
 80021e8:	e118      	b.n	800241c <UART_SetConfig+0x348>
 80021ea:	2302      	movs	r3, #2
 80021ec:	77fb      	strb	r3, [r7, #31]
 80021ee:	e115      	b.n	800241c <UART_SetConfig+0x348>
 80021f0:	2304      	movs	r3, #4
 80021f2:	77fb      	strb	r3, [r7, #31]
 80021f4:	e112      	b.n	800241c <UART_SetConfig+0x348>
 80021f6:	2308      	movs	r3, #8
 80021f8:	77fb      	strb	r3, [r7, #31]
 80021fa:	e10f      	b.n	800241c <UART_SetConfig+0x348>
 80021fc:	2310      	movs	r3, #16
 80021fe:	77fb      	strb	r3, [r7, #31]
 8002200:	e10c      	b.n	800241c <UART_SetConfig+0x348>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a68      	ldr	r2, [pc, #416]	@ (80023a8 <UART_SetConfig+0x2d4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d120      	bne.n	800224e <UART_SetConfig+0x17a>
 800220c:	4b64      	ldr	r3, [pc, #400]	@ (80023a0 <UART_SetConfig+0x2cc>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002212:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002216:	2b30      	cmp	r3, #48	@ 0x30
 8002218:	d013      	beq.n	8002242 <UART_SetConfig+0x16e>
 800221a:	2b30      	cmp	r3, #48	@ 0x30
 800221c:	d814      	bhi.n	8002248 <UART_SetConfig+0x174>
 800221e:	2b20      	cmp	r3, #32
 8002220:	d009      	beq.n	8002236 <UART_SetConfig+0x162>
 8002222:	2b20      	cmp	r3, #32
 8002224:	d810      	bhi.n	8002248 <UART_SetConfig+0x174>
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <UART_SetConfig+0x15c>
 800222a:	2b10      	cmp	r3, #16
 800222c:	d006      	beq.n	800223c <UART_SetConfig+0x168>
 800222e:	e00b      	b.n	8002248 <UART_SetConfig+0x174>
 8002230:	2300      	movs	r3, #0
 8002232:	77fb      	strb	r3, [r7, #31]
 8002234:	e0f2      	b.n	800241c <UART_SetConfig+0x348>
 8002236:	2302      	movs	r3, #2
 8002238:	77fb      	strb	r3, [r7, #31]
 800223a:	e0ef      	b.n	800241c <UART_SetConfig+0x348>
 800223c:	2304      	movs	r3, #4
 800223e:	77fb      	strb	r3, [r7, #31]
 8002240:	e0ec      	b.n	800241c <UART_SetConfig+0x348>
 8002242:	2308      	movs	r3, #8
 8002244:	77fb      	strb	r3, [r7, #31]
 8002246:	e0e9      	b.n	800241c <UART_SetConfig+0x348>
 8002248:	2310      	movs	r3, #16
 800224a:	77fb      	strb	r3, [r7, #31]
 800224c:	e0e6      	b.n	800241c <UART_SetConfig+0x348>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a56      	ldr	r2, [pc, #344]	@ (80023ac <UART_SetConfig+0x2d8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d120      	bne.n	800229a <UART_SetConfig+0x1c6>
 8002258:	4b51      	ldr	r3, [pc, #324]	@ (80023a0 <UART_SetConfig+0x2cc>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002262:	2bc0      	cmp	r3, #192	@ 0xc0
 8002264:	d013      	beq.n	800228e <UART_SetConfig+0x1ba>
 8002266:	2bc0      	cmp	r3, #192	@ 0xc0
 8002268:	d814      	bhi.n	8002294 <UART_SetConfig+0x1c0>
 800226a:	2b80      	cmp	r3, #128	@ 0x80
 800226c:	d009      	beq.n	8002282 <UART_SetConfig+0x1ae>
 800226e:	2b80      	cmp	r3, #128	@ 0x80
 8002270:	d810      	bhi.n	8002294 <UART_SetConfig+0x1c0>
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <UART_SetConfig+0x1a8>
 8002276:	2b40      	cmp	r3, #64	@ 0x40
 8002278:	d006      	beq.n	8002288 <UART_SetConfig+0x1b4>
 800227a:	e00b      	b.n	8002294 <UART_SetConfig+0x1c0>
 800227c:	2300      	movs	r3, #0
 800227e:	77fb      	strb	r3, [r7, #31]
 8002280:	e0cc      	b.n	800241c <UART_SetConfig+0x348>
 8002282:	2302      	movs	r3, #2
 8002284:	77fb      	strb	r3, [r7, #31]
 8002286:	e0c9      	b.n	800241c <UART_SetConfig+0x348>
 8002288:	2304      	movs	r3, #4
 800228a:	77fb      	strb	r3, [r7, #31]
 800228c:	e0c6      	b.n	800241c <UART_SetConfig+0x348>
 800228e:	2308      	movs	r3, #8
 8002290:	77fb      	strb	r3, [r7, #31]
 8002292:	e0c3      	b.n	800241c <UART_SetConfig+0x348>
 8002294:	2310      	movs	r3, #16
 8002296:	77fb      	strb	r3, [r7, #31]
 8002298:	e0c0      	b.n	800241c <UART_SetConfig+0x348>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a44      	ldr	r2, [pc, #272]	@ (80023b0 <UART_SetConfig+0x2dc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d125      	bne.n	80022f0 <UART_SetConfig+0x21c>
 80022a4:	4b3e      	ldr	r3, [pc, #248]	@ (80023a0 <UART_SetConfig+0x2cc>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022b2:	d017      	beq.n	80022e4 <UART_SetConfig+0x210>
 80022b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022b8:	d817      	bhi.n	80022ea <UART_SetConfig+0x216>
 80022ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022be:	d00b      	beq.n	80022d8 <UART_SetConfig+0x204>
 80022c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022c4:	d811      	bhi.n	80022ea <UART_SetConfig+0x216>
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <UART_SetConfig+0x1fe>
 80022ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022ce:	d006      	beq.n	80022de <UART_SetConfig+0x20a>
 80022d0:	e00b      	b.n	80022ea <UART_SetConfig+0x216>
 80022d2:	2300      	movs	r3, #0
 80022d4:	77fb      	strb	r3, [r7, #31]
 80022d6:	e0a1      	b.n	800241c <UART_SetConfig+0x348>
 80022d8:	2302      	movs	r3, #2
 80022da:	77fb      	strb	r3, [r7, #31]
 80022dc:	e09e      	b.n	800241c <UART_SetConfig+0x348>
 80022de:	2304      	movs	r3, #4
 80022e0:	77fb      	strb	r3, [r7, #31]
 80022e2:	e09b      	b.n	800241c <UART_SetConfig+0x348>
 80022e4:	2308      	movs	r3, #8
 80022e6:	77fb      	strb	r3, [r7, #31]
 80022e8:	e098      	b.n	800241c <UART_SetConfig+0x348>
 80022ea:	2310      	movs	r3, #16
 80022ec:	77fb      	strb	r3, [r7, #31]
 80022ee:	e095      	b.n	800241c <UART_SetConfig+0x348>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2f      	ldr	r2, [pc, #188]	@ (80023b4 <UART_SetConfig+0x2e0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d125      	bne.n	8002346 <UART_SetConfig+0x272>
 80022fa:	4b29      	ldr	r3, [pc, #164]	@ (80023a0 <UART_SetConfig+0x2cc>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002300:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002304:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002308:	d017      	beq.n	800233a <UART_SetConfig+0x266>
 800230a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800230e:	d817      	bhi.n	8002340 <UART_SetConfig+0x26c>
 8002310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002314:	d00b      	beq.n	800232e <UART_SetConfig+0x25a>
 8002316:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800231a:	d811      	bhi.n	8002340 <UART_SetConfig+0x26c>
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <UART_SetConfig+0x254>
 8002320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002324:	d006      	beq.n	8002334 <UART_SetConfig+0x260>
 8002326:	e00b      	b.n	8002340 <UART_SetConfig+0x26c>
 8002328:	2301      	movs	r3, #1
 800232a:	77fb      	strb	r3, [r7, #31]
 800232c:	e076      	b.n	800241c <UART_SetConfig+0x348>
 800232e:	2302      	movs	r3, #2
 8002330:	77fb      	strb	r3, [r7, #31]
 8002332:	e073      	b.n	800241c <UART_SetConfig+0x348>
 8002334:	2304      	movs	r3, #4
 8002336:	77fb      	strb	r3, [r7, #31]
 8002338:	e070      	b.n	800241c <UART_SetConfig+0x348>
 800233a:	2308      	movs	r3, #8
 800233c:	77fb      	strb	r3, [r7, #31]
 800233e:	e06d      	b.n	800241c <UART_SetConfig+0x348>
 8002340:	2310      	movs	r3, #16
 8002342:	77fb      	strb	r3, [r7, #31]
 8002344:	e06a      	b.n	800241c <UART_SetConfig+0x348>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1b      	ldr	r2, [pc, #108]	@ (80023b8 <UART_SetConfig+0x2e4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d138      	bne.n	80023c2 <UART_SetConfig+0x2ee>
 8002350:	4b13      	ldr	r3, [pc, #76]	@ (80023a0 <UART_SetConfig+0x2cc>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002356:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800235a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800235e:	d017      	beq.n	8002390 <UART_SetConfig+0x2bc>
 8002360:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002364:	d82a      	bhi.n	80023bc <UART_SetConfig+0x2e8>
 8002366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800236a:	d00b      	beq.n	8002384 <UART_SetConfig+0x2b0>
 800236c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002370:	d824      	bhi.n	80023bc <UART_SetConfig+0x2e8>
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <UART_SetConfig+0x2aa>
 8002376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800237a:	d006      	beq.n	800238a <UART_SetConfig+0x2b6>
 800237c:	e01e      	b.n	80023bc <UART_SetConfig+0x2e8>
 800237e:	2300      	movs	r3, #0
 8002380:	77fb      	strb	r3, [r7, #31]
 8002382:	e04b      	b.n	800241c <UART_SetConfig+0x348>
 8002384:	2302      	movs	r3, #2
 8002386:	77fb      	strb	r3, [r7, #31]
 8002388:	e048      	b.n	800241c <UART_SetConfig+0x348>
 800238a:	2304      	movs	r3, #4
 800238c:	77fb      	strb	r3, [r7, #31]
 800238e:	e045      	b.n	800241c <UART_SetConfig+0x348>
 8002390:	2308      	movs	r3, #8
 8002392:	77fb      	strb	r3, [r7, #31]
 8002394:	e042      	b.n	800241c <UART_SetConfig+0x348>
 8002396:	bf00      	nop
 8002398:	efff69f3 	.word	0xefff69f3
 800239c:	40011000 	.word	0x40011000
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40004400 	.word	0x40004400
 80023a8:	40004800 	.word	0x40004800
 80023ac:	40004c00 	.word	0x40004c00
 80023b0:	40005000 	.word	0x40005000
 80023b4:	40011400 	.word	0x40011400
 80023b8:	40007800 	.word	0x40007800
 80023bc:	2310      	movs	r3, #16
 80023be:	77fb      	strb	r3, [r7, #31]
 80023c0:	e02c      	b.n	800241c <UART_SetConfig+0x348>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7e      	ldr	r2, [pc, #504]	@ (80025c0 <UART_SetConfig+0x4ec>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d125      	bne.n	8002418 <UART_SetConfig+0x344>
 80023cc:	4b7d      	ldr	r3, [pc, #500]	@ (80025c4 <UART_SetConfig+0x4f0>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80023da:	d017      	beq.n	800240c <UART_SetConfig+0x338>
 80023dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80023e0:	d817      	bhi.n	8002412 <UART_SetConfig+0x33e>
 80023e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023e6:	d00b      	beq.n	8002400 <UART_SetConfig+0x32c>
 80023e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023ec:	d811      	bhi.n	8002412 <UART_SetConfig+0x33e>
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <UART_SetConfig+0x326>
 80023f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023f6:	d006      	beq.n	8002406 <UART_SetConfig+0x332>
 80023f8:	e00b      	b.n	8002412 <UART_SetConfig+0x33e>
 80023fa:	2300      	movs	r3, #0
 80023fc:	77fb      	strb	r3, [r7, #31]
 80023fe:	e00d      	b.n	800241c <UART_SetConfig+0x348>
 8002400:	2302      	movs	r3, #2
 8002402:	77fb      	strb	r3, [r7, #31]
 8002404:	e00a      	b.n	800241c <UART_SetConfig+0x348>
 8002406:	2304      	movs	r3, #4
 8002408:	77fb      	strb	r3, [r7, #31]
 800240a:	e007      	b.n	800241c <UART_SetConfig+0x348>
 800240c:	2308      	movs	r3, #8
 800240e:	77fb      	strb	r3, [r7, #31]
 8002410:	e004      	b.n	800241c <UART_SetConfig+0x348>
 8002412:	2310      	movs	r3, #16
 8002414:	77fb      	strb	r3, [r7, #31]
 8002416:	e001      	b.n	800241c <UART_SetConfig+0x348>
 8002418:	2310      	movs	r3, #16
 800241a:	77fb      	strb	r3, [r7, #31]

	if (huart->INIT.OVER_SAMPLE == USART_CR1_OVER8)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002424:	d168      	bne.n	80024f8 <UART_SetConfig+0x424>
	{
		switch (clocksource)
 8002426:	7ffb      	ldrb	r3, [r7, #31]
 8002428:	2b08      	cmp	r3, #8
 800242a:	d834      	bhi.n	8002496 <UART_SetConfig+0x3c2>
 800242c:	a201      	add	r2, pc, #4	@ (adr r2, 8002434 <UART_SetConfig+0x360>)
 800242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002432:	bf00      	nop
 8002434:	08002459 	.word	0x08002459
 8002438:	0800246d 	.word	0x0800246d
 800243c:	08002481 	.word	0x08002481
 8002440:	08002497 	.word	0x08002497
 8002444:	08002487 	.word	0x08002487
 8002448:	08002497 	.word	0x08002497
 800244c:	08002497 	.word	0x08002497
 8002450:	08002497 	.word	0x08002497
 8002454:	0800248f 	.word	0x0800248f
		{
		case UART_CLOCKSOURCE_PCLK1:
			pclk = RCC_GetPCLK_Freq((RCC->CFGR & RCC_CFGR_PPRE1), RCC_CFGR_PPRE1_Pos);
 8002458:	4b5a      	ldr	r3, [pc, #360]	@ (80025c4 <UART_SetConfig+0x4f0>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002460:	210a      	movs	r1, #10
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fa18 	bl	8001898 <RCC_GetPCLK_Freq>
 8002468:	61b8      	str	r0, [r7, #24]
			break;
 800246a:	e019      	b.n	80024a0 <UART_SetConfig+0x3cc>
		case UART_CLOCKSOURCE_PCLK2:
			pclk = RCC_GetPCLK_Freq((RCC->CFGR & RCC_CFGR_PPRE2), RCC_CFGR_PPRE2_Pos);
 800246c:	4b55      	ldr	r3, [pc, #340]	@ (80025c4 <UART_SetConfig+0x4f0>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002474:	210d      	movs	r1, #13
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fa0e 	bl	8001898 <RCC_GetPCLK_Freq>
 800247c:	61b8      	str	r0, [r7, #24]
	        break;
 800247e:	e00f      	b.n	80024a0 <UART_SetConfig+0x3cc>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8002480:	4b51      	ldr	r3, [pc, #324]	@ (80025c8 <UART_SetConfig+0x4f4>)
 8002482:	61bb      	str	r3, [r7, #24]
	        break;
 8002484:	e00c      	b.n	80024a0 <UART_SetConfig+0x3cc>
		case UART_CLOCKSOURCE_SYSCLK:
	        pclk = Get_SysClock_Freq();
 8002486:	f7ff f919 	bl	80016bc <Get_SysClock_Freq>
 800248a:	61b8      	str	r0, [r7, #24]
	        break;
 800248c:	e008      	b.n	80024a0 <UART_SetConfig+0x3cc>
		case UART_CLOCKSOURCE_LSE:
	        pclk = (uint32_t) LSE_VALUE;
 800248e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002492:	61bb      	str	r3, [r7, #24]
	        break;
 8002494:	e004      	b.n	80024a0 <UART_SetConfig+0x3cc>
		default:
	        pclk = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
	        ret = STATE_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	77bb      	strb	r3, [r7, #30]
	        break;
 800249e:	bf00      	nop
		}
		if (pclk != 0U)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8080 	beq.w	80025a8 <UART_SetConfig+0x4d4>
		{
			usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->INIT.BAUD));
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	005a      	lsls	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	085b      	lsrs	r3, r3, #1
 80024b2:	441a      	add	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024bc:	613b      	str	r3, [r7, #16]
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	d916      	bls.n	80024f2 <UART_SetConfig+0x41e>
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ca:	d212      	bcs.n	80024f2 <UART_SetConfig+0x41e>
			{
				brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	f023 030f 	bic.w	r3, r3, #15
 80024d4:	81fb      	strh	r3, [r7, #14]
				brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	89fb      	ldrh	r3, [r7, #14]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	81fb      	strh	r3, [r7, #14]
				huart->INSTANCE->BRR = brrtemp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	89fa      	ldrh	r2, [r7, #14]
 80024ee:	60da      	str	r2, [r3, #12]
 80024f0:	e05a      	b.n	80025a8 <UART_SetConfig+0x4d4>
			}
			else
			{
				ret = STATE_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	77bb      	strb	r3, [r7, #30]
 80024f6:	e057      	b.n	80025a8 <UART_SetConfig+0x4d4>
			}
		}
	}
	else
	{
	    switch (clocksource)
 80024f8:	7ffb      	ldrb	r3, [r7, #31]
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d833      	bhi.n	8002566 <UART_SetConfig+0x492>
 80024fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002504 <UART_SetConfig+0x430>)
 8002500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002504:	08002529 	.word	0x08002529
 8002508:	0800253d 	.word	0x0800253d
 800250c:	08002551 	.word	0x08002551
 8002510:	08002567 	.word	0x08002567
 8002514:	08002557 	.word	0x08002557
 8002518:	08002567 	.word	0x08002567
 800251c:	08002567 	.word	0x08002567
 8002520:	08002567 	.word	0x08002567
 8002524:	0800255f 	.word	0x0800255f
	    {
	    case UART_CLOCKSOURCE_PCLK1:
	        pclk = RCC_GetPCLK_Freq((RCC->CFGR & RCC_CFGR_PPRE1), RCC_CFGR_PPRE1_Pos);
 8002528:	4b26      	ldr	r3, [pc, #152]	@ (80025c4 <UART_SetConfig+0x4f0>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002530:	210a      	movs	r1, #10
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff f9b0 	bl	8001898 <RCC_GetPCLK_Freq>
 8002538:	61b8      	str	r0, [r7, #24]
	        break;
 800253a:	e019      	b.n	8002570 <UART_SetConfig+0x49c>
	    case UART_CLOCKSOURCE_PCLK2:
	        pclk = RCC_GetPCLK_Freq((RCC->CFGR & RCC_CFGR_PPRE2), RCC_CFGR_PPRE2_Pos);
 800253c:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <UART_SetConfig+0x4f0>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002544:	210d      	movs	r1, #13
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff f9a6 	bl	8001898 <RCC_GetPCLK_Freq>
 800254c:	61b8      	str	r0, [r7, #24]
	        break;
 800254e:	e00f      	b.n	8002570 <UART_SetConfig+0x49c>
	    case UART_CLOCKSOURCE_HSI:
	        pclk = (uint32_t) HSI_VALUE;
 8002550:	4b1d      	ldr	r3, [pc, #116]	@ (80025c8 <UART_SetConfig+0x4f4>)
 8002552:	61bb      	str	r3, [r7, #24]
	        break;
 8002554:	e00c      	b.n	8002570 <UART_SetConfig+0x49c>
	    case UART_CLOCKSOURCE_SYSCLK:
	        pclk = Get_SysClock_Freq();
 8002556:	f7ff f8b1 	bl	80016bc <Get_SysClock_Freq>
 800255a:	61b8      	str	r0, [r7, #24]
	        break;
 800255c:	e008      	b.n	8002570 <UART_SetConfig+0x49c>
	    case UART_CLOCKSOURCE_LSE:
	        pclk = (uint32_t) LSE_VALUE;
 800255e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002562:	61bb      	str	r3, [r7, #24]
	        break;
 8002564:	e004      	b.n	8002570 <UART_SetConfig+0x49c>
	    default:
	        pclk = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
	        ret = STATE_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	77bb      	strb	r3, [r7, #30]
	        break;
 800256e:	bf00      	nop
	    }

	    if (pclk != 0U)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d018      	beq.n	80025a8 <UART_SetConfig+0x4d4>
	    {
	      /* USARTDIV must be greater than or equal to 0d16 */
	    	usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->INIT.BAUD));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	085a      	lsrs	r2, r3, #1
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	441a      	add	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	613b      	str	r3, [r7, #16]
	    	if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	2b0f      	cmp	r3, #15
 800258e:	d909      	bls.n	80025a4 <UART_SetConfig+0x4d0>
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002596:	d205      	bcs.n	80025a4 <UART_SetConfig+0x4d0>
	    	{
	    		huart->INSTANCE->BRR = (uint16_t)usartdiv;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	b29a      	uxth	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	e001      	b.n	80025a8 <UART_SetConfig+0x4d4>
	    	}
	    	else
	    	{
	    		ret = STATE_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	77bb      	strb	r3, [r7, #30]
	    	}
	    }
	}

	huart->TX_ISR = NULL;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	669a      	str	r2, [r3, #104]	@ 0x68
	huart->RX_ISR = NULL;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	66da      	str	r2, [r3, #108]	@ 0x6c

	return ret;
 80025b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40007c00 	.word	0x40007c00
 80025c4:	40023800 	.word	0x40023800
 80025c8:	00f42400 	.word	0x00f42400

080025cc <UART_CheckIdleState>:

Error_HandleTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	@ 0x30
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	6078      	str	r0, [r7, #4]
	uint32_t TickStart;

	huart->ERR_CODE = 0x00U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	67da      	str	r2, [r3, #124]	@ 0x7c
	TickStart = uwTick;
 80025da:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <UART_CheckIdleState+0xac>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24

	if ((huart->INSTANCE->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d12e      	bne.n	800264c <UART_CheckIdleState+0x80>
	{
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, TickStart, UART_TIMEOUT_VALUE) != STATE_OK)
 80025ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	2200      	movs	r2, #0
 80025f8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f88f 	bl	8002720 <UART_WaitOnFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d021      	beq.n	800264c <UART_CheckIdleState+0x80>
		{
			ATOMIC_CLEAR_BIT(huart->INSTANCE->CR1, USART_CR1_TXEIE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	e853 3f00 	ldrex	r3, [r3]
 8002614:	60fb      	str	r3, [r7, #12]
   return(result);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800261c:	623b      	str	r3, [r7, #32]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	e841 2300 	strex	r3, r2, [r1]
 8002632:	617b      	str	r3, [r7, #20]
   return(result);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1e6      	bne.n	8002608 <UART_CheckIdleState+0x3c>

			huart->gSTATE = 0x20U;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	675a      	str	r2, [r3, #116]	@ 0x74

			do
			{
				huart->LOCK = UNLOCKED;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			}
			while(0);

			return STATE_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e010      	b.n	800266e <UART_CheckIdleState+0xa2>
		}
	}

	huart->gSTATE = 0x20U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	675a      	str	r2, [r3, #116]	@ 0x74
	huart->RX_STATE = 0x20;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2220      	movs	r2, #32
 8002656:	679a      	str	r2, [r3, #120]	@ 0x78
	huart->RECEPT_TYP = 0x00U;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	661a      	str	r2, [r3, #96]	@ 0x60
	huart->RX_EVT_TYP = 0x00U;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	665a      	str	r2, [r3, #100]	@ 0x64

	do
	{
		huart->LOCK = UNLOCKED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	}
	while(0);

	return STATE_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3728      	adds	r7, #40	@ 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000284 	.word	0x20000284

0800267c <UART_Pin_Config>:

void UART_Pin_Config(UART_HandleTypeDef *huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b0a8      	sub	sp, #160	@ 0xa0
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	GPIO_ConfigTypeDef gpio_config = {0};
 8002684:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
	RCC_Periph_CLK_ConfigTypedef periph_clk_config = {0};
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	2280      	movs	r2, #128	@ 0x80
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f001 f894 	bl	80037ca <memset>

	if(huart->INSTANCE == USART1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002714 <UART_Pin_Config+0x98>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d12f      	bne.n	800270c <UART_Pin_Config+0x90>
	{
		periph_clk_config.PeriphClockSelection = (uint32_t)0x40U;
 80026ac:	2340      	movs	r3, #64	@ 0x40
 80026ae:	60fb      	str	r3, [r7, #12]
		periph_clk_config.Usart1ClockSelection = (uint32_t)0x00U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	64bb      	str	r3, [r7, #72]	@ 0x48

		if(PeriphCLKConfig(&periph_clk_config) != STATE_OK)
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff f905 	bl	80018c8 <PeriphCLKConfig>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <UART_Pin_Config+0x4c>
		{
			Error_Handler();
 80026c4:	f000 faf6 	bl	8002cb4 <Error_Handler>
		}

		do
		{
			SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN);
 80026c8:	4b13      	ldr	r3, [pc, #76]	@ (8002718 <UART_Pin_Config+0x9c>)
 80026ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026cc:	4a12      	ldr	r2, [pc, #72]	@ (8002718 <UART_Pin_Config+0x9c>)
 80026ce:	f043 0310 	orr.w	r3, r3, #16
 80026d2:	6453      	str	r3, [r2, #68]	@ 0x44
		}
		while(0);

		RCC_GPIOCLK_ENABLE(RCC_AHB1ENR_GPIOAEN);
 80026d4:	4b10      	ldr	r3, [pc, #64]	@ (8002718 <UART_Pin_Config+0x9c>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002718 <UART_Pin_Config+0x9c>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6313      	str	r3, [r2, #48]	@ 0x30

		gpio_config.PIN = ((1 << 9) | (1 << 10));
 80026e0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		gpio_config.MODE = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		gpio_config.PULL = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		gpio_config.SPEED = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f4:	2303      	movs	r3, #3
 80026f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		gpio_config.ALT = (uint8_t)0x07U;
 80026fa:	2307      	movs	r3, #7
 80026fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

		GPIO_Config(GPIOA, &gpio_config);
 8002700:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002704:	4619      	mov	r1, r3
 8002706:	4805      	ldr	r0, [pc, #20]	@ (800271c <UART_Pin_Config+0xa0>)
 8002708:	f7ff f9a6 	bl	8001a58 <GPIO_Config>
	}
}
 800270c:	bf00      	nop
 800270e:	37a0      	adds	r7, #160	@ 0xa0
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40011000 	.word	0x40011000
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000

08002720 <UART_WaitOnFlagUntilTimeout>:

Error_HandleTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	71fb      	strb	r3, [r7, #7]
	while(((huart->INSTANCE->ISR & Flag) == Flag) == RESET)
 8002730:	e04c      	b.n	80027cc <UART_WaitOnFlagUntilTimeout+0xac>
	{
		if(Timeout != MS_MAX_DELAY)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d048      	beq.n	80027cc <UART_WaitOnFlagUntilTimeout+0xac>
		{
			if((uwTick - Tickstart) > Timeout || Timeout == 0U)
 800273a:	4b2b      	ldr	r3, [pc, #172]	@ (80027e8 <UART_WaitOnFlagUntilTimeout+0xc8>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	429a      	cmp	r2, r3
 8002746:	d302      	bcc.n	800274e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <UART_WaitOnFlagUntilTimeout+0x32>
			{
				return STATE_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e045      	b.n	80027de <UART_WaitOnFlagUntilTimeout+0xbe>
			}
			if((READ_BIT(huart->INSTANCE->CR1, USART_CR1_RE) != 0U) && (Flag != USART_ISR_TXE) && (Flag != USART_ISR_TC))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d035      	beq.n	80027cc <UART_WaitOnFlagUntilTimeout+0xac>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b80      	cmp	r3, #128	@ 0x80
 8002764:	d032      	beq.n	80027cc <UART_WaitOnFlagUntilTimeout+0xac>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b40      	cmp	r3, #64	@ 0x40
 800276a:	d02f      	beq.n	80027cc <UART_WaitOnFlagUntilTimeout+0xac>
			{
				if(((huart->INSTANCE->ISR & USART_ISR_ORE) == USART_ISR_ORE) == SET)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b08      	cmp	r3, #8
 8002778:	d10f      	bne.n	800279a <UART_WaitOnFlagUntilTimeout+0x7a>
				{
					(huart->INSTANCE->ICR) = USART_ICR_ORECF;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2208      	movs	r2, #8
 8002780:	621a      	str	r2, [r3, #32]

					UART_EndRxTransfer(huart);
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f832 	bl	80027ec <UART_EndRxTransfer>

					huart->ERR_CODE = 0x08U;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2208      	movs	r2, #8
 800278c:	67da      	str	r2, [r3, #124]	@ 0x7c

					do
					{
						huart->LOCK = UNLOCKED;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					}
					while(0);

					return STATE_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e021      	b.n	80027de <UART_WaitOnFlagUntilTimeout+0xbe>
				}
				if(((huart->INSTANCE->ISR & USART_ISR_RTOF) == USART_ISR_RTOF) == SET)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027a8:	d110      	bne.n	80027cc <UART_WaitOnFlagUntilTimeout+0xac>
				{
					(huart->INSTANCE->ICR) = USART_ICR_RTOCF;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027b2:	621a      	str	r2, [r3, #32]

					UART_EndRxTransfer(huart);
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f819 	bl	80027ec <UART_EndRxTransfer>

					huart->ERR_CODE = 0x20U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	67da      	str	r2, [r3, #124]	@ 0x7c

					do
					{
						huart->LOCK = UNLOCKED;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					}
					while(0);

					return STATE_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e008      	b.n	80027de <UART_WaitOnFlagUntilTimeout+0xbe>
	while(((huart->INSTANCE->ISR & Flag) == Flag) == RESET)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	4013      	ands	r3, r2
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1aa      	bne.n	8002732 <UART_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return STATE_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000284 	.word	0x20000284

080027ec <UART_EndRxTransfer>:

static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b095      	sub	sp, #84	@ 0x54
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	ATOMIC_CLEAR_BIT(huart->INSTANCE->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027fc:	e853 3f00 	ldrex	r3, [r3]
 8002800:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002808:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002812:	643b      	str	r3, [r7, #64]	@ 0x40
 8002814:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002818:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800281a:	e841 2300 	strex	r3, r2, [r1]
 800281e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1e6      	bne.n	80027f4 <UART_EndRxTransfer+0x8>
	ATOMIC_CLEAR_BIT(huart->INSTANCE->CR3, USART_CR3_EIE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3308      	adds	r3, #8
 800282c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	e853 3f00 	ldrex	r3, [r3]
 8002834:	61fb      	str	r3, [r7, #28]
   return(result);
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3308      	adds	r3, #8
 8002844:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002846:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002848:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800284c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800284e:	e841 2300 	strex	r3, r2, [r1]
 8002852:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1e5      	bne.n	8002826 <UART_EndRxTransfer+0x3a>

	if(huart->RECEPT_TYP == 0x01U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800285e:	2b01      	cmp	r3, #1
 8002860:	d118      	bne.n	8002894 <UART_EndRxTransfer+0xa8>
	{
		ATOMIC_CLEAR_BIT(huart->INSTANCE->CR1, USART_CR1_IDLEIE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	e853 3f00 	ldrex	r3, [r3]
 800286e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f023 0310 	bic.w	r3, r3, #16
 8002876:	647b      	str	r3, [r7, #68]	@ 0x44
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002884:	6979      	ldr	r1, [r7, #20]
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	e841 2300 	strex	r3, r2, [r1]
 800288c:	613b      	str	r3, [r7, #16]
   return(result);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1e6      	bne.n	8002862 <UART_EndRxTransfer+0x76>
	}

	huart->RX_STATE = 0x20U;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	679a      	str	r2, [r3, #120]	@ 0x78
	huart->RECEPT_TYP = 0x00U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	661a      	str	r2, [r3, #96]	@ 0x60

	huart->RX_ISR = NULL;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80028a6:	bf00      	nop
 80028a8:	3754      	adds	r7, #84	@ 0x54
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <UART_Transmit>:

Error_HandleTypeDef UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	@ 0x28
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	80fb      	strh	r3, [r7, #6]
	const uint8_t  *pdata8bits;
	const uint16_t *pdata16bits;
	uint32_t TickStart;

	if (huart->gSTATE == 0x20U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d16d      	bne.n	80029a8 <UART_Transmit+0xf4>
	{
		if(pData == NULL || Size == 0U)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <UART_Transmit+0x24>
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <UART_Transmit+0x28>
		{
			return STATE_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e066      	b.n	80029aa <UART_Transmit+0xf6>
		}

		huart->ERR_CODE = 0x00U;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	67da      	str	r2, [r3, #124]	@ 0x7c
		huart->gSTATE = 0x21U;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2221      	movs	r2, #33	@ 0x21
 80028e6:	675a      	str	r2, [r3, #116]	@ 0x74

		TickStart = uwTick;
 80028e8:	4b32      	ldr	r3, [pc, #200]	@ (80029b4 <UART_Transmit+0x100>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	617b      	str	r3, [r7, #20]

	    huart->TX_XFER_SIZE  = Size;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	88fa      	ldrh	r2, [r7, #6]
 80028f2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	    huart->TX_XFER_COUNT = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

	    if((huart->INIT.WORD_LEN == USART_CR1_M0) && (huart->INIT.PARITY == 0x00))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002906:	d108      	bne.n	800291a <UART_Transmit+0x66>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d104      	bne.n	800291a <UART_Transmit+0x66>
	    {
	        pdata8bits = NULL;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
	        pdata16bits = (const uint16_t *) pData;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	e003      	b.n	8002922 <UART_Transmit+0x6e>
	    }
	    else
	    {
	    	pdata8bits = (const uint8_t *) pData;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	61fb      	str	r3, [r7, #28]
	    	pdata16bits = NULL;
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
	    }

	    while(huart->TX_XFER_COUNT > 0U)
 8002922:	e036      	b.n	8002992 <UART_Transmit+0xde>
	    {
	    	if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TXE, RESET, TickStart, Timeout) != STATE_OK)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2200      	movs	r2, #0
 800292c:	2180      	movs	r1, #128	@ 0x80
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7ff fef6 	bl	8002720 <UART_WaitOnFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <UART_Transmit+0x90>
	    	{
	    		huart->gSTATE = 0x20U;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	675a      	str	r2, [r3, #116]	@ 0x74

	    		return STATE_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e032      	b.n	80029aa <UART_Transmit+0xf6>
	    	}

	        if (pdata8bits == NULL)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10b      	bne.n	8002962 <UART_Transmit+0xae>
	        {
	        	huart->INSTANCE->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002958:	629a      	str	r2, [r3, #40]	@ 0x28
	        	pdata16bits++;
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	3302      	adds	r3, #2
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	e007      	b.n	8002972 <UART_Transmit+0xbe>
	        }
	        else
	        {
	        	huart->INSTANCE->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	781a      	ldrb	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	629a      	str	r2, [r3, #40]	@ 0x28
	        	pdata8bits++;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	3301      	adds	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
	        }
	        if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TC, RESET, TickStart, Timeout) != STATE_OK)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2200      	movs	r2, #0
 800297a:	2140      	movs	r1, #64	@ 0x40
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fecf 	bl	8002720 <UART_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <UART_Transmit+0xde>
	        {
	        	huart->gSTATE = 0x20U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	675a      	str	r2, [r3, #116]	@ 0x74

	        	return STATE_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e00b      	b.n	80029aa <UART_Transmit+0xf6>
	    while(huart->TX_XFER_COUNT > 0U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1c2      	bne.n	8002924 <UART_Transmit+0x70>
	        }
	    }

	    huart->gSTATE = 0x20U;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	675a      	str	r2, [r3, #116]	@ 0x74

	    return STATE_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e000      	b.n	80029aa <UART_Transmit+0xf6>
	}
	else
	{
		return STATE_BUSY;
 80029a8:	2302      	movs	r3, #2
	}
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000284 	.word	0x20000284

080029b8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
	System_Config();
 80029bc:	f7ff fae4 	bl	8001f88 <System_Config>

	System_Clock_Config();
 80029c0:	f000 f828 	bl	8002a14 <System_Clock_Config>

	GPIO_Init();
 80029c4:	f000 f904 	bl	8002bd0 <GPIO_Init>
	UART_Init();
 80029c8:	f000 f944 	bl	8002c54 <UART_Init>

	Delay_Ms(100);
 80029cc:	2064      	movs	r0, #100	@ 0x64
 80029ce:	f7fe ff41 	bl	8001854 <Delay_Ms>
	UART_Transmit(&huart1, (uint8_t*)text, (sizeof(text) / sizeof(text[0])), 100);
 80029d2:	2364      	movs	r3, #100	@ 0x64
 80029d4:	2214      	movs	r2, #20
 80029d6:	490c      	ldr	r1, [pc, #48]	@ (8002a08 <main+0x50>)
 80029d8:	480c      	ldr	r0, [pc, #48]	@ (8002a0c <main+0x54>)
 80029da:	f7ff ff6b 	bl	80028b4 <UART_Transmit>

	while(1)
	{
		GPIO_Write(GPIOA, (1<<0), GPIO_SET);
 80029de:	2201      	movs	r2, #1
 80029e0:	2101      	movs	r1, #1
 80029e2:	480b      	ldr	r0, [pc, #44]	@ (8002a10 <main+0x58>)
 80029e4:	f7ff f9ce 	bl	8001d84 <GPIO_Write>
		Delay_Ms(500);
 80029e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029ec:	f7fe ff32 	bl	8001854 <Delay_Ms>
		GPIO_Write(GPIOA, (1<<0), GPIO_RESET);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2101      	movs	r1, #1
 80029f4:	4806      	ldr	r0, [pc, #24]	@ (8002a10 <main+0x58>)
 80029f6:	f7ff f9c5 	bl	8001d84 <GPIO_Write>
		Delay_Ms(500);
 80029fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029fe:	f7fe ff29 	bl	8001854 <Delay_Ms>
		GPIO_Write(GPIOA, (1<<0), GPIO_SET);
 8002a02:	bf00      	nop
 8002a04:	e7eb      	b.n	80029de <main+0x26>
 8002a06:	bf00      	nop
 8002a08:	20000008 	.word	0x20000008
 8002a0c:	20000204 	.word	0x20000204
 8002a10:	40020000 	.word	0x40020000

08002a14 <System_Clock_Config>:
	}
}

void System_Clock_Config(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b096      	sub	sp, #88	@ 0x58
 8002a18:	af00      	add	r7, sp, #0
	OSC_ConfigSetTypeDef config = {0};
 8002a1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a1e:	222c      	movs	r2, #44	@ 0x2c
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fed1 	bl	80037ca <memset>
	Clock_ConfigTypeDef clock_config = {0};
 8002a28:	f107 0310 	add.w	r3, r7, #16
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
 8002a38:	615a      	str	r2, [r3, #20]
	uint32_t TickStart;

	do
	{
		__IO uint32_t tmpreg;
		SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8002a3a:	4b61      	ldr	r3, [pc, #388]	@ (8002bc0 <System_Clock_Config+0x1ac>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	4a60      	ldr	r2, [pc, #384]	@ (8002bc0 <System_Clock_Config+0x1ac>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a44:	6413      	str	r3, [r2, #64]	@ 0x40
		tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN);
 8002a46:	4b5e      	ldr	r3, [pc, #376]	@ (8002bc0 <System_Clock_Config+0x1ac>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a4e:	60fb      	str	r3, [r7, #12]
		UNUSED(tmpreg);
 8002a50:	68fb      	ldr	r3, [r7, #12]
	}while(0);

	do
	{
		__IO uint32_t tmpreg;
		CLEAR_BIT(PWR->CR1, PWR_CR1_VOS);
 8002a52:	4b5c      	ldr	r3, [pc, #368]	@ (8002bc4 <System_Clock_Config+0x1b0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a5b      	ldr	r2, [pc, #364]	@ (8002bc4 <System_Clock_Config+0x1b0>)
 8002a58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a5c:	6013      	str	r3, [r2, #0]
		SET_BIT(PWR->CR1, PWR_CR1_VOS);
 8002a5e:	4b59      	ldr	r3, [pc, #356]	@ (8002bc4 <System_Clock_Config+0x1b0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a58      	ldr	r2, [pc, #352]	@ (8002bc4 <System_Clock_Config+0x1b0>)
 8002a64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a68:	6013      	str	r3, [r2, #0]
        tmpreg = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002a6a:	4b56      	ldr	r3, [pc, #344]	@ (8002bc4 <System_Clock_Config+0x1b0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a72:	60bb      	str	r3, [r7, #8]
        UNUSED(tmpreg);
 8002a74:	68bb      	ldr	r3, [r7, #8]
	}while(0);

	config.OSC_TYPE = OSC_TYPE_HSE;
 8002a76:	2301      	movs	r3, #1
 8002a78:	62bb      	str	r3, [r7, #40]	@ 0x28
	config.HSE_SET.HSE_STATE = HSE_ON;
 8002a7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
	config.HSI_SET.HSI_STATE = HSI_OFF;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	config.PLL_SET.PLL_STATE = PLL_ON;
 8002a86:	2302      	movs	r3, #2
 8002a88:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	config.PLL_SET.PLLSRC = PLLSRC_HSE;
 8002a8c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a90:	633b      	str	r3, [r7, #48]	@ 0x30
	config.PLL_SET.PLLM = 12;
 8002a92:	230c      	movs	r3, #12
 8002a94:	637b      	str	r3, [r7, #52]	@ 0x34
	config.PLL_SET.PLLN = 216;
 8002a96:	23d8      	movs	r3, #216	@ 0xd8
 8002a98:	63bb      	str	r3, [r7, #56]	@ 0x38
	config.PLL_SET.PLLP = (uint32_t)0x02U;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	config.PLL_SET.PLLQ = 9;
 8002a9e:	2309      	movs	r3, #9
 8002aa0:	643b      	str	r3, [r7, #64]	@ 0x40
	if(Clock_Setup_OSC(&config) != STATE_OK)
 8002aa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe faf6 	bl	8001098 <Clock_Setup_OSC>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <System_Clock_Config+0xa2>
	{
		Error_Handler();
 8002ab2:	f000 f8ff 	bl	8002cb4 <Error_Handler>
	}

	do
	{
		__IO uint32_t tmpreg;
		SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8002ab6:	4b42      	ldr	r3, [pc, #264]	@ (8002bc0 <System_Clock_Config+0x1ac>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	4a41      	ldr	r2, [pc, #260]	@ (8002bc0 <System_Clock_Config+0x1ac>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	@ 0x40
		tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN);
 8002ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8002bc0 <System_Clock_Config+0x1ac>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aca:	607b      	str	r3, [r7, #4]
		UNUSED(tmpreg);
 8002acc:	687b      	ldr	r3, [r7, #4]
	}while(0);

	PWR->CR1 |= (uint32_t)PWR_CR1_ODEN;
 8002ace:	4b3d      	ldr	r3, [pc, #244]	@ (8002bc4 <System_Clock_Config+0x1b0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a3c      	ldr	r2, [pc, #240]	@ (8002bc4 <System_Clock_Config+0x1b0>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]

	TickStart = uwTick;
 8002ada:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc8 <System_Clock_Config+0x1b4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	657b      	str	r3, [r7, #84]	@ 0x54
	while(!((PWR->CSR1 & PWR_CSR1_ODRDY) == PWR_CSR1_ODRDY))
 8002ae0:	e008      	b.n	8002af4 <System_Clock_Config+0xe0>
	{
		if((uwTick - TickStart) > 1000)
 8002ae2:	4b39      	ldr	r3, [pc, #228]	@ (8002bc8 <System_Clock_Config+0x1b4>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002aee:	d901      	bls.n	8002af4 <System_Clock_Config+0xe0>
		{
			Error_Handler();
 8002af0:	f000 f8e0 	bl	8002cb4 <Error_Handler>
	while(!((PWR->CSR1 & PWR_CSR1_ODRDY) == PWR_CSR1_ODRDY))
 8002af4:	4b33      	ldr	r3, [pc, #204]	@ (8002bc4 <System_Clock_Config+0x1b0>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b00:	d1ef      	bne.n	8002ae2 <System_Clock_Config+0xce>
		}
	}

	PWR->CR1 |= (uint32_t)PWR_CR1_ODSWEN;
 8002b02:	4b30      	ldr	r3, [pc, #192]	@ (8002bc4 <System_Clock_Config+0x1b0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2f      	ldr	r2, [pc, #188]	@ (8002bc4 <System_Clock_Config+0x1b0>)
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b0c:	6013      	str	r3, [r2, #0]

	TickStart = uwTick;
 8002b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc8 <System_Clock_Config+0x1b4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	657b      	str	r3, [r7, #84]	@ 0x54
	while(!((PWR->CSR1 & PWR_CSR1_ODSWRDY) == PWR_CSR1_ODSWRDY))
 8002b14:	e008      	b.n	8002b28 <System_Clock_Config+0x114>
	{
		if((uwTick - TickStart) > 1000)
 8002b16:	4b2c      	ldr	r3, [pc, #176]	@ (8002bc8 <System_Clock_Config+0x1b4>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b22:	d901      	bls.n	8002b28 <System_Clock_Config+0x114>
		{
			Error_Handler();
 8002b24:	f000 f8c6 	bl	8002cb4 <Error_Handler>
	while(!((PWR->CSR1 & PWR_CSR1_ODSWRDY) == PWR_CSR1_ODSWRDY))
 8002b28:	4b26      	ldr	r3, [pc, #152]	@ (8002bc4 <System_Clock_Config+0x1b0>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b34:	d1ef      	bne.n	8002b16 <System_Clock_Config+0x102>
		}
	}

	clock_config.CLOCK_TYPE = RCC_CLK_TYPE_SYSCLK | RCC_CLK_TYPE_HCLK | RCC_CLK_TYPE_PCLK1 | RCC_CLK_TYPE_PCLK2;
 8002b36:	230f      	movs	r3, #15
 8002b38:	613b      	str	r3, [r7, #16]
	clock_config.SYSCLK_SOURCE = RCC_SYSCLKSOURCE_PLLCLK;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	617b      	str	r3, [r7, #20]
	clock_config.AHBCLK_DIV = RCC_SYSCLK_DIV1;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
	clock_config.APB1CLK_DIV = RCC_HCLK_DIV4;
 8002b42:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b46:	61fb      	str	r3, [r7, #28]
	clock_config.APB2CLK_DIV = RCC_HCLK_DIV2;
 8002b48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b4c:	623b      	str	r3, [r7, #32]
	clock_config.FLatency = FLASH_ACR_LATENCY_7WS;
 8002b4e:	2307      	movs	r3, #7
 8002b50:	627b      	str	r3, [r7, #36]	@ 0x24
	if(Clock_Setup_Clock(&clock_config) != STATE_OK)
 8002b52:	f107 0310 	add.w	r3, r7, #16
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fc56 	bl	8001408 <Clock_Setup_Clock>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <System_Clock_Config+0x152>
	{
		Error_Handler();
 8002b62:	f000 f8a7 	bl	8002cb4 <Error_Handler>
	}

	MCO_Config(RCC_MCO1, RCC_CFGR_MCO1_1, (uint32_t)0x00);
 8002b66:	2200      	movs	r2, #0
 8002b68:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fe fd4d 	bl	800160c <MCO_Config>


	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8002b72:	4b13      	ldr	r3, [pc, #76]	@ (8002bc0 <System_Clock_Config+0x1ac>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	4a12      	ldr	r2, [pc, #72]	@ (8002bc0 <System_Clock_Config+0x1ac>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER &= ~((3U << (13 * 2)) | (3U << (14 * 2)));
 8002b7e:	4b13      	ldr	r3, [pc, #76]	@ (8002bcc <System_Clock_Config+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a12      	ldr	r2, [pc, #72]	@ (8002bcc <System_Clock_Config+0x1b8>)
 8002b84:	f023 5370 	bic.w	r3, r3, #1006632960	@ 0x3c000000
 8002b88:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ((2U << (13 * 2)) | (2U << (14 * 2)));
 8002b8a:	4b10      	ldr	r3, [pc, #64]	@ (8002bcc <System_Clock_Config+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002bcc <System_Clock_Config+0x1b8>)
 8002b90:	f043 5320 	orr.w	r3, r3, #671088640	@ 0x28000000
 8002b94:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[1] &= ~((15U << ((13 - 8) * 4)) | (15U << ((14 - 8) * 4)));
 8002b96:	4b0d      	ldr	r3, [pc, #52]	@ (8002bcc <System_Clock_Config+0x1b8>)
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002bcc <System_Clock_Config+0x1b8>)
 8002b9c:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 8002ba0:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= ((0U << ((13 - 8) * 4)) | (0U << ((14 - 8) * 4)));
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <System_Clock_Config+0x1b8>)
 8002ba4:	4a09      	ldr	r2, [pc, #36]	@ (8002bcc <System_Clock_Config+0x1b8>)
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	6253      	str	r3, [r2, #36]	@ 0x24

	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN);
 8002baa:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <System_Clock_Config+0x1ac>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bae:	4a04      	ldr	r2, [pc, #16]	@ (8002bc0 <System_Clock_Config+0x1ac>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8002bb6:	bf00      	nop
 8002bb8:	3758      	adds	r7, #88	@ 0x58
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40007000 	.word	0x40007000
 8002bc8:	20000284 	.word	0x20000284
 8002bcc:	40020000 	.word	0x40020000

08002bd0 <GPIO_Init>:

static void GPIO_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
	GPIO_ConfigTypeDef config = {0};
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]

	RCC_GPIOCLK_ENABLE(RCC_AHB1ENR_GPIOAEN);
 8002be4:	4b19      	ldr	r3, [pc, #100]	@ (8002c4c <GPIO_Init+0x7c>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	4a18      	ldr	r2, [pc, #96]	@ (8002c4c <GPIO_Init+0x7c>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC_GPIOCLK_ENABLE(RCC_AHB1ENR_GPIOBEN);
 8002bf0:	4b16      	ldr	r3, [pc, #88]	@ (8002c4c <GPIO_Init+0x7c>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf4:	4a15      	ldr	r2, [pc, #84]	@ (8002c4c <GPIO_Init+0x7c>)
 8002bf6:	f043 0302 	orr.w	r3, r3, #2
 8002bfa:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC_GPIOCLK_ENABLE(RCC_AHB1ENR_GPIOHEN);
 8002bfc:	4b13      	ldr	r3, [pc, #76]	@ (8002c4c <GPIO_Init+0x7c>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	4a12      	ldr	r2, [pc, #72]	@ (8002c4c <GPIO_Init+0x7c>)
 8002c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c06:	6313      	str	r3, [r2, #48]	@ 0x30

	config.PIN = (1 << 8);
 8002c08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c0c:	607b      	str	r3, [r7, #4]
	config.MODE = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	60bb      	str	r3, [r7, #8]
	config.PULL = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
	config.SPEED = GPIO_SPEED_FREQ_HIGH;
 8002c16:	2302      	movs	r3, #2
 8002c18:	613b      	str	r3, [r7, #16]
	config.ALT = (uint8_t)0x00;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]

	GPIO_Config(GPIOA, &config);
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	4619      	mov	r1, r3
 8002c22:	480b      	ldr	r0, [pc, #44]	@ (8002c50 <GPIO_Init+0x80>)
 8002c24:	f7fe ff18 	bl	8001a58 <GPIO_Config>


	config.PIN = (1 << 0);
 8002c28:	2301      	movs	r3, #1
 8002c2a:	607b      	str	r3, [r7, #4]
	config.MODE = GPIO_MODE_OUTPUT_PP;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	60bb      	str	r3, [r7, #8]
	config.PULL = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
	config.SPEED = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]

	GPIO_Config(GPIOA, &config);
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4804      	ldr	r0, [pc, #16]	@ (8002c50 <GPIO_Init+0x80>)
 8002c3e:	f7fe ff0b 	bl	8001a58 <GPIO_Config>
}
 8002c42:	bf00      	nop
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40020000 	.word	0x40020000

08002c54 <UART_Init>:

static void UART_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
	huart1.INSTANCE = USART1;
 8002c58:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <UART_Init+0x58>)
 8002c5a:	4a15      	ldr	r2, [pc, #84]	@ (8002cb0 <UART_Init+0x5c>)
 8002c5c:	601a      	str	r2, [r3, #0]
	huart1.INIT.BAUD = 115200;
 8002c5e:	4b13      	ldr	r3, [pc, #76]	@ (8002cac <UART_Init+0x58>)
 8002c60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c64:	605a      	str	r2, [r3, #4]
	huart1.INIT.WORD_LEN = 0x00U;
 8002c66:	4b11      	ldr	r3, [pc, #68]	@ (8002cac <UART_Init+0x58>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
	huart1.INIT.STOP_BIT = 0x00U;
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cac <UART_Init+0x58>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
	huart1.INIT.PARITY = 0x00U;
 8002c72:	4b0e      	ldr	r3, [pc, #56]	@ (8002cac <UART_Init+0x58>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
	huart1.INIT.MODE = (USART_CR1_TE | USART_CR1_RE);
 8002c78:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <UART_Init+0x58>)
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	615a      	str	r2, [r3, #20]
	huart1.INIT.FLOW_CTRL = 0x00U;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <UART_Init+0x58>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
	huart1.INIT.OVER_SAMPLE = 0x00U;
 8002c84:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <UART_Init+0x58>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
	huart1.INIT.ONEB_SAMPLE = 0x00U;
 8002c8a:	4b08      	ldr	r3, [pc, #32]	@ (8002cac <UART_Init+0x58>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	621a      	str	r2, [r3, #32]
	huart1.ADV_INIT.ADV_FEAT_INIT = 0x00U;
 8002c90:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <UART_Init+0x58>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	625a      	str	r2, [r3, #36]	@ 0x24
	if(UART_Config(&huart1) != STATE_OK)
 8002c96:	4805      	ldr	r0, [pc, #20]	@ (8002cac <UART_Init+0x58>)
 8002c98:	f7ff f9d4 	bl	8002044 <UART_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <UART_Init+0x52>
	{
		Error_Handler();
 8002ca2:	f000 f807 	bl	8002cb4 <Error_Handler>
	}
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000204 	.word	0x20000204
 8002cb0:	40011000 	.word	0x40011000

08002cb4 <Error_Handler>:

void Error_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb8:	b672      	cpsid	i
}
 8002cba:	bf00      	nop
	__disable_irq();
	while(1);
 8002cbc:	bf00      	nop
 8002cbe:	e7fd      	b.n	8002cbc <Error_Handler+0x8>

08002cc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cc0:	480d      	ldr	r0, [pc, #52]	@ (8002cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cc2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cc4:	f7fe f9d6 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cc8:	480c      	ldr	r0, [pc, #48]	@ (8002cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8002cca:	490d      	ldr	r1, [pc, #52]	@ (8002d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d04 <LoopForever+0xe>)
  movs r3, #0
 8002cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd0:	e002      	b.n	8002cd8 <LoopCopyDataInit>

08002cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cd6:	3304      	adds	r3, #4

08002cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cdc:	d3f9      	bcc.n	8002cd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cde:	4a0a      	ldr	r2, [pc, #40]	@ (8002d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8002d0c <LoopForever+0x16>)
  movs r3, #0
 8002ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ce4:	e001      	b.n	8002cea <LoopFillZerobss>

08002ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ce8:	3204      	adds	r2, #4

08002cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cec:	d3fb      	bcc.n	8002ce6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cee:	f000 fdc5 	bl	800387c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cf2:	f7ff fe61 	bl	80029b8 <main>

08002cf6 <LoopForever>:

LoopForever:
  b LoopForever
 8002cf6:	e7fe      	b.n	8002cf6 <LoopForever>
  ldr   r0, =_estack
 8002cf8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d00:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002d04:	080059c0 	.word	0x080059c0
  ldr r2, =_sbss
 8002d08:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002d0c:	200003d4 	.word	0x200003d4

08002d10 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d10:	e7fe      	b.n	8002d10 <ADC_IRQHandler>

08002d12 <__cvt>:
 8002d12:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d16:	ec57 6b10 	vmov	r6, r7, d0
 8002d1a:	2f00      	cmp	r7, #0
 8002d1c:	460c      	mov	r4, r1
 8002d1e:	4619      	mov	r1, r3
 8002d20:	463b      	mov	r3, r7
 8002d22:	bfbb      	ittet	lt
 8002d24:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002d28:	461f      	movlt	r7, r3
 8002d2a:	2300      	movge	r3, #0
 8002d2c:	232d      	movlt	r3, #45	@ 0x2d
 8002d2e:	700b      	strb	r3, [r1, #0]
 8002d30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002d32:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002d36:	4691      	mov	r9, r2
 8002d38:	f023 0820 	bic.w	r8, r3, #32
 8002d3c:	bfbc      	itt	lt
 8002d3e:	4632      	movlt	r2, r6
 8002d40:	4616      	movlt	r6, r2
 8002d42:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002d46:	d005      	beq.n	8002d54 <__cvt+0x42>
 8002d48:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002d4c:	d100      	bne.n	8002d50 <__cvt+0x3e>
 8002d4e:	3401      	adds	r4, #1
 8002d50:	2102      	movs	r1, #2
 8002d52:	e000      	b.n	8002d56 <__cvt+0x44>
 8002d54:	2103      	movs	r1, #3
 8002d56:	ab03      	add	r3, sp, #12
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	ab02      	add	r3, sp, #8
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	ec47 6b10 	vmov	d0, r6, r7
 8002d62:	4653      	mov	r3, sl
 8002d64:	4622      	mov	r2, r4
 8002d66:	f000 fe3b 	bl	80039e0 <_dtoa_r>
 8002d6a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002d6e:	4605      	mov	r5, r0
 8002d70:	d119      	bne.n	8002da6 <__cvt+0x94>
 8002d72:	f019 0f01 	tst.w	r9, #1
 8002d76:	d00e      	beq.n	8002d96 <__cvt+0x84>
 8002d78:	eb00 0904 	add.w	r9, r0, r4
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2300      	movs	r3, #0
 8002d80:	4630      	mov	r0, r6
 8002d82:	4639      	mov	r1, r7
 8002d84:	f7fd fec8 	bl	8000b18 <__aeabi_dcmpeq>
 8002d88:	b108      	cbz	r0, 8002d8e <__cvt+0x7c>
 8002d8a:	f8cd 900c 	str.w	r9, [sp, #12]
 8002d8e:	2230      	movs	r2, #48	@ 0x30
 8002d90:	9b03      	ldr	r3, [sp, #12]
 8002d92:	454b      	cmp	r3, r9
 8002d94:	d31e      	bcc.n	8002dd4 <__cvt+0xc2>
 8002d96:	9b03      	ldr	r3, [sp, #12]
 8002d98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002d9a:	1b5b      	subs	r3, r3, r5
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	b004      	add	sp, #16
 8002da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002da6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002daa:	eb00 0904 	add.w	r9, r0, r4
 8002dae:	d1e5      	bne.n	8002d7c <__cvt+0x6a>
 8002db0:	7803      	ldrb	r3, [r0, #0]
 8002db2:	2b30      	cmp	r3, #48	@ 0x30
 8002db4:	d10a      	bne.n	8002dcc <__cvt+0xba>
 8002db6:	2200      	movs	r2, #0
 8002db8:	2300      	movs	r3, #0
 8002dba:	4630      	mov	r0, r6
 8002dbc:	4639      	mov	r1, r7
 8002dbe:	f7fd feab 	bl	8000b18 <__aeabi_dcmpeq>
 8002dc2:	b918      	cbnz	r0, 8002dcc <__cvt+0xba>
 8002dc4:	f1c4 0401 	rsb	r4, r4, #1
 8002dc8:	f8ca 4000 	str.w	r4, [sl]
 8002dcc:	f8da 3000 	ldr.w	r3, [sl]
 8002dd0:	4499      	add	r9, r3
 8002dd2:	e7d3      	b.n	8002d7c <__cvt+0x6a>
 8002dd4:	1c59      	adds	r1, r3, #1
 8002dd6:	9103      	str	r1, [sp, #12]
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	e7d9      	b.n	8002d90 <__cvt+0x7e>

08002ddc <__exponent>:
 8002ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dde:	2900      	cmp	r1, #0
 8002de0:	bfba      	itte	lt
 8002de2:	4249      	neglt	r1, r1
 8002de4:	232d      	movlt	r3, #45	@ 0x2d
 8002de6:	232b      	movge	r3, #43	@ 0x2b
 8002de8:	2909      	cmp	r1, #9
 8002dea:	7002      	strb	r2, [r0, #0]
 8002dec:	7043      	strb	r3, [r0, #1]
 8002dee:	dd29      	ble.n	8002e44 <__exponent+0x68>
 8002df0:	f10d 0307 	add.w	r3, sp, #7
 8002df4:	461d      	mov	r5, r3
 8002df6:	270a      	movs	r7, #10
 8002df8:	461a      	mov	r2, r3
 8002dfa:	fbb1 f6f7 	udiv	r6, r1, r7
 8002dfe:	fb07 1416 	mls	r4, r7, r6, r1
 8002e02:	3430      	adds	r4, #48	@ 0x30
 8002e04:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002e08:	460c      	mov	r4, r1
 8002e0a:	2c63      	cmp	r4, #99	@ 0x63
 8002e0c:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e10:	4631      	mov	r1, r6
 8002e12:	dcf1      	bgt.n	8002df8 <__exponent+0x1c>
 8002e14:	3130      	adds	r1, #48	@ 0x30
 8002e16:	1e94      	subs	r4, r2, #2
 8002e18:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002e1c:	1c41      	adds	r1, r0, #1
 8002e1e:	4623      	mov	r3, r4
 8002e20:	42ab      	cmp	r3, r5
 8002e22:	d30a      	bcc.n	8002e3a <__exponent+0x5e>
 8002e24:	f10d 0309 	add.w	r3, sp, #9
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	42ac      	cmp	r4, r5
 8002e2c:	bf88      	it	hi
 8002e2e:	2300      	movhi	r3, #0
 8002e30:	3302      	adds	r3, #2
 8002e32:	4403      	add	r3, r0
 8002e34:	1a18      	subs	r0, r3, r0
 8002e36:	b003      	add	sp, #12
 8002e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e3a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002e3e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002e42:	e7ed      	b.n	8002e20 <__exponent+0x44>
 8002e44:	2330      	movs	r3, #48	@ 0x30
 8002e46:	3130      	adds	r1, #48	@ 0x30
 8002e48:	7083      	strb	r3, [r0, #2]
 8002e4a:	70c1      	strb	r1, [r0, #3]
 8002e4c:	1d03      	adds	r3, r0, #4
 8002e4e:	e7f1      	b.n	8002e34 <__exponent+0x58>

08002e50 <_printf_float>:
 8002e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e54:	b08d      	sub	sp, #52	@ 0x34
 8002e56:	460c      	mov	r4, r1
 8002e58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002e5c:	4616      	mov	r6, r2
 8002e5e:	461f      	mov	r7, r3
 8002e60:	4605      	mov	r5, r0
 8002e62:	f000 fcbb 	bl	80037dc <_localeconv_r>
 8002e66:	6803      	ldr	r3, [r0, #0]
 8002e68:	9304      	str	r3, [sp, #16]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fa28 	bl	80002c0 <strlen>
 8002e70:	2300      	movs	r3, #0
 8002e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8002e74:	f8d8 3000 	ldr.w	r3, [r8]
 8002e78:	9005      	str	r0, [sp, #20]
 8002e7a:	3307      	adds	r3, #7
 8002e7c:	f023 0307 	bic.w	r3, r3, #7
 8002e80:	f103 0208 	add.w	r2, r3, #8
 8002e84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002e88:	f8d4 b000 	ldr.w	fp, [r4]
 8002e8c:	f8c8 2000 	str.w	r2, [r8]
 8002e90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002e98:	9307      	str	r3, [sp, #28]
 8002e9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8002e9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002ea2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002ea6:	4b9c      	ldr	r3, [pc, #624]	@ (8003118 <_printf_float+0x2c8>)
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	f7fd fe66 	bl	8000b7c <__aeabi_dcmpun>
 8002eb0:	bb70      	cbnz	r0, 8002f10 <_printf_float+0xc0>
 8002eb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002eb6:	4b98      	ldr	r3, [pc, #608]	@ (8003118 <_printf_float+0x2c8>)
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	f7fd fe40 	bl	8000b40 <__aeabi_dcmple>
 8002ec0:	bb30      	cbnz	r0, 8002f10 <_printf_float+0xc0>
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	4640      	mov	r0, r8
 8002ec8:	4649      	mov	r1, r9
 8002eca:	f7fd fe2f 	bl	8000b2c <__aeabi_dcmplt>
 8002ece:	b110      	cbz	r0, 8002ed6 <_printf_float+0x86>
 8002ed0:	232d      	movs	r3, #45	@ 0x2d
 8002ed2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ed6:	4a91      	ldr	r2, [pc, #580]	@ (800311c <_printf_float+0x2cc>)
 8002ed8:	4b91      	ldr	r3, [pc, #580]	@ (8003120 <_printf_float+0x2d0>)
 8002eda:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002ede:	bf94      	ite	ls
 8002ee0:	4690      	movls	r8, r2
 8002ee2:	4698      	movhi	r8, r3
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	6123      	str	r3, [r4, #16]
 8002ee8:	f02b 0304 	bic.w	r3, fp, #4
 8002eec:	6023      	str	r3, [r4, #0]
 8002eee:	f04f 0900 	mov.w	r9, #0
 8002ef2:	9700      	str	r7, [sp, #0]
 8002ef4:	4633      	mov	r3, r6
 8002ef6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002ef8:	4621      	mov	r1, r4
 8002efa:	4628      	mov	r0, r5
 8002efc:	f000 f9d2 	bl	80032a4 <_printf_common>
 8002f00:	3001      	adds	r0, #1
 8002f02:	f040 808d 	bne.w	8003020 <_printf_float+0x1d0>
 8002f06:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0a:	b00d      	add	sp, #52	@ 0x34
 8002f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f10:	4642      	mov	r2, r8
 8002f12:	464b      	mov	r3, r9
 8002f14:	4640      	mov	r0, r8
 8002f16:	4649      	mov	r1, r9
 8002f18:	f7fd fe30 	bl	8000b7c <__aeabi_dcmpun>
 8002f1c:	b140      	cbz	r0, 8002f30 <_printf_float+0xe0>
 8002f1e:	464b      	mov	r3, r9
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bfbc      	itt	lt
 8002f24:	232d      	movlt	r3, #45	@ 0x2d
 8002f26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002f2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003124 <_printf_float+0x2d4>)
 8002f2c:	4b7e      	ldr	r3, [pc, #504]	@ (8003128 <_printf_float+0x2d8>)
 8002f2e:	e7d4      	b.n	8002eda <_printf_float+0x8a>
 8002f30:	6863      	ldr	r3, [r4, #4]
 8002f32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002f36:	9206      	str	r2, [sp, #24]
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	d13b      	bne.n	8002fb4 <_printf_float+0x164>
 8002f3c:	2306      	movs	r3, #6
 8002f3e:	6063      	str	r3, [r4, #4]
 8002f40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002f44:	2300      	movs	r3, #0
 8002f46:	6022      	str	r2, [r4, #0]
 8002f48:	9303      	str	r3, [sp, #12]
 8002f4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8002f4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002f50:	ab09      	add	r3, sp, #36	@ 0x24
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	6861      	ldr	r1, [r4, #4]
 8002f56:	ec49 8b10 	vmov	d0, r8, r9
 8002f5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002f5e:	4628      	mov	r0, r5
 8002f60:	f7ff fed7 	bl	8002d12 <__cvt>
 8002f64:	9b06      	ldr	r3, [sp, #24]
 8002f66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002f68:	2b47      	cmp	r3, #71	@ 0x47
 8002f6a:	4680      	mov	r8, r0
 8002f6c:	d129      	bne.n	8002fc2 <_printf_float+0x172>
 8002f6e:	1cc8      	adds	r0, r1, #3
 8002f70:	db02      	blt.n	8002f78 <_printf_float+0x128>
 8002f72:	6863      	ldr	r3, [r4, #4]
 8002f74:	4299      	cmp	r1, r3
 8002f76:	dd41      	ble.n	8002ffc <_printf_float+0x1ac>
 8002f78:	f1aa 0a02 	sub.w	sl, sl, #2
 8002f7c:	fa5f fa8a 	uxtb.w	sl, sl
 8002f80:	3901      	subs	r1, #1
 8002f82:	4652      	mov	r2, sl
 8002f84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002f88:	9109      	str	r1, [sp, #36]	@ 0x24
 8002f8a:	f7ff ff27 	bl	8002ddc <__exponent>
 8002f8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002f90:	1813      	adds	r3, r2, r0
 8002f92:	2a01      	cmp	r2, #1
 8002f94:	4681      	mov	r9, r0
 8002f96:	6123      	str	r3, [r4, #16]
 8002f98:	dc02      	bgt.n	8002fa0 <_printf_float+0x150>
 8002f9a:	6822      	ldr	r2, [r4, #0]
 8002f9c:	07d2      	lsls	r2, r2, #31
 8002f9e:	d501      	bpl.n	8002fa4 <_printf_float+0x154>
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	6123      	str	r3, [r4, #16]
 8002fa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0a2      	beq.n	8002ef2 <_printf_float+0xa2>
 8002fac:	232d      	movs	r3, #45	@ 0x2d
 8002fae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fb2:	e79e      	b.n	8002ef2 <_printf_float+0xa2>
 8002fb4:	9a06      	ldr	r2, [sp, #24]
 8002fb6:	2a47      	cmp	r2, #71	@ 0x47
 8002fb8:	d1c2      	bne.n	8002f40 <_printf_float+0xf0>
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1c0      	bne.n	8002f40 <_printf_float+0xf0>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e7bd      	b.n	8002f3e <_printf_float+0xee>
 8002fc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002fc6:	d9db      	bls.n	8002f80 <_printf_float+0x130>
 8002fc8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002fcc:	d118      	bne.n	8003000 <_printf_float+0x1b0>
 8002fce:	2900      	cmp	r1, #0
 8002fd0:	6863      	ldr	r3, [r4, #4]
 8002fd2:	dd0b      	ble.n	8002fec <_printf_float+0x19c>
 8002fd4:	6121      	str	r1, [r4, #16]
 8002fd6:	b913      	cbnz	r3, 8002fde <_printf_float+0x18e>
 8002fd8:	6822      	ldr	r2, [r4, #0]
 8002fda:	07d0      	lsls	r0, r2, #31
 8002fdc:	d502      	bpl.n	8002fe4 <_printf_float+0x194>
 8002fde:	3301      	adds	r3, #1
 8002fe0:	440b      	add	r3, r1
 8002fe2:	6123      	str	r3, [r4, #16]
 8002fe4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002fe6:	f04f 0900 	mov.w	r9, #0
 8002fea:	e7db      	b.n	8002fa4 <_printf_float+0x154>
 8002fec:	b913      	cbnz	r3, 8002ff4 <_printf_float+0x1a4>
 8002fee:	6822      	ldr	r2, [r4, #0]
 8002ff0:	07d2      	lsls	r2, r2, #31
 8002ff2:	d501      	bpl.n	8002ff8 <_printf_float+0x1a8>
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	e7f4      	b.n	8002fe2 <_printf_float+0x192>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e7f2      	b.n	8002fe2 <_printf_float+0x192>
 8002ffc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003002:	4299      	cmp	r1, r3
 8003004:	db05      	blt.n	8003012 <_printf_float+0x1c2>
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	6121      	str	r1, [r4, #16]
 800300a:	07d8      	lsls	r0, r3, #31
 800300c:	d5ea      	bpl.n	8002fe4 <_printf_float+0x194>
 800300e:	1c4b      	adds	r3, r1, #1
 8003010:	e7e7      	b.n	8002fe2 <_printf_float+0x192>
 8003012:	2900      	cmp	r1, #0
 8003014:	bfd4      	ite	le
 8003016:	f1c1 0202 	rsble	r2, r1, #2
 800301a:	2201      	movgt	r2, #1
 800301c:	4413      	add	r3, r2
 800301e:	e7e0      	b.n	8002fe2 <_printf_float+0x192>
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	055a      	lsls	r2, r3, #21
 8003024:	d407      	bmi.n	8003036 <_printf_float+0x1e6>
 8003026:	6923      	ldr	r3, [r4, #16]
 8003028:	4642      	mov	r2, r8
 800302a:	4631      	mov	r1, r6
 800302c:	4628      	mov	r0, r5
 800302e:	47b8      	blx	r7
 8003030:	3001      	adds	r0, #1
 8003032:	d12b      	bne.n	800308c <_printf_float+0x23c>
 8003034:	e767      	b.n	8002f06 <_printf_float+0xb6>
 8003036:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800303a:	f240 80dd 	bls.w	80031f8 <_printf_float+0x3a8>
 800303e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003042:	2200      	movs	r2, #0
 8003044:	2300      	movs	r3, #0
 8003046:	f7fd fd67 	bl	8000b18 <__aeabi_dcmpeq>
 800304a:	2800      	cmp	r0, #0
 800304c:	d033      	beq.n	80030b6 <_printf_float+0x266>
 800304e:	4a37      	ldr	r2, [pc, #220]	@ (800312c <_printf_float+0x2dc>)
 8003050:	2301      	movs	r3, #1
 8003052:	4631      	mov	r1, r6
 8003054:	4628      	mov	r0, r5
 8003056:	47b8      	blx	r7
 8003058:	3001      	adds	r0, #1
 800305a:	f43f af54 	beq.w	8002f06 <_printf_float+0xb6>
 800305e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003062:	4543      	cmp	r3, r8
 8003064:	db02      	blt.n	800306c <_printf_float+0x21c>
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	07d8      	lsls	r0, r3, #31
 800306a:	d50f      	bpl.n	800308c <_printf_float+0x23c>
 800306c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003070:	4631      	mov	r1, r6
 8003072:	4628      	mov	r0, r5
 8003074:	47b8      	blx	r7
 8003076:	3001      	adds	r0, #1
 8003078:	f43f af45 	beq.w	8002f06 <_printf_float+0xb6>
 800307c:	f04f 0900 	mov.w	r9, #0
 8003080:	f108 38ff 	add.w	r8, r8, #4294967295
 8003084:	f104 0a1a 	add.w	sl, r4, #26
 8003088:	45c8      	cmp	r8, r9
 800308a:	dc09      	bgt.n	80030a0 <_printf_float+0x250>
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	079b      	lsls	r3, r3, #30
 8003090:	f100 8103 	bmi.w	800329a <_printf_float+0x44a>
 8003094:	68e0      	ldr	r0, [r4, #12]
 8003096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003098:	4298      	cmp	r0, r3
 800309a:	bfb8      	it	lt
 800309c:	4618      	movlt	r0, r3
 800309e:	e734      	b.n	8002f0a <_printf_float+0xba>
 80030a0:	2301      	movs	r3, #1
 80030a2:	4652      	mov	r2, sl
 80030a4:	4631      	mov	r1, r6
 80030a6:	4628      	mov	r0, r5
 80030a8:	47b8      	blx	r7
 80030aa:	3001      	adds	r0, #1
 80030ac:	f43f af2b 	beq.w	8002f06 <_printf_float+0xb6>
 80030b0:	f109 0901 	add.w	r9, r9, #1
 80030b4:	e7e8      	b.n	8003088 <_printf_float+0x238>
 80030b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	dc39      	bgt.n	8003130 <_printf_float+0x2e0>
 80030bc:	4a1b      	ldr	r2, [pc, #108]	@ (800312c <_printf_float+0x2dc>)
 80030be:	2301      	movs	r3, #1
 80030c0:	4631      	mov	r1, r6
 80030c2:	4628      	mov	r0, r5
 80030c4:	47b8      	blx	r7
 80030c6:	3001      	adds	r0, #1
 80030c8:	f43f af1d 	beq.w	8002f06 <_printf_float+0xb6>
 80030cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80030d0:	ea59 0303 	orrs.w	r3, r9, r3
 80030d4:	d102      	bne.n	80030dc <_printf_float+0x28c>
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	07d9      	lsls	r1, r3, #31
 80030da:	d5d7      	bpl.n	800308c <_printf_float+0x23c>
 80030dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80030e0:	4631      	mov	r1, r6
 80030e2:	4628      	mov	r0, r5
 80030e4:	47b8      	blx	r7
 80030e6:	3001      	adds	r0, #1
 80030e8:	f43f af0d 	beq.w	8002f06 <_printf_float+0xb6>
 80030ec:	f04f 0a00 	mov.w	sl, #0
 80030f0:	f104 0b1a 	add.w	fp, r4, #26
 80030f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030f6:	425b      	negs	r3, r3
 80030f8:	4553      	cmp	r3, sl
 80030fa:	dc01      	bgt.n	8003100 <_printf_float+0x2b0>
 80030fc:	464b      	mov	r3, r9
 80030fe:	e793      	b.n	8003028 <_printf_float+0x1d8>
 8003100:	2301      	movs	r3, #1
 8003102:	465a      	mov	r2, fp
 8003104:	4631      	mov	r1, r6
 8003106:	4628      	mov	r0, r5
 8003108:	47b8      	blx	r7
 800310a:	3001      	adds	r0, #1
 800310c:	f43f aefb 	beq.w	8002f06 <_printf_float+0xb6>
 8003110:	f10a 0a01 	add.w	sl, sl, #1
 8003114:	e7ee      	b.n	80030f4 <_printf_float+0x2a4>
 8003116:	bf00      	nop
 8003118:	7fefffff 	.word	0x7fefffff
 800311c:	08005640 	.word	0x08005640
 8003120:	08005644 	.word	0x08005644
 8003124:	08005648 	.word	0x08005648
 8003128:	0800564c 	.word	0x0800564c
 800312c:	08005650 	.word	0x08005650
 8003130:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003132:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003136:	4553      	cmp	r3, sl
 8003138:	bfa8      	it	ge
 800313a:	4653      	movge	r3, sl
 800313c:	2b00      	cmp	r3, #0
 800313e:	4699      	mov	r9, r3
 8003140:	dc36      	bgt.n	80031b0 <_printf_float+0x360>
 8003142:	f04f 0b00 	mov.w	fp, #0
 8003146:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800314a:	f104 021a 	add.w	r2, r4, #26
 800314e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003150:	9306      	str	r3, [sp, #24]
 8003152:	eba3 0309 	sub.w	r3, r3, r9
 8003156:	455b      	cmp	r3, fp
 8003158:	dc31      	bgt.n	80031be <_printf_float+0x36e>
 800315a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800315c:	459a      	cmp	sl, r3
 800315e:	dc3a      	bgt.n	80031d6 <_printf_float+0x386>
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	07da      	lsls	r2, r3, #31
 8003164:	d437      	bmi.n	80031d6 <_printf_float+0x386>
 8003166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003168:	ebaa 0903 	sub.w	r9, sl, r3
 800316c:	9b06      	ldr	r3, [sp, #24]
 800316e:	ebaa 0303 	sub.w	r3, sl, r3
 8003172:	4599      	cmp	r9, r3
 8003174:	bfa8      	it	ge
 8003176:	4699      	movge	r9, r3
 8003178:	f1b9 0f00 	cmp.w	r9, #0
 800317c:	dc33      	bgt.n	80031e6 <_printf_float+0x396>
 800317e:	f04f 0800 	mov.w	r8, #0
 8003182:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003186:	f104 0b1a 	add.w	fp, r4, #26
 800318a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800318c:	ebaa 0303 	sub.w	r3, sl, r3
 8003190:	eba3 0309 	sub.w	r3, r3, r9
 8003194:	4543      	cmp	r3, r8
 8003196:	f77f af79 	ble.w	800308c <_printf_float+0x23c>
 800319a:	2301      	movs	r3, #1
 800319c:	465a      	mov	r2, fp
 800319e:	4631      	mov	r1, r6
 80031a0:	4628      	mov	r0, r5
 80031a2:	47b8      	blx	r7
 80031a4:	3001      	adds	r0, #1
 80031a6:	f43f aeae 	beq.w	8002f06 <_printf_float+0xb6>
 80031aa:	f108 0801 	add.w	r8, r8, #1
 80031ae:	e7ec      	b.n	800318a <_printf_float+0x33a>
 80031b0:	4642      	mov	r2, r8
 80031b2:	4631      	mov	r1, r6
 80031b4:	4628      	mov	r0, r5
 80031b6:	47b8      	blx	r7
 80031b8:	3001      	adds	r0, #1
 80031ba:	d1c2      	bne.n	8003142 <_printf_float+0x2f2>
 80031bc:	e6a3      	b.n	8002f06 <_printf_float+0xb6>
 80031be:	2301      	movs	r3, #1
 80031c0:	4631      	mov	r1, r6
 80031c2:	4628      	mov	r0, r5
 80031c4:	9206      	str	r2, [sp, #24]
 80031c6:	47b8      	blx	r7
 80031c8:	3001      	adds	r0, #1
 80031ca:	f43f ae9c 	beq.w	8002f06 <_printf_float+0xb6>
 80031ce:	9a06      	ldr	r2, [sp, #24]
 80031d0:	f10b 0b01 	add.w	fp, fp, #1
 80031d4:	e7bb      	b.n	800314e <_printf_float+0x2fe>
 80031d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031da:	4631      	mov	r1, r6
 80031dc:	4628      	mov	r0, r5
 80031de:	47b8      	blx	r7
 80031e0:	3001      	adds	r0, #1
 80031e2:	d1c0      	bne.n	8003166 <_printf_float+0x316>
 80031e4:	e68f      	b.n	8002f06 <_printf_float+0xb6>
 80031e6:	9a06      	ldr	r2, [sp, #24]
 80031e8:	464b      	mov	r3, r9
 80031ea:	4442      	add	r2, r8
 80031ec:	4631      	mov	r1, r6
 80031ee:	4628      	mov	r0, r5
 80031f0:	47b8      	blx	r7
 80031f2:	3001      	adds	r0, #1
 80031f4:	d1c3      	bne.n	800317e <_printf_float+0x32e>
 80031f6:	e686      	b.n	8002f06 <_printf_float+0xb6>
 80031f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80031fc:	f1ba 0f01 	cmp.w	sl, #1
 8003200:	dc01      	bgt.n	8003206 <_printf_float+0x3b6>
 8003202:	07db      	lsls	r3, r3, #31
 8003204:	d536      	bpl.n	8003274 <_printf_float+0x424>
 8003206:	2301      	movs	r3, #1
 8003208:	4642      	mov	r2, r8
 800320a:	4631      	mov	r1, r6
 800320c:	4628      	mov	r0, r5
 800320e:	47b8      	blx	r7
 8003210:	3001      	adds	r0, #1
 8003212:	f43f ae78 	beq.w	8002f06 <_printf_float+0xb6>
 8003216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800321a:	4631      	mov	r1, r6
 800321c:	4628      	mov	r0, r5
 800321e:	47b8      	blx	r7
 8003220:	3001      	adds	r0, #1
 8003222:	f43f ae70 	beq.w	8002f06 <_printf_float+0xb6>
 8003226:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800322a:	2200      	movs	r2, #0
 800322c:	2300      	movs	r3, #0
 800322e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003232:	f7fd fc71 	bl	8000b18 <__aeabi_dcmpeq>
 8003236:	b9c0      	cbnz	r0, 800326a <_printf_float+0x41a>
 8003238:	4653      	mov	r3, sl
 800323a:	f108 0201 	add.w	r2, r8, #1
 800323e:	4631      	mov	r1, r6
 8003240:	4628      	mov	r0, r5
 8003242:	47b8      	blx	r7
 8003244:	3001      	adds	r0, #1
 8003246:	d10c      	bne.n	8003262 <_printf_float+0x412>
 8003248:	e65d      	b.n	8002f06 <_printf_float+0xb6>
 800324a:	2301      	movs	r3, #1
 800324c:	465a      	mov	r2, fp
 800324e:	4631      	mov	r1, r6
 8003250:	4628      	mov	r0, r5
 8003252:	47b8      	blx	r7
 8003254:	3001      	adds	r0, #1
 8003256:	f43f ae56 	beq.w	8002f06 <_printf_float+0xb6>
 800325a:	f108 0801 	add.w	r8, r8, #1
 800325e:	45d0      	cmp	r8, sl
 8003260:	dbf3      	blt.n	800324a <_printf_float+0x3fa>
 8003262:	464b      	mov	r3, r9
 8003264:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003268:	e6df      	b.n	800302a <_printf_float+0x1da>
 800326a:	f04f 0800 	mov.w	r8, #0
 800326e:	f104 0b1a 	add.w	fp, r4, #26
 8003272:	e7f4      	b.n	800325e <_printf_float+0x40e>
 8003274:	2301      	movs	r3, #1
 8003276:	4642      	mov	r2, r8
 8003278:	e7e1      	b.n	800323e <_printf_float+0x3ee>
 800327a:	2301      	movs	r3, #1
 800327c:	464a      	mov	r2, r9
 800327e:	4631      	mov	r1, r6
 8003280:	4628      	mov	r0, r5
 8003282:	47b8      	blx	r7
 8003284:	3001      	adds	r0, #1
 8003286:	f43f ae3e 	beq.w	8002f06 <_printf_float+0xb6>
 800328a:	f108 0801 	add.w	r8, r8, #1
 800328e:	68e3      	ldr	r3, [r4, #12]
 8003290:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003292:	1a5b      	subs	r3, r3, r1
 8003294:	4543      	cmp	r3, r8
 8003296:	dcf0      	bgt.n	800327a <_printf_float+0x42a>
 8003298:	e6fc      	b.n	8003094 <_printf_float+0x244>
 800329a:	f04f 0800 	mov.w	r8, #0
 800329e:	f104 0919 	add.w	r9, r4, #25
 80032a2:	e7f4      	b.n	800328e <_printf_float+0x43e>

080032a4 <_printf_common>:
 80032a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a8:	4616      	mov	r6, r2
 80032aa:	4698      	mov	r8, r3
 80032ac:	688a      	ldr	r2, [r1, #8]
 80032ae:	690b      	ldr	r3, [r1, #16]
 80032b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80032b4:	4293      	cmp	r3, r2
 80032b6:	bfb8      	it	lt
 80032b8:	4613      	movlt	r3, r2
 80032ba:	6033      	str	r3, [r6, #0]
 80032bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80032c0:	4607      	mov	r7, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	b10a      	cbz	r2, 80032ca <_printf_common+0x26>
 80032c6:	3301      	adds	r3, #1
 80032c8:	6033      	str	r3, [r6, #0]
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	0699      	lsls	r1, r3, #26
 80032ce:	bf42      	ittt	mi
 80032d0:	6833      	ldrmi	r3, [r6, #0]
 80032d2:	3302      	addmi	r3, #2
 80032d4:	6033      	strmi	r3, [r6, #0]
 80032d6:	6825      	ldr	r5, [r4, #0]
 80032d8:	f015 0506 	ands.w	r5, r5, #6
 80032dc:	d106      	bne.n	80032ec <_printf_common+0x48>
 80032de:	f104 0a19 	add.w	sl, r4, #25
 80032e2:	68e3      	ldr	r3, [r4, #12]
 80032e4:	6832      	ldr	r2, [r6, #0]
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	42ab      	cmp	r3, r5
 80032ea:	dc26      	bgt.n	800333a <_printf_common+0x96>
 80032ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80032f0:	6822      	ldr	r2, [r4, #0]
 80032f2:	3b00      	subs	r3, #0
 80032f4:	bf18      	it	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	0692      	lsls	r2, r2, #26
 80032fa:	d42b      	bmi.n	8003354 <_printf_common+0xb0>
 80032fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003300:	4641      	mov	r1, r8
 8003302:	4638      	mov	r0, r7
 8003304:	47c8      	blx	r9
 8003306:	3001      	adds	r0, #1
 8003308:	d01e      	beq.n	8003348 <_printf_common+0xa4>
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	6922      	ldr	r2, [r4, #16]
 800330e:	f003 0306 	and.w	r3, r3, #6
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf02      	ittt	eq
 8003316:	68e5      	ldreq	r5, [r4, #12]
 8003318:	6833      	ldreq	r3, [r6, #0]
 800331a:	1aed      	subeq	r5, r5, r3
 800331c:	68a3      	ldr	r3, [r4, #8]
 800331e:	bf0c      	ite	eq
 8003320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003324:	2500      	movne	r5, #0
 8003326:	4293      	cmp	r3, r2
 8003328:	bfc4      	itt	gt
 800332a:	1a9b      	subgt	r3, r3, r2
 800332c:	18ed      	addgt	r5, r5, r3
 800332e:	2600      	movs	r6, #0
 8003330:	341a      	adds	r4, #26
 8003332:	42b5      	cmp	r5, r6
 8003334:	d11a      	bne.n	800336c <_printf_common+0xc8>
 8003336:	2000      	movs	r0, #0
 8003338:	e008      	b.n	800334c <_printf_common+0xa8>
 800333a:	2301      	movs	r3, #1
 800333c:	4652      	mov	r2, sl
 800333e:	4641      	mov	r1, r8
 8003340:	4638      	mov	r0, r7
 8003342:	47c8      	blx	r9
 8003344:	3001      	adds	r0, #1
 8003346:	d103      	bne.n	8003350 <_printf_common+0xac>
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003350:	3501      	adds	r5, #1
 8003352:	e7c6      	b.n	80032e2 <_printf_common+0x3e>
 8003354:	18e1      	adds	r1, r4, r3
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	2030      	movs	r0, #48	@ 0x30
 800335a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800335e:	4422      	add	r2, r4
 8003360:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003364:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003368:	3302      	adds	r3, #2
 800336a:	e7c7      	b.n	80032fc <_printf_common+0x58>
 800336c:	2301      	movs	r3, #1
 800336e:	4622      	mov	r2, r4
 8003370:	4641      	mov	r1, r8
 8003372:	4638      	mov	r0, r7
 8003374:	47c8      	blx	r9
 8003376:	3001      	adds	r0, #1
 8003378:	d0e6      	beq.n	8003348 <_printf_common+0xa4>
 800337a:	3601      	adds	r6, #1
 800337c:	e7d9      	b.n	8003332 <_printf_common+0x8e>
	...

08003380 <_printf_i>:
 8003380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003384:	7e0f      	ldrb	r7, [r1, #24]
 8003386:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003388:	2f78      	cmp	r7, #120	@ 0x78
 800338a:	4691      	mov	r9, r2
 800338c:	4680      	mov	r8, r0
 800338e:	460c      	mov	r4, r1
 8003390:	469a      	mov	sl, r3
 8003392:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003396:	d807      	bhi.n	80033a8 <_printf_i+0x28>
 8003398:	2f62      	cmp	r7, #98	@ 0x62
 800339a:	d80a      	bhi.n	80033b2 <_printf_i+0x32>
 800339c:	2f00      	cmp	r7, #0
 800339e:	f000 80d2 	beq.w	8003546 <_printf_i+0x1c6>
 80033a2:	2f58      	cmp	r7, #88	@ 0x58
 80033a4:	f000 80b9 	beq.w	800351a <_printf_i+0x19a>
 80033a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80033b0:	e03a      	b.n	8003428 <_printf_i+0xa8>
 80033b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80033b6:	2b15      	cmp	r3, #21
 80033b8:	d8f6      	bhi.n	80033a8 <_printf_i+0x28>
 80033ba:	a101      	add	r1, pc, #4	@ (adr r1, 80033c0 <_printf_i+0x40>)
 80033bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033c0:	08003419 	.word	0x08003419
 80033c4:	0800342d 	.word	0x0800342d
 80033c8:	080033a9 	.word	0x080033a9
 80033cc:	080033a9 	.word	0x080033a9
 80033d0:	080033a9 	.word	0x080033a9
 80033d4:	080033a9 	.word	0x080033a9
 80033d8:	0800342d 	.word	0x0800342d
 80033dc:	080033a9 	.word	0x080033a9
 80033e0:	080033a9 	.word	0x080033a9
 80033e4:	080033a9 	.word	0x080033a9
 80033e8:	080033a9 	.word	0x080033a9
 80033ec:	0800352d 	.word	0x0800352d
 80033f0:	08003457 	.word	0x08003457
 80033f4:	080034e7 	.word	0x080034e7
 80033f8:	080033a9 	.word	0x080033a9
 80033fc:	080033a9 	.word	0x080033a9
 8003400:	0800354f 	.word	0x0800354f
 8003404:	080033a9 	.word	0x080033a9
 8003408:	08003457 	.word	0x08003457
 800340c:	080033a9 	.word	0x080033a9
 8003410:	080033a9 	.word	0x080033a9
 8003414:	080034ef 	.word	0x080034ef
 8003418:	6833      	ldr	r3, [r6, #0]
 800341a:	1d1a      	adds	r2, r3, #4
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6032      	str	r2, [r6, #0]
 8003420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003424:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003428:	2301      	movs	r3, #1
 800342a:	e09d      	b.n	8003568 <_printf_i+0x1e8>
 800342c:	6833      	ldr	r3, [r6, #0]
 800342e:	6820      	ldr	r0, [r4, #0]
 8003430:	1d19      	adds	r1, r3, #4
 8003432:	6031      	str	r1, [r6, #0]
 8003434:	0606      	lsls	r6, r0, #24
 8003436:	d501      	bpl.n	800343c <_printf_i+0xbc>
 8003438:	681d      	ldr	r5, [r3, #0]
 800343a:	e003      	b.n	8003444 <_printf_i+0xc4>
 800343c:	0645      	lsls	r5, r0, #25
 800343e:	d5fb      	bpl.n	8003438 <_printf_i+0xb8>
 8003440:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003444:	2d00      	cmp	r5, #0
 8003446:	da03      	bge.n	8003450 <_printf_i+0xd0>
 8003448:	232d      	movs	r3, #45	@ 0x2d
 800344a:	426d      	negs	r5, r5
 800344c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003450:	4859      	ldr	r0, [pc, #356]	@ (80035b8 <_printf_i+0x238>)
 8003452:	230a      	movs	r3, #10
 8003454:	e011      	b.n	800347a <_printf_i+0xfa>
 8003456:	6821      	ldr	r1, [r4, #0]
 8003458:	6833      	ldr	r3, [r6, #0]
 800345a:	0608      	lsls	r0, r1, #24
 800345c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003460:	d402      	bmi.n	8003468 <_printf_i+0xe8>
 8003462:	0649      	lsls	r1, r1, #25
 8003464:	bf48      	it	mi
 8003466:	b2ad      	uxthmi	r5, r5
 8003468:	2f6f      	cmp	r7, #111	@ 0x6f
 800346a:	4853      	ldr	r0, [pc, #332]	@ (80035b8 <_printf_i+0x238>)
 800346c:	6033      	str	r3, [r6, #0]
 800346e:	bf14      	ite	ne
 8003470:	230a      	movne	r3, #10
 8003472:	2308      	moveq	r3, #8
 8003474:	2100      	movs	r1, #0
 8003476:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800347a:	6866      	ldr	r6, [r4, #4]
 800347c:	60a6      	str	r6, [r4, #8]
 800347e:	2e00      	cmp	r6, #0
 8003480:	bfa2      	ittt	ge
 8003482:	6821      	ldrge	r1, [r4, #0]
 8003484:	f021 0104 	bicge.w	r1, r1, #4
 8003488:	6021      	strge	r1, [r4, #0]
 800348a:	b90d      	cbnz	r5, 8003490 <_printf_i+0x110>
 800348c:	2e00      	cmp	r6, #0
 800348e:	d04b      	beq.n	8003528 <_printf_i+0x1a8>
 8003490:	4616      	mov	r6, r2
 8003492:	fbb5 f1f3 	udiv	r1, r5, r3
 8003496:	fb03 5711 	mls	r7, r3, r1, r5
 800349a:	5dc7      	ldrb	r7, [r0, r7]
 800349c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034a0:	462f      	mov	r7, r5
 80034a2:	42bb      	cmp	r3, r7
 80034a4:	460d      	mov	r5, r1
 80034a6:	d9f4      	bls.n	8003492 <_printf_i+0x112>
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d10b      	bne.n	80034c4 <_printf_i+0x144>
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	07df      	lsls	r7, r3, #31
 80034b0:	d508      	bpl.n	80034c4 <_printf_i+0x144>
 80034b2:	6923      	ldr	r3, [r4, #16]
 80034b4:	6861      	ldr	r1, [r4, #4]
 80034b6:	4299      	cmp	r1, r3
 80034b8:	bfde      	ittt	le
 80034ba:	2330      	movle	r3, #48	@ 0x30
 80034bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034c4:	1b92      	subs	r2, r2, r6
 80034c6:	6122      	str	r2, [r4, #16]
 80034c8:	f8cd a000 	str.w	sl, [sp]
 80034cc:	464b      	mov	r3, r9
 80034ce:	aa03      	add	r2, sp, #12
 80034d0:	4621      	mov	r1, r4
 80034d2:	4640      	mov	r0, r8
 80034d4:	f7ff fee6 	bl	80032a4 <_printf_common>
 80034d8:	3001      	adds	r0, #1
 80034da:	d14a      	bne.n	8003572 <_printf_i+0x1f2>
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
 80034e0:	b004      	add	sp, #16
 80034e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	f043 0320 	orr.w	r3, r3, #32
 80034ec:	6023      	str	r3, [r4, #0]
 80034ee:	4833      	ldr	r0, [pc, #204]	@ (80035bc <_printf_i+0x23c>)
 80034f0:	2778      	movs	r7, #120	@ 0x78
 80034f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	6831      	ldr	r1, [r6, #0]
 80034fa:	061f      	lsls	r7, r3, #24
 80034fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8003500:	d402      	bmi.n	8003508 <_printf_i+0x188>
 8003502:	065f      	lsls	r7, r3, #25
 8003504:	bf48      	it	mi
 8003506:	b2ad      	uxthmi	r5, r5
 8003508:	6031      	str	r1, [r6, #0]
 800350a:	07d9      	lsls	r1, r3, #31
 800350c:	bf44      	itt	mi
 800350e:	f043 0320 	orrmi.w	r3, r3, #32
 8003512:	6023      	strmi	r3, [r4, #0]
 8003514:	b11d      	cbz	r5, 800351e <_printf_i+0x19e>
 8003516:	2310      	movs	r3, #16
 8003518:	e7ac      	b.n	8003474 <_printf_i+0xf4>
 800351a:	4827      	ldr	r0, [pc, #156]	@ (80035b8 <_printf_i+0x238>)
 800351c:	e7e9      	b.n	80034f2 <_printf_i+0x172>
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	f023 0320 	bic.w	r3, r3, #32
 8003524:	6023      	str	r3, [r4, #0]
 8003526:	e7f6      	b.n	8003516 <_printf_i+0x196>
 8003528:	4616      	mov	r6, r2
 800352a:	e7bd      	b.n	80034a8 <_printf_i+0x128>
 800352c:	6833      	ldr	r3, [r6, #0]
 800352e:	6825      	ldr	r5, [r4, #0]
 8003530:	6961      	ldr	r1, [r4, #20]
 8003532:	1d18      	adds	r0, r3, #4
 8003534:	6030      	str	r0, [r6, #0]
 8003536:	062e      	lsls	r6, r5, #24
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	d501      	bpl.n	8003540 <_printf_i+0x1c0>
 800353c:	6019      	str	r1, [r3, #0]
 800353e:	e002      	b.n	8003546 <_printf_i+0x1c6>
 8003540:	0668      	lsls	r0, r5, #25
 8003542:	d5fb      	bpl.n	800353c <_printf_i+0x1bc>
 8003544:	8019      	strh	r1, [r3, #0]
 8003546:	2300      	movs	r3, #0
 8003548:	6123      	str	r3, [r4, #16]
 800354a:	4616      	mov	r6, r2
 800354c:	e7bc      	b.n	80034c8 <_printf_i+0x148>
 800354e:	6833      	ldr	r3, [r6, #0]
 8003550:	1d1a      	adds	r2, r3, #4
 8003552:	6032      	str	r2, [r6, #0]
 8003554:	681e      	ldr	r6, [r3, #0]
 8003556:	6862      	ldr	r2, [r4, #4]
 8003558:	2100      	movs	r1, #0
 800355a:	4630      	mov	r0, r6
 800355c:	f7fc fe60 	bl	8000220 <memchr>
 8003560:	b108      	cbz	r0, 8003566 <_printf_i+0x1e6>
 8003562:	1b80      	subs	r0, r0, r6
 8003564:	6060      	str	r0, [r4, #4]
 8003566:	6863      	ldr	r3, [r4, #4]
 8003568:	6123      	str	r3, [r4, #16]
 800356a:	2300      	movs	r3, #0
 800356c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003570:	e7aa      	b.n	80034c8 <_printf_i+0x148>
 8003572:	6923      	ldr	r3, [r4, #16]
 8003574:	4632      	mov	r2, r6
 8003576:	4649      	mov	r1, r9
 8003578:	4640      	mov	r0, r8
 800357a:	47d0      	blx	sl
 800357c:	3001      	adds	r0, #1
 800357e:	d0ad      	beq.n	80034dc <_printf_i+0x15c>
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	079b      	lsls	r3, r3, #30
 8003584:	d413      	bmi.n	80035ae <_printf_i+0x22e>
 8003586:	68e0      	ldr	r0, [r4, #12]
 8003588:	9b03      	ldr	r3, [sp, #12]
 800358a:	4298      	cmp	r0, r3
 800358c:	bfb8      	it	lt
 800358e:	4618      	movlt	r0, r3
 8003590:	e7a6      	b.n	80034e0 <_printf_i+0x160>
 8003592:	2301      	movs	r3, #1
 8003594:	4632      	mov	r2, r6
 8003596:	4649      	mov	r1, r9
 8003598:	4640      	mov	r0, r8
 800359a:	47d0      	blx	sl
 800359c:	3001      	adds	r0, #1
 800359e:	d09d      	beq.n	80034dc <_printf_i+0x15c>
 80035a0:	3501      	adds	r5, #1
 80035a2:	68e3      	ldr	r3, [r4, #12]
 80035a4:	9903      	ldr	r1, [sp, #12]
 80035a6:	1a5b      	subs	r3, r3, r1
 80035a8:	42ab      	cmp	r3, r5
 80035aa:	dcf2      	bgt.n	8003592 <_printf_i+0x212>
 80035ac:	e7eb      	b.n	8003586 <_printf_i+0x206>
 80035ae:	2500      	movs	r5, #0
 80035b0:	f104 0619 	add.w	r6, r4, #25
 80035b4:	e7f5      	b.n	80035a2 <_printf_i+0x222>
 80035b6:	bf00      	nop
 80035b8:	08005652 	.word	0x08005652
 80035bc:	08005663 	.word	0x08005663

080035c0 <std>:
 80035c0:	2300      	movs	r3, #0
 80035c2:	b510      	push	{r4, lr}
 80035c4:	4604      	mov	r4, r0
 80035c6:	e9c0 3300 	strd	r3, r3, [r0]
 80035ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035ce:	6083      	str	r3, [r0, #8]
 80035d0:	8181      	strh	r1, [r0, #12]
 80035d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80035d4:	81c2      	strh	r2, [r0, #14]
 80035d6:	6183      	str	r3, [r0, #24]
 80035d8:	4619      	mov	r1, r3
 80035da:	2208      	movs	r2, #8
 80035dc:	305c      	adds	r0, #92	@ 0x5c
 80035de:	f000 f8f4 	bl	80037ca <memset>
 80035e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <std+0x58>)
 80035e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <std+0x5c>)
 80035e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80035ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003620 <std+0x60>)
 80035ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80035ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003624 <std+0x64>)
 80035f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80035f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003628 <std+0x68>)
 80035f4:	6224      	str	r4, [r4, #32]
 80035f6:	429c      	cmp	r4, r3
 80035f8:	d006      	beq.n	8003608 <std+0x48>
 80035fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80035fe:	4294      	cmp	r4, r2
 8003600:	d002      	beq.n	8003608 <std+0x48>
 8003602:	33d0      	adds	r3, #208	@ 0xd0
 8003604:	429c      	cmp	r4, r3
 8003606:	d105      	bne.n	8003614 <std+0x54>
 8003608:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800360c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003610:	f000 b958 	b.w	80038c4 <__retarget_lock_init_recursive>
 8003614:	bd10      	pop	{r4, pc}
 8003616:	bf00      	nop
 8003618:	08003745 	.word	0x08003745
 800361c:	08003767 	.word	0x08003767
 8003620:	0800379f 	.word	0x0800379f
 8003624:	080037c3 	.word	0x080037c3
 8003628:	20000288 	.word	0x20000288

0800362c <stdio_exit_handler>:
 800362c:	4a02      	ldr	r2, [pc, #8]	@ (8003638 <stdio_exit_handler+0xc>)
 800362e:	4903      	ldr	r1, [pc, #12]	@ (800363c <stdio_exit_handler+0x10>)
 8003630:	4803      	ldr	r0, [pc, #12]	@ (8003640 <stdio_exit_handler+0x14>)
 8003632:	f000 b869 	b.w	8003708 <_fwalk_sglue>
 8003636:	bf00      	nop
 8003638:	2000001c 	.word	0x2000001c
 800363c:	08004f75 	.word	0x08004f75
 8003640:	2000002c 	.word	0x2000002c

08003644 <cleanup_stdio>:
 8003644:	6841      	ldr	r1, [r0, #4]
 8003646:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <cleanup_stdio+0x34>)
 8003648:	4299      	cmp	r1, r3
 800364a:	b510      	push	{r4, lr}
 800364c:	4604      	mov	r4, r0
 800364e:	d001      	beq.n	8003654 <cleanup_stdio+0x10>
 8003650:	f001 fc90 	bl	8004f74 <_fflush_r>
 8003654:	68a1      	ldr	r1, [r4, #8]
 8003656:	4b09      	ldr	r3, [pc, #36]	@ (800367c <cleanup_stdio+0x38>)
 8003658:	4299      	cmp	r1, r3
 800365a:	d002      	beq.n	8003662 <cleanup_stdio+0x1e>
 800365c:	4620      	mov	r0, r4
 800365e:	f001 fc89 	bl	8004f74 <_fflush_r>
 8003662:	68e1      	ldr	r1, [r4, #12]
 8003664:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <cleanup_stdio+0x3c>)
 8003666:	4299      	cmp	r1, r3
 8003668:	d004      	beq.n	8003674 <cleanup_stdio+0x30>
 800366a:	4620      	mov	r0, r4
 800366c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003670:	f001 bc80 	b.w	8004f74 <_fflush_r>
 8003674:	bd10      	pop	{r4, pc}
 8003676:	bf00      	nop
 8003678:	20000288 	.word	0x20000288
 800367c:	200002f0 	.word	0x200002f0
 8003680:	20000358 	.word	0x20000358

08003684 <global_stdio_init.part.0>:
 8003684:	b510      	push	{r4, lr}
 8003686:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <global_stdio_init.part.0+0x30>)
 8003688:	4c0b      	ldr	r4, [pc, #44]	@ (80036b8 <global_stdio_init.part.0+0x34>)
 800368a:	4a0c      	ldr	r2, [pc, #48]	@ (80036bc <global_stdio_init.part.0+0x38>)
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	4620      	mov	r0, r4
 8003690:	2200      	movs	r2, #0
 8003692:	2104      	movs	r1, #4
 8003694:	f7ff ff94 	bl	80035c0 <std>
 8003698:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800369c:	2201      	movs	r2, #1
 800369e:	2109      	movs	r1, #9
 80036a0:	f7ff ff8e 	bl	80035c0 <std>
 80036a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80036a8:	2202      	movs	r2, #2
 80036aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036ae:	2112      	movs	r1, #18
 80036b0:	f7ff bf86 	b.w	80035c0 <std>
 80036b4:	200003c0 	.word	0x200003c0
 80036b8:	20000288 	.word	0x20000288
 80036bc:	0800362d 	.word	0x0800362d

080036c0 <__sfp_lock_acquire>:
 80036c0:	4801      	ldr	r0, [pc, #4]	@ (80036c8 <__sfp_lock_acquire+0x8>)
 80036c2:	f000 b900 	b.w	80038c6 <__retarget_lock_acquire_recursive>
 80036c6:	bf00      	nop
 80036c8:	200003c9 	.word	0x200003c9

080036cc <__sfp_lock_release>:
 80036cc:	4801      	ldr	r0, [pc, #4]	@ (80036d4 <__sfp_lock_release+0x8>)
 80036ce:	f000 b8fb 	b.w	80038c8 <__retarget_lock_release_recursive>
 80036d2:	bf00      	nop
 80036d4:	200003c9 	.word	0x200003c9

080036d8 <__sinit>:
 80036d8:	b510      	push	{r4, lr}
 80036da:	4604      	mov	r4, r0
 80036dc:	f7ff fff0 	bl	80036c0 <__sfp_lock_acquire>
 80036e0:	6a23      	ldr	r3, [r4, #32]
 80036e2:	b11b      	cbz	r3, 80036ec <__sinit+0x14>
 80036e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036e8:	f7ff bff0 	b.w	80036cc <__sfp_lock_release>
 80036ec:	4b04      	ldr	r3, [pc, #16]	@ (8003700 <__sinit+0x28>)
 80036ee:	6223      	str	r3, [r4, #32]
 80036f0:	4b04      	ldr	r3, [pc, #16]	@ (8003704 <__sinit+0x2c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f5      	bne.n	80036e4 <__sinit+0xc>
 80036f8:	f7ff ffc4 	bl	8003684 <global_stdio_init.part.0>
 80036fc:	e7f2      	b.n	80036e4 <__sinit+0xc>
 80036fe:	bf00      	nop
 8003700:	08003645 	.word	0x08003645
 8003704:	200003c0 	.word	0x200003c0

08003708 <_fwalk_sglue>:
 8003708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800370c:	4607      	mov	r7, r0
 800370e:	4688      	mov	r8, r1
 8003710:	4614      	mov	r4, r2
 8003712:	2600      	movs	r6, #0
 8003714:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003718:	f1b9 0901 	subs.w	r9, r9, #1
 800371c:	d505      	bpl.n	800372a <_fwalk_sglue+0x22>
 800371e:	6824      	ldr	r4, [r4, #0]
 8003720:	2c00      	cmp	r4, #0
 8003722:	d1f7      	bne.n	8003714 <_fwalk_sglue+0xc>
 8003724:	4630      	mov	r0, r6
 8003726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800372a:	89ab      	ldrh	r3, [r5, #12]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d907      	bls.n	8003740 <_fwalk_sglue+0x38>
 8003730:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003734:	3301      	adds	r3, #1
 8003736:	d003      	beq.n	8003740 <_fwalk_sglue+0x38>
 8003738:	4629      	mov	r1, r5
 800373a:	4638      	mov	r0, r7
 800373c:	47c0      	blx	r8
 800373e:	4306      	orrs	r6, r0
 8003740:	3568      	adds	r5, #104	@ 0x68
 8003742:	e7e9      	b.n	8003718 <_fwalk_sglue+0x10>

08003744 <__sread>:
 8003744:	b510      	push	{r4, lr}
 8003746:	460c      	mov	r4, r1
 8003748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800374c:	f000 f86c 	bl	8003828 <_read_r>
 8003750:	2800      	cmp	r0, #0
 8003752:	bfab      	itete	ge
 8003754:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003756:	89a3      	ldrhlt	r3, [r4, #12]
 8003758:	181b      	addge	r3, r3, r0
 800375a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800375e:	bfac      	ite	ge
 8003760:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003762:	81a3      	strhlt	r3, [r4, #12]
 8003764:	bd10      	pop	{r4, pc}

08003766 <__swrite>:
 8003766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800376a:	461f      	mov	r7, r3
 800376c:	898b      	ldrh	r3, [r1, #12]
 800376e:	05db      	lsls	r3, r3, #23
 8003770:	4605      	mov	r5, r0
 8003772:	460c      	mov	r4, r1
 8003774:	4616      	mov	r6, r2
 8003776:	d505      	bpl.n	8003784 <__swrite+0x1e>
 8003778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800377c:	2302      	movs	r3, #2
 800377e:	2200      	movs	r2, #0
 8003780:	f000 f840 	bl	8003804 <_lseek_r>
 8003784:	89a3      	ldrh	r3, [r4, #12]
 8003786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800378a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800378e:	81a3      	strh	r3, [r4, #12]
 8003790:	4632      	mov	r2, r6
 8003792:	463b      	mov	r3, r7
 8003794:	4628      	mov	r0, r5
 8003796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800379a:	f000 b857 	b.w	800384c <_write_r>

0800379e <__sseek>:
 800379e:	b510      	push	{r4, lr}
 80037a0:	460c      	mov	r4, r1
 80037a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a6:	f000 f82d 	bl	8003804 <_lseek_r>
 80037aa:	1c43      	adds	r3, r0, #1
 80037ac:	89a3      	ldrh	r3, [r4, #12]
 80037ae:	bf15      	itete	ne
 80037b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037ba:	81a3      	strheq	r3, [r4, #12]
 80037bc:	bf18      	it	ne
 80037be:	81a3      	strhne	r3, [r4, #12]
 80037c0:	bd10      	pop	{r4, pc}

080037c2 <__sclose>:
 80037c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037c6:	f000 b80d 	b.w	80037e4 <_close_r>

080037ca <memset>:
 80037ca:	4402      	add	r2, r0
 80037cc:	4603      	mov	r3, r0
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d100      	bne.n	80037d4 <memset+0xa>
 80037d2:	4770      	bx	lr
 80037d4:	f803 1b01 	strb.w	r1, [r3], #1
 80037d8:	e7f9      	b.n	80037ce <memset+0x4>
	...

080037dc <_localeconv_r>:
 80037dc:	4800      	ldr	r0, [pc, #0]	@ (80037e0 <_localeconv_r+0x4>)
 80037de:	4770      	bx	lr
 80037e0:	20000168 	.word	0x20000168

080037e4 <_close_r>:
 80037e4:	b538      	push	{r3, r4, r5, lr}
 80037e6:	4d06      	ldr	r5, [pc, #24]	@ (8003800 <_close_r+0x1c>)
 80037e8:	2300      	movs	r3, #0
 80037ea:	4604      	mov	r4, r0
 80037ec:	4608      	mov	r0, r1
 80037ee:	602b      	str	r3, [r5, #0]
 80037f0:	f7fd fbd6 	bl	8000fa0 <_close>
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	d102      	bne.n	80037fe <_close_r+0x1a>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	b103      	cbz	r3, 80037fe <_close_r+0x1a>
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
 8003800:	200003c4 	.word	0x200003c4

08003804 <_lseek_r>:
 8003804:	b538      	push	{r3, r4, r5, lr}
 8003806:	4d07      	ldr	r5, [pc, #28]	@ (8003824 <_lseek_r+0x20>)
 8003808:	4604      	mov	r4, r0
 800380a:	4608      	mov	r0, r1
 800380c:	4611      	mov	r1, r2
 800380e:	2200      	movs	r2, #0
 8003810:	602a      	str	r2, [r5, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	f7fd fbeb 	bl	8000fee <_lseek>
 8003818:	1c43      	adds	r3, r0, #1
 800381a:	d102      	bne.n	8003822 <_lseek_r+0x1e>
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	b103      	cbz	r3, 8003822 <_lseek_r+0x1e>
 8003820:	6023      	str	r3, [r4, #0]
 8003822:	bd38      	pop	{r3, r4, r5, pc}
 8003824:	200003c4 	.word	0x200003c4

08003828 <_read_r>:
 8003828:	b538      	push	{r3, r4, r5, lr}
 800382a:	4d07      	ldr	r5, [pc, #28]	@ (8003848 <_read_r+0x20>)
 800382c:	4604      	mov	r4, r0
 800382e:	4608      	mov	r0, r1
 8003830:	4611      	mov	r1, r2
 8003832:	2200      	movs	r2, #0
 8003834:	602a      	str	r2, [r5, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	f7fd fb79 	bl	8000f2e <_read>
 800383c:	1c43      	adds	r3, r0, #1
 800383e:	d102      	bne.n	8003846 <_read_r+0x1e>
 8003840:	682b      	ldr	r3, [r5, #0]
 8003842:	b103      	cbz	r3, 8003846 <_read_r+0x1e>
 8003844:	6023      	str	r3, [r4, #0]
 8003846:	bd38      	pop	{r3, r4, r5, pc}
 8003848:	200003c4 	.word	0x200003c4

0800384c <_write_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	4d07      	ldr	r5, [pc, #28]	@ (800386c <_write_r+0x20>)
 8003850:	4604      	mov	r4, r0
 8003852:	4608      	mov	r0, r1
 8003854:	4611      	mov	r1, r2
 8003856:	2200      	movs	r2, #0
 8003858:	602a      	str	r2, [r5, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	f7fd fb84 	bl	8000f68 <_write>
 8003860:	1c43      	adds	r3, r0, #1
 8003862:	d102      	bne.n	800386a <_write_r+0x1e>
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	b103      	cbz	r3, 800386a <_write_r+0x1e>
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	200003c4 	.word	0x200003c4

08003870 <__errno>:
 8003870:	4b01      	ldr	r3, [pc, #4]	@ (8003878 <__errno+0x8>)
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20000028 	.word	0x20000028

0800387c <__libc_init_array>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	4d0d      	ldr	r5, [pc, #52]	@ (80038b4 <__libc_init_array+0x38>)
 8003880:	4c0d      	ldr	r4, [pc, #52]	@ (80038b8 <__libc_init_array+0x3c>)
 8003882:	1b64      	subs	r4, r4, r5
 8003884:	10a4      	asrs	r4, r4, #2
 8003886:	2600      	movs	r6, #0
 8003888:	42a6      	cmp	r6, r4
 800388a:	d109      	bne.n	80038a0 <__libc_init_array+0x24>
 800388c:	4d0b      	ldr	r5, [pc, #44]	@ (80038bc <__libc_init_array+0x40>)
 800388e:	4c0c      	ldr	r4, [pc, #48]	@ (80038c0 <__libc_init_array+0x44>)
 8003890:	f001 febe 	bl	8005610 <_init>
 8003894:	1b64      	subs	r4, r4, r5
 8003896:	10a4      	asrs	r4, r4, #2
 8003898:	2600      	movs	r6, #0
 800389a:	42a6      	cmp	r6, r4
 800389c:	d105      	bne.n	80038aa <__libc_init_array+0x2e>
 800389e:	bd70      	pop	{r4, r5, r6, pc}
 80038a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a4:	4798      	blx	r3
 80038a6:	3601      	adds	r6, #1
 80038a8:	e7ee      	b.n	8003888 <__libc_init_array+0xc>
 80038aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ae:	4798      	blx	r3
 80038b0:	3601      	adds	r6, #1
 80038b2:	e7f2      	b.n	800389a <__libc_init_array+0x1e>
 80038b4:	080059b8 	.word	0x080059b8
 80038b8:	080059b8 	.word	0x080059b8
 80038bc:	080059b8 	.word	0x080059b8
 80038c0:	080059bc 	.word	0x080059bc

080038c4 <__retarget_lock_init_recursive>:
 80038c4:	4770      	bx	lr

080038c6 <__retarget_lock_acquire_recursive>:
 80038c6:	4770      	bx	lr

080038c8 <__retarget_lock_release_recursive>:
 80038c8:	4770      	bx	lr

080038ca <quorem>:
 80038ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ce:	6903      	ldr	r3, [r0, #16]
 80038d0:	690c      	ldr	r4, [r1, #16]
 80038d2:	42a3      	cmp	r3, r4
 80038d4:	4607      	mov	r7, r0
 80038d6:	db7e      	blt.n	80039d6 <quorem+0x10c>
 80038d8:	3c01      	subs	r4, #1
 80038da:	f101 0814 	add.w	r8, r1, #20
 80038de:	00a3      	lsls	r3, r4, #2
 80038e0:	f100 0514 	add.w	r5, r0, #20
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80038f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038f4:	3301      	adds	r3, #1
 80038f6:	429a      	cmp	r2, r3
 80038f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80038fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8003900:	d32e      	bcc.n	8003960 <quorem+0x96>
 8003902:	f04f 0a00 	mov.w	sl, #0
 8003906:	46c4      	mov	ip, r8
 8003908:	46ae      	mov	lr, r5
 800390a:	46d3      	mov	fp, sl
 800390c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003910:	b298      	uxth	r0, r3
 8003912:	fb06 a000 	mla	r0, r6, r0, sl
 8003916:	0c02      	lsrs	r2, r0, #16
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	fb06 2303 	mla	r3, r6, r3, r2
 800391e:	f8de 2000 	ldr.w	r2, [lr]
 8003922:	b280      	uxth	r0, r0
 8003924:	b292      	uxth	r2, r2
 8003926:	1a12      	subs	r2, r2, r0
 8003928:	445a      	add	r2, fp
 800392a:	f8de 0000 	ldr.w	r0, [lr]
 800392e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003932:	b29b      	uxth	r3, r3
 8003934:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003938:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800393c:	b292      	uxth	r2, r2
 800393e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003942:	45e1      	cmp	r9, ip
 8003944:	f84e 2b04 	str.w	r2, [lr], #4
 8003948:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800394c:	d2de      	bcs.n	800390c <quorem+0x42>
 800394e:	9b00      	ldr	r3, [sp, #0]
 8003950:	58eb      	ldr	r3, [r5, r3]
 8003952:	b92b      	cbnz	r3, 8003960 <quorem+0x96>
 8003954:	9b01      	ldr	r3, [sp, #4]
 8003956:	3b04      	subs	r3, #4
 8003958:	429d      	cmp	r5, r3
 800395a:	461a      	mov	r2, r3
 800395c:	d32f      	bcc.n	80039be <quorem+0xf4>
 800395e:	613c      	str	r4, [r7, #16]
 8003960:	4638      	mov	r0, r7
 8003962:	f001 f97b 	bl	8004c5c <__mcmp>
 8003966:	2800      	cmp	r0, #0
 8003968:	db25      	blt.n	80039b6 <quorem+0xec>
 800396a:	4629      	mov	r1, r5
 800396c:	2000      	movs	r0, #0
 800396e:	f858 2b04 	ldr.w	r2, [r8], #4
 8003972:	f8d1 c000 	ldr.w	ip, [r1]
 8003976:	fa1f fe82 	uxth.w	lr, r2
 800397a:	fa1f f38c 	uxth.w	r3, ip
 800397e:	eba3 030e 	sub.w	r3, r3, lr
 8003982:	4403      	add	r3, r0
 8003984:	0c12      	lsrs	r2, r2, #16
 8003986:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800398a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800398e:	b29b      	uxth	r3, r3
 8003990:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003994:	45c1      	cmp	r9, r8
 8003996:	f841 3b04 	str.w	r3, [r1], #4
 800399a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800399e:	d2e6      	bcs.n	800396e <quorem+0xa4>
 80039a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80039a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80039a8:	b922      	cbnz	r2, 80039b4 <quorem+0xea>
 80039aa:	3b04      	subs	r3, #4
 80039ac:	429d      	cmp	r5, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	d30b      	bcc.n	80039ca <quorem+0x100>
 80039b2:	613c      	str	r4, [r7, #16]
 80039b4:	3601      	adds	r6, #1
 80039b6:	4630      	mov	r0, r6
 80039b8:	b003      	add	sp, #12
 80039ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	3b04      	subs	r3, #4
 80039c2:	2a00      	cmp	r2, #0
 80039c4:	d1cb      	bne.n	800395e <quorem+0x94>
 80039c6:	3c01      	subs	r4, #1
 80039c8:	e7c6      	b.n	8003958 <quorem+0x8e>
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	3b04      	subs	r3, #4
 80039ce:	2a00      	cmp	r2, #0
 80039d0:	d1ef      	bne.n	80039b2 <quorem+0xe8>
 80039d2:	3c01      	subs	r4, #1
 80039d4:	e7ea      	b.n	80039ac <quorem+0xe2>
 80039d6:	2000      	movs	r0, #0
 80039d8:	e7ee      	b.n	80039b8 <quorem+0xee>
 80039da:	0000      	movs	r0, r0
 80039dc:	0000      	movs	r0, r0
	...

080039e0 <_dtoa_r>:
 80039e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e4:	69c7      	ldr	r7, [r0, #28]
 80039e6:	b099      	sub	sp, #100	@ 0x64
 80039e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80039ec:	ec55 4b10 	vmov	r4, r5, d0
 80039f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80039f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80039f4:	4683      	mov	fp, r0
 80039f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80039f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80039fa:	b97f      	cbnz	r7, 8003a1c <_dtoa_r+0x3c>
 80039fc:	2010      	movs	r0, #16
 80039fe:	f000 fdfd 	bl	80045fc <malloc>
 8003a02:	4602      	mov	r2, r0
 8003a04:	f8cb 001c 	str.w	r0, [fp, #28]
 8003a08:	b920      	cbnz	r0, 8003a14 <_dtoa_r+0x34>
 8003a0a:	4ba7      	ldr	r3, [pc, #668]	@ (8003ca8 <_dtoa_r+0x2c8>)
 8003a0c:	21ef      	movs	r1, #239	@ 0xef
 8003a0e:	48a7      	ldr	r0, [pc, #668]	@ (8003cac <_dtoa_r+0x2cc>)
 8003a10:	f001 faf6 	bl	8005000 <__assert_func>
 8003a14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003a18:	6007      	str	r7, [r0, #0]
 8003a1a:	60c7      	str	r7, [r0, #12]
 8003a1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	b159      	cbz	r1, 8003a3c <_dtoa_r+0x5c>
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	604a      	str	r2, [r1, #4]
 8003a28:	2301      	movs	r3, #1
 8003a2a:	4093      	lsls	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
 8003a2e:	4658      	mov	r0, fp
 8003a30:	f000 feda 	bl	80047e8 <_Bfree>
 8003a34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	1e2b      	subs	r3, r5, #0
 8003a3e:	bfb9      	ittee	lt
 8003a40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003a44:	9303      	strlt	r3, [sp, #12]
 8003a46:	2300      	movge	r3, #0
 8003a48:	6033      	strge	r3, [r6, #0]
 8003a4a:	9f03      	ldr	r7, [sp, #12]
 8003a4c:	4b98      	ldr	r3, [pc, #608]	@ (8003cb0 <_dtoa_r+0x2d0>)
 8003a4e:	bfbc      	itt	lt
 8003a50:	2201      	movlt	r2, #1
 8003a52:	6032      	strlt	r2, [r6, #0]
 8003a54:	43bb      	bics	r3, r7
 8003a56:	d112      	bne.n	8003a7e <_dtoa_r+0x9e>
 8003a58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003a5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003a64:	4323      	orrs	r3, r4
 8003a66:	f000 854d 	beq.w	8004504 <_dtoa_r+0xb24>
 8003a6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003a6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003cc4 <_dtoa_r+0x2e4>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 854f 	beq.w	8004514 <_dtoa_r+0xb34>
 8003a76:	f10a 0303 	add.w	r3, sl, #3
 8003a7a:	f000 bd49 	b.w	8004510 <_dtoa_r+0xb30>
 8003a7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003a82:	2200      	movs	r2, #0
 8003a84:	ec51 0b17 	vmov	r0, r1, d7
 8003a88:	2300      	movs	r3, #0
 8003a8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003a8e:	f7fd f843 	bl	8000b18 <__aeabi_dcmpeq>
 8003a92:	4680      	mov	r8, r0
 8003a94:	b158      	cbz	r0, 8003aae <_dtoa_r+0xce>
 8003a96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003a98:	2301      	movs	r3, #1
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003a9e:	b113      	cbz	r3, 8003aa6 <_dtoa_r+0xc6>
 8003aa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003aa2:	4b84      	ldr	r3, [pc, #528]	@ (8003cb4 <_dtoa_r+0x2d4>)
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003cc8 <_dtoa_r+0x2e8>
 8003aaa:	f000 bd33 	b.w	8004514 <_dtoa_r+0xb34>
 8003aae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003ab2:	aa16      	add	r2, sp, #88	@ 0x58
 8003ab4:	a917      	add	r1, sp, #92	@ 0x5c
 8003ab6:	4658      	mov	r0, fp
 8003ab8:	f001 f980 	bl	8004dbc <__d2b>
 8003abc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003ac0:	4681      	mov	r9, r0
 8003ac2:	2e00      	cmp	r6, #0
 8003ac4:	d077      	beq.n	8003bb6 <_dtoa_r+0x1d6>
 8003ac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ac8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ad4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003ad8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003adc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	4b74      	ldr	r3, [pc, #464]	@ (8003cb8 <_dtoa_r+0x2d8>)
 8003ae6:	f7fc fbf7 	bl	80002d8 <__aeabi_dsub>
 8003aea:	a369      	add	r3, pc, #420	@ (adr r3, 8003c90 <_dtoa_r+0x2b0>)
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f7fc fdaa 	bl	8000648 <__aeabi_dmul>
 8003af4:	a368      	add	r3, pc, #416	@ (adr r3, 8003c98 <_dtoa_r+0x2b8>)
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f7fc fbef 	bl	80002dc <__adddf3>
 8003afe:	4604      	mov	r4, r0
 8003b00:	4630      	mov	r0, r6
 8003b02:	460d      	mov	r5, r1
 8003b04:	f7fc fd36 	bl	8000574 <__aeabi_i2d>
 8003b08:	a365      	add	r3, pc, #404	@ (adr r3, 8003ca0 <_dtoa_r+0x2c0>)
 8003b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0e:	f7fc fd9b 	bl	8000648 <__aeabi_dmul>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4620      	mov	r0, r4
 8003b18:	4629      	mov	r1, r5
 8003b1a:	f7fc fbdf 	bl	80002dc <__adddf3>
 8003b1e:	4604      	mov	r4, r0
 8003b20:	460d      	mov	r5, r1
 8003b22:	f7fd f841 	bl	8000ba8 <__aeabi_d2iz>
 8003b26:	2200      	movs	r2, #0
 8003b28:	4607      	mov	r7, r0
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	4629      	mov	r1, r5
 8003b30:	f7fc fffc 	bl	8000b2c <__aeabi_dcmplt>
 8003b34:	b140      	cbz	r0, 8003b48 <_dtoa_r+0x168>
 8003b36:	4638      	mov	r0, r7
 8003b38:	f7fc fd1c 	bl	8000574 <__aeabi_i2d>
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	462b      	mov	r3, r5
 8003b40:	f7fc ffea 	bl	8000b18 <__aeabi_dcmpeq>
 8003b44:	b900      	cbnz	r0, 8003b48 <_dtoa_r+0x168>
 8003b46:	3f01      	subs	r7, #1
 8003b48:	2f16      	cmp	r7, #22
 8003b4a:	d851      	bhi.n	8003bf0 <_dtoa_r+0x210>
 8003b4c:	4b5b      	ldr	r3, [pc, #364]	@ (8003cbc <_dtoa_r+0x2dc>)
 8003b4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003b5a:	f7fc ffe7 	bl	8000b2c <__aeabi_dcmplt>
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d048      	beq.n	8003bf4 <_dtoa_r+0x214>
 8003b62:	3f01      	subs	r7, #1
 8003b64:	2300      	movs	r3, #0
 8003b66:	9312      	str	r3, [sp, #72]	@ 0x48
 8003b68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003b6a:	1b9b      	subs	r3, r3, r6
 8003b6c:	1e5a      	subs	r2, r3, #1
 8003b6e:	bf44      	itt	mi
 8003b70:	f1c3 0801 	rsbmi	r8, r3, #1
 8003b74:	2300      	movmi	r3, #0
 8003b76:	9208      	str	r2, [sp, #32]
 8003b78:	bf54      	ite	pl
 8003b7a:	f04f 0800 	movpl.w	r8, #0
 8003b7e:	9308      	strmi	r3, [sp, #32]
 8003b80:	2f00      	cmp	r7, #0
 8003b82:	db39      	blt.n	8003bf8 <_dtoa_r+0x218>
 8003b84:	9b08      	ldr	r3, [sp, #32]
 8003b86:	970f      	str	r7, [sp, #60]	@ 0x3c
 8003b88:	443b      	add	r3, r7
 8003b8a:	9308      	str	r3, [sp, #32]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b92:	2b09      	cmp	r3, #9
 8003b94:	d864      	bhi.n	8003c60 <_dtoa_r+0x280>
 8003b96:	2b05      	cmp	r3, #5
 8003b98:	bfc4      	itt	gt
 8003b9a:	3b04      	subgt	r3, #4
 8003b9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8003b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ba0:	f1a3 0302 	sub.w	r3, r3, #2
 8003ba4:	bfcc      	ite	gt
 8003ba6:	2400      	movgt	r4, #0
 8003ba8:	2401      	movle	r4, #1
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d863      	bhi.n	8003c76 <_dtoa_r+0x296>
 8003bae:	e8df f003 	tbb	[pc, r3]
 8003bb2:	372a      	.short	0x372a
 8003bb4:	5535      	.short	0x5535
 8003bb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003bba:	441e      	add	r6, r3
 8003bbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	bfc1      	itttt	gt
 8003bc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003bc8:	409f      	lslgt	r7, r3
 8003bca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003bce:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003bd2:	bfd6      	itet	le
 8003bd4:	f1c3 0320 	rsble	r3, r3, #32
 8003bd8:	ea47 0003 	orrgt.w	r0, r7, r3
 8003bdc:	fa04 f003 	lslle.w	r0, r4, r3
 8003be0:	f7fc fcb8 	bl	8000554 <__aeabi_ui2d>
 8003be4:	2201      	movs	r2, #1
 8003be6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003bea:	3e01      	subs	r6, #1
 8003bec:	9214      	str	r2, [sp, #80]	@ 0x50
 8003bee:	e777      	b.n	8003ae0 <_dtoa_r+0x100>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e7b8      	b.n	8003b66 <_dtoa_r+0x186>
 8003bf4:	9012      	str	r0, [sp, #72]	@ 0x48
 8003bf6:	e7b7      	b.n	8003b68 <_dtoa_r+0x188>
 8003bf8:	427b      	negs	r3, r7
 8003bfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	eba8 0807 	sub.w	r8, r8, r7
 8003c02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003c04:	e7c4      	b.n	8003b90 <_dtoa_r+0x1b0>
 8003c06:	2300      	movs	r3, #0
 8003c08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	dc35      	bgt.n	8003c7c <_dtoa_r+0x29c>
 8003c10:	2301      	movs	r3, #1
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	9307      	str	r3, [sp, #28]
 8003c16:	461a      	mov	r2, r3
 8003c18:	920e      	str	r2, [sp, #56]	@ 0x38
 8003c1a:	e00b      	b.n	8003c34 <_dtoa_r+0x254>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e7f3      	b.n	8003c08 <_dtoa_r+0x228>
 8003c20:	2300      	movs	r3, #0
 8003c22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	9307      	str	r3, [sp, #28]
 8003c30:	bfb8      	it	lt
 8003c32:	2301      	movlt	r3, #1
 8003c34:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003c38:	2100      	movs	r1, #0
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	f102 0514 	add.w	r5, r2, #20
 8003c40:	429d      	cmp	r5, r3
 8003c42:	d91f      	bls.n	8003c84 <_dtoa_r+0x2a4>
 8003c44:	6041      	str	r1, [r0, #4]
 8003c46:	4658      	mov	r0, fp
 8003c48:	f000 fd8e 	bl	8004768 <_Balloc>
 8003c4c:	4682      	mov	sl, r0
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d13c      	bne.n	8003ccc <_dtoa_r+0x2ec>
 8003c52:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc0 <_dtoa_r+0x2e0>)
 8003c54:	4602      	mov	r2, r0
 8003c56:	f240 11af 	movw	r1, #431	@ 0x1af
 8003c5a:	e6d8      	b.n	8003a0e <_dtoa_r+0x2e>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e7e0      	b.n	8003c22 <_dtoa_r+0x242>
 8003c60:	2401      	movs	r4, #1
 8003c62:	2300      	movs	r3, #0
 8003c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c66:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003c68:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	9307      	str	r3, [sp, #28]
 8003c70:	2200      	movs	r2, #0
 8003c72:	2312      	movs	r3, #18
 8003c74:	e7d0      	b.n	8003c18 <_dtoa_r+0x238>
 8003c76:	2301      	movs	r3, #1
 8003c78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c7a:	e7f5      	b.n	8003c68 <_dtoa_r+0x288>
 8003c7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	9307      	str	r3, [sp, #28]
 8003c82:	e7d7      	b.n	8003c34 <_dtoa_r+0x254>
 8003c84:	3101      	adds	r1, #1
 8003c86:	0052      	lsls	r2, r2, #1
 8003c88:	e7d8      	b.n	8003c3c <_dtoa_r+0x25c>
 8003c8a:	bf00      	nop
 8003c8c:	f3af 8000 	nop.w
 8003c90:	636f4361 	.word	0x636f4361
 8003c94:	3fd287a7 	.word	0x3fd287a7
 8003c98:	8b60c8b3 	.word	0x8b60c8b3
 8003c9c:	3fc68a28 	.word	0x3fc68a28
 8003ca0:	509f79fb 	.word	0x509f79fb
 8003ca4:	3fd34413 	.word	0x3fd34413
 8003ca8:	08005681 	.word	0x08005681
 8003cac:	08005698 	.word	0x08005698
 8003cb0:	7ff00000 	.word	0x7ff00000
 8003cb4:	08005651 	.word	0x08005651
 8003cb8:	3ff80000 	.word	0x3ff80000
 8003cbc:	08005790 	.word	0x08005790
 8003cc0:	080056f0 	.word	0x080056f0
 8003cc4:	0800567d 	.word	0x0800567d
 8003cc8:	08005650 	.word	0x08005650
 8003ccc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003cd0:	6018      	str	r0, [r3, #0]
 8003cd2:	9b07      	ldr	r3, [sp, #28]
 8003cd4:	2b0e      	cmp	r3, #14
 8003cd6:	f200 80a4 	bhi.w	8003e22 <_dtoa_r+0x442>
 8003cda:	2c00      	cmp	r4, #0
 8003cdc:	f000 80a1 	beq.w	8003e22 <_dtoa_r+0x442>
 8003ce0:	2f00      	cmp	r7, #0
 8003ce2:	dd33      	ble.n	8003d4c <_dtoa_r+0x36c>
 8003ce4:	4bad      	ldr	r3, [pc, #692]	@ (8003f9c <_dtoa_r+0x5bc>)
 8003ce6:	f007 020f 	and.w	r2, r7, #15
 8003cea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cee:	ed93 7b00 	vldr	d7, [r3]
 8003cf2:	05f8      	lsls	r0, r7, #23
 8003cf4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003cf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003cfc:	d516      	bpl.n	8003d2c <_dtoa_r+0x34c>
 8003cfe:	4ba8      	ldr	r3, [pc, #672]	@ (8003fa0 <_dtoa_r+0x5c0>)
 8003d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d08:	f7fc fdc8 	bl	800089c <__aeabi_ddiv>
 8003d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d10:	f004 040f 	and.w	r4, r4, #15
 8003d14:	2603      	movs	r6, #3
 8003d16:	4da2      	ldr	r5, [pc, #648]	@ (8003fa0 <_dtoa_r+0x5c0>)
 8003d18:	b954      	cbnz	r4, 8003d30 <_dtoa_r+0x350>
 8003d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d22:	f7fc fdbb 	bl	800089c <__aeabi_ddiv>
 8003d26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d2a:	e028      	b.n	8003d7e <_dtoa_r+0x39e>
 8003d2c:	2602      	movs	r6, #2
 8003d2e:	e7f2      	b.n	8003d16 <_dtoa_r+0x336>
 8003d30:	07e1      	lsls	r1, r4, #31
 8003d32:	d508      	bpl.n	8003d46 <_dtoa_r+0x366>
 8003d34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d3c:	f7fc fc84 	bl	8000648 <__aeabi_dmul>
 8003d40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d44:	3601      	adds	r6, #1
 8003d46:	1064      	asrs	r4, r4, #1
 8003d48:	3508      	adds	r5, #8
 8003d4a:	e7e5      	b.n	8003d18 <_dtoa_r+0x338>
 8003d4c:	f000 80d2 	beq.w	8003ef4 <_dtoa_r+0x514>
 8003d50:	427c      	negs	r4, r7
 8003d52:	4b92      	ldr	r3, [pc, #584]	@ (8003f9c <_dtoa_r+0x5bc>)
 8003d54:	4d92      	ldr	r5, [pc, #584]	@ (8003fa0 <_dtoa_r+0x5c0>)
 8003d56:	f004 020f 	and.w	r2, r4, #15
 8003d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d66:	f7fc fc6f 	bl	8000648 <__aeabi_dmul>
 8003d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d6e:	1124      	asrs	r4, r4, #4
 8003d70:	2300      	movs	r3, #0
 8003d72:	2602      	movs	r6, #2
 8003d74:	2c00      	cmp	r4, #0
 8003d76:	f040 80b2 	bne.w	8003ede <_dtoa_r+0x4fe>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1d3      	bne.n	8003d26 <_dtoa_r+0x346>
 8003d7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003d80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80b7 	beq.w	8003ef8 <_dtoa_r+0x518>
 8003d8a:	4b86      	ldr	r3, [pc, #536]	@ (8003fa4 <_dtoa_r+0x5c4>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	4620      	mov	r0, r4
 8003d90:	4629      	mov	r1, r5
 8003d92:	f7fc fecb 	bl	8000b2c <__aeabi_dcmplt>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	f000 80ae 	beq.w	8003ef8 <_dtoa_r+0x518>
 8003d9c:	9b07      	ldr	r3, [sp, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 80aa 	beq.w	8003ef8 <_dtoa_r+0x518>
 8003da4:	9b00      	ldr	r3, [sp, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	dd37      	ble.n	8003e1a <_dtoa_r+0x43a>
 8003daa:	1e7b      	subs	r3, r7, #1
 8003dac:	9304      	str	r3, [sp, #16]
 8003dae:	4620      	mov	r0, r4
 8003db0:	4b7d      	ldr	r3, [pc, #500]	@ (8003fa8 <_dtoa_r+0x5c8>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	4629      	mov	r1, r5
 8003db6:	f7fc fc47 	bl	8000648 <__aeabi_dmul>
 8003dba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003dbe:	9c00      	ldr	r4, [sp, #0]
 8003dc0:	3601      	adds	r6, #1
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	f7fc fbd6 	bl	8000574 <__aeabi_i2d>
 8003dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dcc:	f7fc fc3c 	bl	8000648 <__aeabi_dmul>
 8003dd0:	4b76      	ldr	r3, [pc, #472]	@ (8003fac <_dtoa_r+0x5cc>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f7fc fa82 	bl	80002dc <__adddf3>
 8003dd8:	4605      	mov	r5, r0
 8003dda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003dde:	2c00      	cmp	r4, #0
 8003de0:	f040 808d 	bne.w	8003efe <_dtoa_r+0x51e>
 8003de4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003de8:	4b71      	ldr	r3, [pc, #452]	@ (8003fb0 <_dtoa_r+0x5d0>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	f7fc fa74 	bl	80002d8 <__aeabi_dsub>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003df8:	462a      	mov	r2, r5
 8003dfa:	4633      	mov	r3, r6
 8003dfc:	f7fc feb4 	bl	8000b68 <__aeabi_dcmpgt>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	f040 828b 	bne.w	800431c <_dtoa_r+0x93c>
 8003e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e0a:	462a      	mov	r2, r5
 8003e0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003e10:	f7fc fe8c 	bl	8000b2c <__aeabi_dcmplt>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	f040 8128 	bne.w	800406a <_dtoa_r+0x68a>
 8003e1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003e1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003e22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f2c0 815a 	blt.w	80040de <_dtoa_r+0x6fe>
 8003e2a:	2f0e      	cmp	r7, #14
 8003e2c:	f300 8157 	bgt.w	80040de <_dtoa_r+0x6fe>
 8003e30:	4b5a      	ldr	r3, [pc, #360]	@ (8003f9c <_dtoa_r+0x5bc>)
 8003e32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e36:	ed93 7b00 	vldr	d7, [r3]
 8003e3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	ed8d 7b00 	vstr	d7, [sp]
 8003e42:	da03      	bge.n	8003e4c <_dtoa_r+0x46c>
 8003e44:	9b07      	ldr	r3, [sp, #28]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f340 8101 	ble.w	800404e <_dtoa_r+0x66e>
 8003e4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003e50:	4656      	mov	r6, sl
 8003e52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e56:	4620      	mov	r0, r4
 8003e58:	4629      	mov	r1, r5
 8003e5a:	f7fc fd1f 	bl	800089c <__aeabi_ddiv>
 8003e5e:	f7fc fea3 	bl	8000ba8 <__aeabi_d2iz>
 8003e62:	4680      	mov	r8, r0
 8003e64:	f7fc fb86 	bl	8000574 <__aeabi_i2d>
 8003e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e6c:	f7fc fbec 	bl	8000648 <__aeabi_dmul>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4620      	mov	r0, r4
 8003e76:	4629      	mov	r1, r5
 8003e78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003e7c:	f7fc fa2c 	bl	80002d8 <__aeabi_dsub>
 8003e80:	f806 4b01 	strb.w	r4, [r6], #1
 8003e84:	9d07      	ldr	r5, [sp, #28]
 8003e86:	eba6 040a 	sub.w	r4, r6, sl
 8003e8a:	42a5      	cmp	r5, r4
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	f040 8117 	bne.w	80040c2 <_dtoa_r+0x6e2>
 8003e94:	f7fc fa22 	bl	80002dc <__adddf3>
 8003e98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	460d      	mov	r5, r1
 8003ea0:	f7fc fe62 	bl	8000b68 <__aeabi_dcmpgt>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	f040 80f9 	bne.w	800409c <_dtoa_r+0x6bc>
 8003eaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003eae:	4620      	mov	r0, r4
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	f7fc fe31 	bl	8000b18 <__aeabi_dcmpeq>
 8003eb6:	b118      	cbz	r0, 8003ec0 <_dtoa_r+0x4e0>
 8003eb8:	f018 0f01 	tst.w	r8, #1
 8003ebc:	f040 80ee 	bne.w	800409c <_dtoa_r+0x6bc>
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	4658      	mov	r0, fp
 8003ec4:	f000 fc90 	bl	80047e8 <_Bfree>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	7033      	strb	r3, [r6, #0]
 8003ecc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003ece:	3701      	adds	r7, #1
 8003ed0:	601f      	str	r7, [r3, #0]
 8003ed2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 831d 	beq.w	8004514 <_dtoa_r+0xb34>
 8003eda:	601e      	str	r6, [r3, #0]
 8003edc:	e31a      	b.n	8004514 <_dtoa_r+0xb34>
 8003ede:	07e2      	lsls	r2, r4, #31
 8003ee0:	d505      	bpl.n	8003eee <_dtoa_r+0x50e>
 8003ee2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003ee6:	f7fc fbaf 	bl	8000648 <__aeabi_dmul>
 8003eea:	3601      	adds	r6, #1
 8003eec:	2301      	movs	r3, #1
 8003eee:	1064      	asrs	r4, r4, #1
 8003ef0:	3508      	adds	r5, #8
 8003ef2:	e73f      	b.n	8003d74 <_dtoa_r+0x394>
 8003ef4:	2602      	movs	r6, #2
 8003ef6:	e742      	b.n	8003d7e <_dtoa_r+0x39e>
 8003ef8:	9c07      	ldr	r4, [sp, #28]
 8003efa:	9704      	str	r7, [sp, #16]
 8003efc:	e761      	b.n	8003dc2 <_dtoa_r+0x3e2>
 8003efe:	4b27      	ldr	r3, [pc, #156]	@ (8003f9c <_dtoa_r+0x5bc>)
 8003f00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003f02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003f06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003f0a:	4454      	add	r4, sl
 8003f0c:	2900      	cmp	r1, #0
 8003f0e:	d053      	beq.n	8003fb8 <_dtoa_r+0x5d8>
 8003f10:	4928      	ldr	r1, [pc, #160]	@ (8003fb4 <_dtoa_r+0x5d4>)
 8003f12:	2000      	movs	r0, #0
 8003f14:	f7fc fcc2 	bl	800089c <__aeabi_ddiv>
 8003f18:	4633      	mov	r3, r6
 8003f1a:	462a      	mov	r2, r5
 8003f1c:	f7fc f9dc 	bl	80002d8 <__aeabi_dsub>
 8003f20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003f24:	4656      	mov	r6, sl
 8003f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f2a:	f7fc fe3d 	bl	8000ba8 <__aeabi_d2iz>
 8003f2e:	4605      	mov	r5, r0
 8003f30:	f7fc fb20 	bl	8000574 <__aeabi_i2d>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f3c:	f7fc f9cc 	bl	80002d8 <__aeabi_dsub>
 8003f40:	3530      	adds	r5, #48	@ 0x30
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f4a:	f806 5b01 	strb.w	r5, [r6], #1
 8003f4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003f52:	f7fc fdeb 	bl	8000b2c <__aeabi_dcmplt>
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d171      	bne.n	800403e <_dtoa_r+0x65e>
 8003f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f5e:	4911      	ldr	r1, [pc, #68]	@ (8003fa4 <_dtoa_r+0x5c4>)
 8003f60:	2000      	movs	r0, #0
 8003f62:	f7fc f9b9 	bl	80002d8 <__aeabi_dsub>
 8003f66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003f6a:	f7fc fddf 	bl	8000b2c <__aeabi_dcmplt>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	f040 8095 	bne.w	800409e <_dtoa_r+0x6be>
 8003f74:	42a6      	cmp	r6, r4
 8003f76:	f43f af50 	beq.w	8003e1a <_dtoa_r+0x43a>
 8003f7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <_dtoa_r+0x5c8>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	f7fc fb61 	bl	8000648 <__aeabi_dmul>
 8003f86:	4b08      	ldr	r3, [pc, #32]	@ (8003fa8 <_dtoa_r+0x5c8>)
 8003f88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f92:	f7fc fb59 	bl	8000648 <__aeabi_dmul>
 8003f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f9a:	e7c4      	b.n	8003f26 <_dtoa_r+0x546>
 8003f9c:	08005790 	.word	0x08005790
 8003fa0:	08005768 	.word	0x08005768
 8003fa4:	3ff00000 	.word	0x3ff00000
 8003fa8:	40240000 	.word	0x40240000
 8003fac:	401c0000 	.word	0x401c0000
 8003fb0:	40140000 	.word	0x40140000
 8003fb4:	3fe00000 	.word	0x3fe00000
 8003fb8:	4631      	mov	r1, r6
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f7fc fb44 	bl	8000648 <__aeabi_dmul>
 8003fc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003fc4:	9415      	str	r4, [sp, #84]	@ 0x54
 8003fc6:	4656      	mov	r6, sl
 8003fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fcc:	f7fc fdec 	bl	8000ba8 <__aeabi_d2iz>
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	f7fc facf 	bl	8000574 <__aeabi_i2d>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fde:	f7fc f97b 	bl	80002d8 <__aeabi_dsub>
 8003fe2:	3530      	adds	r5, #48	@ 0x30
 8003fe4:	f806 5b01 	strb.w	r5, [r6], #1
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	42a6      	cmp	r6, r4
 8003fee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	d124      	bne.n	8004042 <_dtoa_r+0x662>
 8003ff8:	4bac      	ldr	r3, [pc, #688]	@ (80042ac <_dtoa_r+0x8cc>)
 8003ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003ffe:	f7fc f96d 	bl	80002dc <__adddf3>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800400a:	f7fc fdad 	bl	8000b68 <__aeabi_dcmpgt>
 800400e:	2800      	cmp	r0, #0
 8004010:	d145      	bne.n	800409e <_dtoa_r+0x6be>
 8004012:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004016:	49a5      	ldr	r1, [pc, #660]	@ (80042ac <_dtoa_r+0x8cc>)
 8004018:	2000      	movs	r0, #0
 800401a:	f7fc f95d 	bl	80002d8 <__aeabi_dsub>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004026:	f7fc fd81 	bl	8000b2c <__aeabi_dcmplt>
 800402a:	2800      	cmp	r0, #0
 800402c:	f43f aef5 	beq.w	8003e1a <_dtoa_r+0x43a>
 8004030:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004032:	1e73      	subs	r3, r6, #1
 8004034:	9315      	str	r3, [sp, #84]	@ 0x54
 8004036:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800403a:	2b30      	cmp	r3, #48	@ 0x30
 800403c:	d0f8      	beq.n	8004030 <_dtoa_r+0x650>
 800403e:	9f04      	ldr	r7, [sp, #16]
 8004040:	e73e      	b.n	8003ec0 <_dtoa_r+0x4e0>
 8004042:	4b9b      	ldr	r3, [pc, #620]	@ (80042b0 <_dtoa_r+0x8d0>)
 8004044:	f7fc fb00 	bl	8000648 <__aeabi_dmul>
 8004048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800404c:	e7bc      	b.n	8003fc8 <_dtoa_r+0x5e8>
 800404e:	d10c      	bne.n	800406a <_dtoa_r+0x68a>
 8004050:	4b98      	ldr	r3, [pc, #608]	@ (80042b4 <_dtoa_r+0x8d4>)
 8004052:	2200      	movs	r2, #0
 8004054:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004058:	f7fc faf6 	bl	8000648 <__aeabi_dmul>
 800405c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004060:	f7fc fd78 	bl	8000b54 <__aeabi_dcmpge>
 8004064:	2800      	cmp	r0, #0
 8004066:	f000 8157 	beq.w	8004318 <_dtoa_r+0x938>
 800406a:	2400      	movs	r4, #0
 800406c:	4625      	mov	r5, r4
 800406e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004070:	43db      	mvns	r3, r3
 8004072:	9304      	str	r3, [sp, #16]
 8004074:	4656      	mov	r6, sl
 8004076:	2700      	movs	r7, #0
 8004078:	4621      	mov	r1, r4
 800407a:	4658      	mov	r0, fp
 800407c:	f000 fbb4 	bl	80047e8 <_Bfree>
 8004080:	2d00      	cmp	r5, #0
 8004082:	d0dc      	beq.n	800403e <_dtoa_r+0x65e>
 8004084:	b12f      	cbz	r7, 8004092 <_dtoa_r+0x6b2>
 8004086:	42af      	cmp	r7, r5
 8004088:	d003      	beq.n	8004092 <_dtoa_r+0x6b2>
 800408a:	4639      	mov	r1, r7
 800408c:	4658      	mov	r0, fp
 800408e:	f000 fbab 	bl	80047e8 <_Bfree>
 8004092:	4629      	mov	r1, r5
 8004094:	4658      	mov	r0, fp
 8004096:	f000 fba7 	bl	80047e8 <_Bfree>
 800409a:	e7d0      	b.n	800403e <_dtoa_r+0x65e>
 800409c:	9704      	str	r7, [sp, #16]
 800409e:	4633      	mov	r3, r6
 80040a0:	461e      	mov	r6, r3
 80040a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80040a6:	2a39      	cmp	r2, #57	@ 0x39
 80040a8:	d107      	bne.n	80040ba <_dtoa_r+0x6da>
 80040aa:	459a      	cmp	sl, r3
 80040ac:	d1f8      	bne.n	80040a0 <_dtoa_r+0x6c0>
 80040ae:	9a04      	ldr	r2, [sp, #16]
 80040b0:	3201      	adds	r2, #1
 80040b2:	9204      	str	r2, [sp, #16]
 80040b4:	2230      	movs	r2, #48	@ 0x30
 80040b6:	f88a 2000 	strb.w	r2, [sl]
 80040ba:	781a      	ldrb	r2, [r3, #0]
 80040bc:	3201      	adds	r2, #1
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	e7bd      	b.n	800403e <_dtoa_r+0x65e>
 80040c2:	4b7b      	ldr	r3, [pc, #492]	@ (80042b0 <_dtoa_r+0x8d0>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	f7fc fabf 	bl	8000648 <__aeabi_dmul>
 80040ca:	2200      	movs	r2, #0
 80040cc:	2300      	movs	r3, #0
 80040ce:	4604      	mov	r4, r0
 80040d0:	460d      	mov	r5, r1
 80040d2:	f7fc fd21 	bl	8000b18 <__aeabi_dcmpeq>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	f43f aebb 	beq.w	8003e52 <_dtoa_r+0x472>
 80040dc:	e6f0      	b.n	8003ec0 <_dtoa_r+0x4e0>
 80040de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80040e0:	2a00      	cmp	r2, #0
 80040e2:	f000 80db 	beq.w	800429c <_dtoa_r+0x8bc>
 80040e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040e8:	2a01      	cmp	r2, #1
 80040ea:	f300 80bf 	bgt.w	800426c <_dtoa_r+0x88c>
 80040ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80040f0:	2a00      	cmp	r2, #0
 80040f2:	f000 80b7 	beq.w	8004264 <_dtoa_r+0x884>
 80040f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80040fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80040fc:	4646      	mov	r6, r8
 80040fe:	9a08      	ldr	r2, [sp, #32]
 8004100:	2101      	movs	r1, #1
 8004102:	441a      	add	r2, r3
 8004104:	4658      	mov	r0, fp
 8004106:	4498      	add	r8, r3
 8004108:	9208      	str	r2, [sp, #32]
 800410a:	f000 fc21 	bl	8004950 <__i2b>
 800410e:	4605      	mov	r5, r0
 8004110:	b15e      	cbz	r6, 800412a <_dtoa_r+0x74a>
 8004112:	9b08      	ldr	r3, [sp, #32]
 8004114:	2b00      	cmp	r3, #0
 8004116:	dd08      	ble.n	800412a <_dtoa_r+0x74a>
 8004118:	42b3      	cmp	r3, r6
 800411a:	9a08      	ldr	r2, [sp, #32]
 800411c:	bfa8      	it	ge
 800411e:	4633      	movge	r3, r6
 8004120:	eba8 0803 	sub.w	r8, r8, r3
 8004124:	1af6      	subs	r6, r6, r3
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	9308      	str	r3, [sp, #32]
 800412a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800412c:	b1f3      	cbz	r3, 800416c <_dtoa_r+0x78c>
 800412e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80b7 	beq.w	80042a4 <_dtoa_r+0x8c4>
 8004136:	b18c      	cbz	r4, 800415c <_dtoa_r+0x77c>
 8004138:	4629      	mov	r1, r5
 800413a:	4622      	mov	r2, r4
 800413c:	4658      	mov	r0, fp
 800413e:	f000 fcc7 	bl	8004ad0 <__pow5mult>
 8004142:	464a      	mov	r2, r9
 8004144:	4601      	mov	r1, r0
 8004146:	4605      	mov	r5, r0
 8004148:	4658      	mov	r0, fp
 800414a:	f000 fc17 	bl	800497c <__multiply>
 800414e:	4649      	mov	r1, r9
 8004150:	9004      	str	r0, [sp, #16]
 8004152:	4658      	mov	r0, fp
 8004154:	f000 fb48 	bl	80047e8 <_Bfree>
 8004158:	9b04      	ldr	r3, [sp, #16]
 800415a:	4699      	mov	r9, r3
 800415c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800415e:	1b1a      	subs	r2, r3, r4
 8004160:	d004      	beq.n	800416c <_dtoa_r+0x78c>
 8004162:	4649      	mov	r1, r9
 8004164:	4658      	mov	r0, fp
 8004166:	f000 fcb3 	bl	8004ad0 <__pow5mult>
 800416a:	4681      	mov	r9, r0
 800416c:	2101      	movs	r1, #1
 800416e:	4658      	mov	r0, fp
 8004170:	f000 fbee 	bl	8004950 <__i2b>
 8004174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004176:	4604      	mov	r4, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 81cf 	beq.w	800451c <_dtoa_r+0xb3c>
 800417e:	461a      	mov	r2, r3
 8004180:	4601      	mov	r1, r0
 8004182:	4658      	mov	r0, fp
 8004184:	f000 fca4 	bl	8004ad0 <__pow5mult>
 8004188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800418a:	2b01      	cmp	r3, #1
 800418c:	4604      	mov	r4, r0
 800418e:	f300 8095 	bgt.w	80042bc <_dtoa_r+0x8dc>
 8004192:	9b02      	ldr	r3, [sp, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	f040 8087 	bne.w	80042a8 <_dtoa_r+0x8c8>
 800419a:	9b03      	ldr	r3, [sp, #12]
 800419c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f040 8089 	bne.w	80042b8 <_dtoa_r+0x8d8>
 80041a6:	9b03      	ldr	r3, [sp, #12]
 80041a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041ac:	0d1b      	lsrs	r3, r3, #20
 80041ae:	051b      	lsls	r3, r3, #20
 80041b0:	b12b      	cbz	r3, 80041be <_dtoa_r+0x7de>
 80041b2:	9b08      	ldr	r3, [sp, #32]
 80041b4:	3301      	adds	r3, #1
 80041b6:	9308      	str	r3, [sp, #32]
 80041b8:	f108 0801 	add.w	r8, r8, #1
 80041bc:	2301      	movs	r3, #1
 80041be:	930a      	str	r3, [sp, #40]	@ 0x28
 80041c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 81b0 	beq.w	8004528 <_dtoa_r+0xb48>
 80041c8:	6923      	ldr	r3, [r4, #16]
 80041ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80041ce:	6918      	ldr	r0, [r3, #16]
 80041d0:	f000 fb72 	bl	80048b8 <__hi0bits>
 80041d4:	f1c0 0020 	rsb	r0, r0, #32
 80041d8:	9b08      	ldr	r3, [sp, #32]
 80041da:	4418      	add	r0, r3
 80041dc:	f010 001f 	ands.w	r0, r0, #31
 80041e0:	d077      	beq.n	80042d2 <_dtoa_r+0x8f2>
 80041e2:	f1c0 0320 	rsb	r3, r0, #32
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	dd6b      	ble.n	80042c2 <_dtoa_r+0x8e2>
 80041ea:	9b08      	ldr	r3, [sp, #32]
 80041ec:	f1c0 001c 	rsb	r0, r0, #28
 80041f0:	4403      	add	r3, r0
 80041f2:	4480      	add	r8, r0
 80041f4:	4406      	add	r6, r0
 80041f6:	9308      	str	r3, [sp, #32]
 80041f8:	f1b8 0f00 	cmp.w	r8, #0
 80041fc:	dd05      	ble.n	800420a <_dtoa_r+0x82a>
 80041fe:	4649      	mov	r1, r9
 8004200:	4642      	mov	r2, r8
 8004202:	4658      	mov	r0, fp
 8004204:	f000 fcbe 	bl	8004b84 <__lshift>
 8004208:	4681      	mov	r9, r0
 800420a:	9b08      	ldr	r3, [sp, #32]
 800420c:	2b00      	cmp	r3, #0
 800420e:	dd05      	ble.n	800421c <_dtoa_r+0x83c>
 8004210:	4621      	mov	r1, r4
 8004212:	461a      	mov	r2, r3
 8004214:	4658      	mov	r0, fp
 8004216:	f000 fcb5 	bl	8004b84 <__lshift>
 800421a:	4604      	mov	r4, r0
 800421c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800421e:	2b00      	cmp	r3, #0
 8004220:	d059      	beq.n	80042d6 <_dtoa_r+0x8f6>
 8004222:	4621      	mov	r1, r4
 8004224:	4648      	mov	r0, r9
 8004226:	f000 fd19 	bl	8004c5c <__mcmp>
 800422a:	2800      	cmp	r0, #0
 800422c:	da53      	bge.n	80042d6 <_dtoa_r+0x8f6>
 800422e:	1e7b      	subs	r3, r7, #1
 8004230:	9304      	str	r3, [sp, #16]
 8004232:	4649      	mov	r1, r9
 8004234:	2300      	movs	r3, #0
 8004236:	220a      	movs	r2, #10
 8004238:	4658      	mov	r0, fp
 800423a:	f000 faf7 	bl	800482c <__multadd>
 800423e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004240:	4681      	mov	r9, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8172 	beq.w	800452c <_dtoa_r+0xb4c>
 8004248:	2300      	movs	r3, #0
 800424a:	4629      	mov	r1, r5
 800424c:	220a      	movs	r2, #10
 800424e:	4658      	mov	r0, fp
 8004250:	f000 faec 	bl	800482c <__multadd>
 8004254:	9b00      	ldr	r3, [sp, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	4605      	mov	r5, r0
 800425a:	dc67      	bgt.n	800432c <_dtoa_r+0x94c>
 800425c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800425e:	2b02      	cmp	r3, #2
 8004260:	dc41      	bgt.n	80042e6 <_dtoa_r+0x906>
 8004262:	e063      	b.n	800432c <_dtoa_r+0x94c>
 8004264:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004266:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800426a:	e746      	b.n	80040fa <_dtoa_r+0x71a>
 800426c:	9b07      	ldr	r3, [sp, #28]
 800426e:	1e5c      	subs	r4, r3, #1
 8004270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004272:	42a3      	cmp	r3, r4
 8004274:	bfbf      	itttt	lt
 8004276:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004278:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800427a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800427c:	1ae3      	sublt	r3, r4, r3
 800427e:	bfb4      	ite	lt
 8004280:	18d2      	addlt	r2, r2, r3
 8004282:	1b1c      	subge	r4, r3, r4
 8004284:	9b07      	ldr	r3, [sp, #28]
 8004286:	bfbc      	itt	lt
 8004288:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800428a:	2400      	movlt	r4, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	bfb5      	itete	lt
 8004290:	eba8 0603 	sublt.w	r6, r8, r3
 8004294:	9b07      	ldrge	r3, [sp, #28]
 8004296:	2300      	movlt	r3, #0
 8004298:	4646      	movge	r6, r8
 800429a:	e730      	b.n	80040fe <_dtoa_r+0x71e>
 800429c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800429e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80042a0:	4646      	mov	r6, r8
 80042a2:	e735      	b.n	8004110 <_dtoa_r+0x730>
 80042a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80042a6:	e75c      	b.n	8004162 <_dtoa_r+0x782>
 80042a8:	2300      	movs	r3, #0
 80042aa:	e788      	b.n	80041be <_dtoa_r+0x7de>
 80042ac:	3fe00000 	.word	0x3fe00000
 80042b0:	40240000 	.word	0x40240000
 80042b4:	40140000 	.word	0x40140000
 80042b8:	9b02      	ldr	r3, [sp, #8]
 80042ba:	e780      	b.n	80041be <_dtoa_r+0x7de>
 80042bc:	2300      	movs	r3, #0
 80042be:	930a      	str	r3, [sp, #40]	@ 0x28
 80042c0:	e782      	b.n	80041c8 <_dtoa_r+0x7e8>
 80042c2:	d099      	beq.n	80041f8 <_dtoa_r+0x818>
 80042c4:	9a08      	ldr	r2, [sp, #32]
 80042c6:	331c      	adds	r3, #28
 80042c8:	441a      	add	r2, r3
 80042ca:	4498      	add	r8, r3
 80042cc:	441e      	add	r6, r3
 80042ce:	9208      	str	r2, [sp, #32]
 80042d0:	e792      	b.n	80041f8 <_dtoa_r+0x818>
 80042d2:	4603      	mov	r3, r0
 80042d4:	e7f6      	b.n	80042c4 <_dtoa_r+0x8e4>
 80042d6:	9b07      	ldr	r3, [sp, #28]
 80042d8:	9704      	str	r7, [sp, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	dc20      	bgt.n	8004320 <_dtoa_r+0x940>
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	dd1e      	ble.n	8004324 <_dtoa_r+0x944>
 80042e6:	9b00      	ldr	r3, [sp, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f47f aec0 	bne.w	800406e <_dtoa_r+0x68e>
 80042ee:	4621      	mov	r1, r4
 80042f0:	2205      	movs	r2, #5
 80042f2:	4658      	mov	r0, fp
 80042f4:	f000 fa9a 	bl	800482c <__multadd>
 80042f8:	4601      	mov	r1, r0
 80042fa:	4604      	mov	r4, r0
 80042fc:	4648      	mov	r0, r9
 80042fe:	f000 fcad 	bl	8004c5c <__mcmp>
 8004302:	2800      	cmp	r0, #0
 8004304:	f77f aeb3 	ble.w	800406e <_dtoa_r+0x68e>
 8004308:	4656      	mov	r6, sl
 800430a:	2331      	movs	r3, #49	@ 0x31
 800430c:	f806 3b01 	strb.w	r3, [r6], #1
 8004310:	9b04      	ldr	r3, [sp, #16]
 8004312:	3301      	adds	r3, #1
 8004314:	9304      	str	r3, [sp, #16]
 8004316:	e6ae      	b.n	8004076 <_dtoa_r+0x696>
 8004318:	9c07      	ldr	r4, [sp, #28]
 800431a:	9704      	str	r7, [sp, #16]
 800431c:	4625      	mov	r5, r4
 800431e:	e7f3      	b.n	8004308 <_dtoa_r+0x928>
 8004320:	9b07      	ldr	r3, [sp, #28]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8104 	beq.w	8004534 <_dtoa_r+0xb54>
 800432c:	2e00      	cmp	r6, #0
 800432e:	dd05      	ble.n	800433c <_dtoa_r+0x95c>
 8004330:	4629      	mov	r1, r5
 8004332:	4632      	mov	r2, r6
 8004334:	4658      	mov	r0, fp
 8004336:	f000 fc25 	bl	8004b84 <__lshift>
 800433a:	4605      	mov	r5, r0
 800433c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d05a      	beq.n	80043f8 <_dtoa_r+0xa18>
 8004342:	6869      	ldr	r1, [r5, #4]
 8004344:	4658      	mov	r0, fp
 8004346:	f000 fa0f 	bl	8004768 <_Balloc>
 800434a:	4606      	mov	r6, r0
 800434c:	b928      	cbnz	r0, 800435a <_dtoa_r+0x97a>
 800434e:	4b84      	ldr	r3, [pc, #528]	@ (8004560 <_dtoa_r+0xb80>)
 8004350:	4602      	mov	r2, r0
 8004352:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004356:	f7ff bb5a 	b.w	8003a0e <_dtoa_r+0x2e>
 800435a:	692a      	ldr	r2, [r5, #16]
 800435c:	3202      	adds	r2, #2
 800435e:	0092      	lsls	r2, r2, #2
 8004360:	f105 010c 	add.w	r1, r5, #12
 8004364:	300c      	adds	r0, #12
 8004366:	f000 fe3d 	bl	8004fe4 <memcpy>
 800436a:	2201      	movs	r2, #1
 800436c:	4631      	mov	r1, r6
 800436e:	4658      	mov	r0, fp
 8004370:	f000 fc08 	bl	8004b84 <__lshift>
 8004374:	f10a 0301 	add.w	r3, sl, #1
 8004378:	9307      	str	r3, [sp, #28]
 800437a:	9b00      	ldr	r3, [sp, #0]
 800437c:	4453      	add	r3, sl
 800437e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004380:	9b02      	ldr	r3, [sp, #8]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	462f      	mov	r7, r5
 8004388:	930a      	str	r3, [sp, #40]	@ 0x28
 800438a:	4605      	mov	r5, r0
 800438c:	9b07      	ldr	r3, [sp, #28]
 800438e:	4621      	mov	r1, r4
 8004390:	3b01      	subs	r3, #1
 8004392:	4648      	mov	r0, r9
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	f7ff fa98 	bl	80038ca <quorem>
 800439a:	4639      	mov	r1, r7
 800439c:	9002      	str	r0, [sp, #8]
 800439e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80043a2:	4648      	mov	r0, r9
 80043a4:	f000 fc5a 	bl	8004c5c <__mcmp>
 80043a8:	462a      	mov	r2, r5
 80043aa:	9008      	str	r0, [sp, #32]
 80043ac:	4621      	mov	r1, r4
 80043ae:	4658      	mov	r0, fp
 80043b0:	f000 fc70 	bl	8004c94 <__mdiff>
 80043b4:	68c2      	ldr	r2, [r0, #12]
 80043b6:	4606      	mov	r6, r0
 80043b8:	bb02      	cbnz	r2, 80043fc <_dtoa_r+0xa1c>
 80043ba:	4601      	mov	r1, r0
 80043bc:	4648      	mov	r0, r9
 80043be:	f000 fc4d 	bl	8004c5c <__mcmp>
 80043c2:	4602      	mov	r2, r0
 80043c4:	4631      	mov	r1, r6
 80043c6:	4658      	mov	r0, fp
 80043c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80043ca:	f000 fa0d 	bl	80047e8 <_Bfree>
 80043ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80043d2:	9e07      	ldr	r6, [sp, #28]
 80043d4:	ea43 0102 	orr.w	r1, r3, r2
 80043d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043da:	4319      	orrs	r1, r3
 80043dc:	d110      	bne.n	8004400 <_dtoa_r+0xa20>
 80043de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80043e2:	d029      	beq.n	8004438 <_dtoa_r+0xa58>
 80043e4:	9b08      	ldr	r3, [sp, #32]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	dd02      	ble.n	80043f0 <_dtoa_r+0xa10>
 80043ea:	9b02      	ldr	r3, [sp, #8]
 80043ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80043f0:	9b00      	ldr	r3, [sp, #0]
 80043f2:	f883 8000 	strb.w	r8, [r3]
 80043f6:	e63f      	b.n	8004078 <_dtoa_r+0x698>
 80043f8:	4628      	mov	r0, r5
 80043fa:	e7bb      	b.n	8004374 <_dtoa_r+0x994>
 80043fc:	2201      	movs	r2, #1
 80043fe:	e7e1      	b.n	80043c4 <_dtoa_r+0x9e4>
 8004400:	9b08      	ldr	r3, [sp, #32]
 8004402:	2b00      	cmp	r3, #0
 8004404:	db04      	blt.n	8004410 <_dtoa_r+0xa30>
 8004406:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004408:	430b      	orrs	r3, r1
 800440a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800440c:	430b      	orrs	r3, r1
 800440e:	d120      	bne.n	8004452 <_dtoa_r+0xa72>
 8004410:	2a00      	cmp	r2, #0
 8004412:	dded      	ble.n	80043f0 <_dtoa_r+0xa10>
 8004414:	4649      	mov	r1, r9
 8004416:	2201      	movs	r2, #1
 8004418:	4658      	mov	r0, fp
 800441a:	f000 fbb3 	bl	8004b84 <__lshift>
 800441e:	4621      	mov	r1, r4
 8004420:	4681      	mov	r9, r0
 8004422:	f000 fc1b 	bl	8004c5c <__mcmp>
 8004426:	2800      	cmp	r0, #0
 8004428:	dc03      	bgt.n	8004432 <_dtoa_r+0xa52>
 800442a:	d1e1      	bne.n	80043f0 <_dtoa_r+0xa10>
 800442c:	f018 0f01 	tst.w	r8, #1
 8004430:	d0de      	beq.n	80043f0 <_dtoa_r+0xa10>
 8004432:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004436:	d1d8      	bne.n	80043ea <_dtoa_r+0xa0a>
 8004438:	9a00      	ldr	r2, [sp, #0]
 800443a:	2339      	movs	r3, #57	@ 0x39
 800443c:	7013      	strb	r3, [r2, #0]
 800443e:	4633      	mov	r3, r6
 8004440:	461e      	mov	r6, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004448:	2a39      	cmp	r2, #57	@ 0x39
 800444a:	d052      	beq.n	80044f2 <_dtoa_r+0xb12>
 800444c:	3201      	adds	r2, #1
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	e612      	b.n	8004078 <_dtoa_r+0x698>
 8004452:	2a00      	cmp	r2, #0
 8004454:	dd07      	ble.n	8004466 <_dtoa_r+0xa86>
 8004456:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800445a:	d0ed      	beq.n	8004438 <_dtoa_r+0xa58>
 800445c:	9a00      	ldr	r2, [sp, #0]
 800445e:	f108 0301 	add.w	r3, r8, #1
 8004462:	7013      	strb	r3, [r2, #0]
 8004464:	e608      	b.n	8004078 <_dtoa_r+0x698>
 8004466:	9b07      	ldr	r3, [sp, #28]
 8004468:	9a07      	ldr	r2, [sp, #28]
 800446a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800446e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004470:	4293      	cmp	r3, r2
 8004472:	d028      	beq.n	80044c6 <_dtoa_r+0xae6>
 8004474:	4649      	mov	r1, r9
 8004476:	2300      	movs	r3, #0
 8004478:	220a      	movs	r2, #10
 800447a:	4658      	mov	r0, fp
 800447c:	f000 f9d6 	bl	800482c <__multadd>
 8004480:	42af      	cmp	r7, r5
 8004482:	4681      	mov	r9, r0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	f04f 020a 	mov.w	r2, #10
 800448c:	4639      	mov	r1, r7
 800448e:	4658      	mov	r0, fp
 8004490:	d107      	bne.n	80044a2 <_dtoa_r+0xac2>
 8004492:	f000 f9cb 	bl	800482c <__multadd>
 8004496:	4607      	mov	r7, r0
 8004498:	4605      	mov	r5, r0
 800449a:	9b07      	ldr	r3, [sp, #28]
 800449c:	3301      	adds	r3, #1
 800449e:	9307      	str	r3, [sp, #28]
 80044a0:	e774      	b.n	800438c <_dtoa_r+0x9ac>
 80044a2:	f000 f9c3 	bl	800482c <__multadd>
 80044a6:	4629      	mov	r1, r5
 80044a8:	4607      	mov	r7, r0
 80044aa:	2300      	movs	r3, #0
 80044ac:	220a      	movs	r2, #10
 80044ae:	4658      	mov	r0, fp
 80044b0:	f000 f9bc 	bl	800482c <__multadd>
 80044b4:	4605      	mov	r5, r0
 80044b6:	e7f0      	b.n	800449a <_dtoa_r+0xaba>
 80044b8:	9b00      	ldr	r3, [sp, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	bfcc      	ite	gt
 80044be:	461e      	movgt	r6, r3
 80044c0:	2601      	movle	r6, #1
 80044c2:	4456      	add	r6, sl
 80044c4:	2700      	movs	r7, #0
 80044c6:	4649      	mov	r1, r9
 80044c8:	2201      	movs	r2, #1
 80044ca:	4658      	mov	r0, fp
 80044cc:	f000 fb5a 	bl	8004b84 <__lshift>
 80044d0:	4621      	mov	r1, r4
 80044d2:	4681      	mov	r9, r0
 80044d4:	f000 fbc2 	bl	8004c5c <__mcmp>
 80044d8:	2800      	cmp	r0, #0
 80044da:	dcb0      	bgt.n	800443e <_dtoa_r+0xa5e>
 80044dc:	d102      	bne.n	80044e4 <_dtoa_r+0xb04>
 80044de:	f018 0f01 	tst.w	r8, #1
 80044e2:	d1ac      	bne.n	800443e <_dtoa_r+0xa5e>
 80044e4:	4633      	mov	r3, r6
 80044e6:	461e      	mov	r6, r3
 80044e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80044ec:	2a30      	cmp	r2, #48	@ 0x30
 80044ee:	d0fa      	beq.n	80044e6 <_dtoa_r+0xb06>
 80044f0:	e5c2      	b.n	8004078 <_dtoa_r+0x698>
 80044f2:	459a      	cmp	sl, r3
 80044f4:	d1a4      	bne.n	8004440 <_dtoa_r+0xa60>
 80044f6:	9b04      	ldr	r3, [sp, #16]
 80044f8:	3301      	adds	r3, #1
 80044fa:	9304      	str	r3, [sp, #16]
 80044fc:	2331      	movs	r3, #49	@ 0x31
 80044fe:	f88a 3000 	strb.w	r3, [sl]
 8004502:	e5b9      	b.n	8004078 <_dtoa_r+0x698>
 8004504:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004506:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004564 <_dtoa_r+0xb84>
 800450a:	b11b      	cbz	r3, 8004514 <_dtoa_r+0xb34>
 800450c:	f10a 0308 	add.w	r3, sl, #8
 8004510:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	4650      	mov	r0, sl
 8004516:	b019      	add	sp, #100	@ 0x64
 8004518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800451c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800451e:	2b01      	cmp	r3, #1
 8004520:	f77f ae37 	ble.w	8004192 <_dtoa_r+0x7b2>
 8004524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004526:	930a      	str	r3, [sp, #40]	@ 0x28
 8004528:	2001      	movs	r0, #1
 800452a:	e655      	b.n	80041d8 <_dtoa_r+0x7f8>
 800452c:	9b00      	ldr	r3, [sp, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f77f aed6 	ble.w	80042e0 <_dtoa_r+0x900>
 8004534:	4656      	mov	r6, sl
 8004536:	4621      	mov	r1, r4
 8004538:	4648      	mov	r0, r9
 800453a:	f7ff f9c6 	bl	80038ca <quorem>
 800453e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004542:	f806 8b01 	strb.w	r8, [r6], #1
 8004546:	9b00      	ldr	r3, [sp, #0]
 8004548:	eba6 020a 	sub.w	r2, r6, sl
 800454c:	4293      	cmp	r3, r2
 800454e:	ddb3      	ble.n	80044b8 <_dtoa_r+0xad8>
 8004550:	4649      	mov	r1, r9
 8004552:	2300      	movs	r3, #0
 8004554:	220a      	movs	r2, #10
 8004556:	4658      	mov	r0, fp
 8004558:	f000 f968 	bl	800482c <__multadd>
 800455c:	4681      	mov	r9, r0
 800455e:	e7ea      	b.n	8004536 <_dtoa_r+0xb56>
 8004560:	080056f0 	.word	0x080056f0
 8004564:	08005674 	.word	0x08005674

08004568 <_free_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4605      	mov	r5, r0
 800456c:	2900      	cmp	r1, #0
 800456e:	d041      	beq.n	80045f4 <_free_r+0x8c>
 8004570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004574:	1f0c      	subs	r4, r1, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	bfb8      	it	lt
 800457a:	18e4      	addlt	r4, r4, r3
 800457c:	f000 f8e8 	bl	8004750 <__malloc_lock>
 8004580:	4a1d      	ldr	r2, [pc, #116]	@ (80045f8 <_free_r+0x90>)
 8004582:	6813      	ldr	r3, [r2, #0]
 8004584:	b933      	cbnz	r3, 8004594 <_free_r+0x2c>
 8004586:	6063      	str	r3, [r4, #4]
 8004588:	6014      	str	r4, [r2, #0]
 800458a:	4628      	mov	r0, r5
 800458c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004590:	f000 b8e4 	b.w	800475c <__malloc_unlock>
 8004594:	42a3      	cmp	r3, r4
 8004596:	d908      	bls.n	80045aa <_free_r+0x42>
 8004598:	6820      	ldr	r0, [r4, #0]
 800459a:	1821      	adds	r1, r4, r0
 800459c:	428b      	cmp	r3, r1
 800459e:	bf01      	itttt	eq
 80045a0:	6819      	ldreq	r1, [r3, #0]
 80045a2:	685b      	ldreq	r3, [r3, #4]
 80045a4:	1809      	addeq	r1, r1, r0
 80045a6:	6021      	streq	r1, [r4, #0]
 80045a8:	e7ed      	b.n	8004586 <_free_r+0x1e>
 80045aa:	461a      	mov	r2, r3
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	b10b      	cbz	r3, 80045b4 <_free_r+0x4c>
 80045b0:	42a3      	cmp	r3, r4
 80045b2:	d9fa      	bls.n	80045aa <_free_r+0x42>
 80045b4:	6811      	ldr	r1, [r2, #0]
 80045b6:	1850      	adds	r0, r2, r1
 80045b8:	42a0      	cmp	r0, r4
 80045ba:	d10b      	bne.n	80045d4 <_free_r+0x6c>
 80045bc:	6820      	ldr	r0, [r4, #0]
 80045be:	4401      	add	r1, r0
 80045c0:	1850      	adds	r0, r2, r1
 80045c2:	4283      	cmp	r3, r0
 80045c4:	6011      	str	r1, [r2, #0]
 80045c6:	d1e0      	bne.n	800458a <_free_r+0x22>
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	6053      	str	r3, [r2, #4]
 80045ce:	4408      	add	r0, r1
 80045d0:	6010      	str	r0, [r2, #0]
 80045d2:	e7da      	b.n	800458a <_free_r+0x22>
 80045d4:	d902      	bls.n	80045dc <_free_r+0x74>
 80045d6:	230c      	movs	r3, #12
 80045d8:	602b      	str	r3, [r5, #0]
 80045da:	e7d6      	b.n	800458a <_free_r+0x22>
 80045dc:	6820      	ldr	r0, [r4, #0]
 80045de:	1821      	adds	r1, r4, r0
 80045e0:	428b      	cmp	r3, r1
 80045e2:	bf04      	itt	eq
 80045e4:	6819      	ldreq	r1, [r3, #0]
 80045e6:	685b      	ldreq	r3, [r3, #4]
 80045e8:	6063      	str	r3, [r4, #4]
 80045ea:	bf04      	itt	eq
 80045ec:	1809      	addeq	r1, r1, r0
 80045ee:	6021      	streq	r1, [r4, #0]
 80045f0:	6054      	str	r4, [r2, #4]
 80045f2:	e7ca      	b.n	800458a <_free_r+0x22>
 80045f4:	bd38      	pop	{r3, r4, r5, pc}
 80045f6:	bf00      	nop
 80045f8:	200003d0 	.word	0x200003d0

080045fc <malloc>:
 80045fc:	4b02      	ldr	r3, [pc, #8]	@ (8004608 <malloc+0xc>)
 80045fe:	4601      	mov	r1, r0
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	f000 b825 	b.w	8004650 <_malloc_r>
 8004606:	bf00      	nop
 8004608:	20000028 	.word	0x20000028

0800460c <sbrk_aligned>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	4e0f      	ldr	r6, [pc, #60]	@ (800464c <sbrk_aligned+0x40>)
 8004610:	460c      	mov	r4, r1
 8004612:	6831      	ldr	r1, [r6, #0]
 8004614:	4605      	mov	r5, r0
 8004616:	b911      	cbnz	r1, 800461e <sbrk_aligned+0x12>
 8004618:	f000 fcd4 	bl	8004fc4 <_sbrk_r>
 800461c:	6030      	str	r0, [r6, #0]
 800461e:	4621      	mov	r1, r4
 8004620:	4628      	mov	r0, r5
 8004622:	f000 fccf 	bl	8004fc4 <_sbrk_r>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	d103      	bne.n	8004632 <sbrk_aligned+0x26>
 800462a:	f04f 34ff 	mov.w	r4, #4294967295
 800462e:	4620      	mov	r0, r4
 8004630:	bd70      	pop	{r4, r5, r6, pc}
 8004632:	1cc4      	adds	r4, r0, #3
 8004634:	f024 0403 	bic.w	r4, r4, #3
 8004638:	42a0      	cmp	r0, r4
 800463a:	d0f8      	beq.n	800462e <sbrk_aligned+0x22>
 800463c:	1a21      	subs	r1, r4, r0
 800463e:	4628      	mov	r0, r5
 8004640:	f000 fcc0 	bl	8004fc4 <_sbrk_r>
 8004644:	3001      	adds	r0, #1
 8004646:	d1f2      	bne.n	800462e <sbrk_aligned+0x22>
 8004648:	e7ef      	b.n	800462a <sbrk_aligned+0x1e>
 800464a:	bf00      	nop
 800464c:	200003cc 	.word	0x200003cc

08004650 <_malloc_r>:
 8004650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004654:	1ccd      	adds	r5, r1, #3
 8004656:	f025 0503 	bic.w	r5, r5, #3
 800465a:	3508      	adds	r5, #8
 800465c:	2d0c      	cmp	r5, #12
 800465e:	bf38      	it	cc
 8004660:	250c      	movcc	r5, #12
 8004662:	2d00      	cmp	r5, #0
 8004664:	4606      	mov	r6, r0
 8004666:	db01      	blt.n	800466c <_malloc_r+0x1c>
 8004668:	42a9      	cmp	r1, r5
 800466a:	d904      	bls.n	8004676 <_malloc_r+0x26>
 800466c:	230c      	movs	r3, #12
 800466e:	6033      	str	r3, [r6, #0]
 8004670:	2000      	movs	r0, #0
 8004672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004676:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800474c <_malloc_r+0xfc>
 800467a:	f000 f869 	bl	8004750 <__malloc_lock>
 800467e:	f8d8 3000 	ldr.w	r3, [r8]
 8004682:	461c      	mov	r4, r3
 8004684:	bb44      	cbnz	r4, 80046d8 <_malloc_r+0x88>
 8004686:	4629      	mov	r1, r5
 8004688:	4630      	mov	r0, r6
 800468a:	f7ff ffbf 	bl	800460c <sbrk_aligned>
 800468e:	1c43      	adds	r3, r0, #1
 8004690:	4604      	mov	r4, r0
 8004692:	d158      	bne.n	8004746 <_malloc_r+0xf6>
 8004694:	f8d8 4000 	ldr.w	r4, [r8]
 8004698:	4627      	mov	r7, r4
 800469a:	2f00      	cmp	r7, #0
 800469c:	d143      	bne.n	8004726 <_malloc_r+0xd6>
 800469e:	2c00      	cmp	r4, #0
 80046a0:	d04b      	beq.n	800473a <_malloc_r+0xea>
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	4639      	mov	r1, r7
 80046a6:	4630      	mov	r0, r6
 80046a8:	eb04 0903 	add.w	r9, r4, r3
 80046ac:	f000 fc8a 	bl	8004fc4 <_sbrk_r>
 80046b0:	4581      	cmp	r9, r0
 80046b2:	d142      	bne.n	800473a <_malloc_r+0xea>
 80046b4:	6821      	ldr	r1, [r4, #0]
 80046b6:	1a6d      	subs	r5, r5, r1
 80046b8:	4629      	mov	r1, r5
 80046ba:	4630      	mov	r0, r6
 80046bc:	f7ff ffa6 	bl	800460c <sbrk_aligned>
 80046c0:	3001      	adds	r0, #1
 80046c2:	d03a      	beq.n	800473a <_malloc_r+0xea>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	442b      	add	r3, r5
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	f8d8 3000 	ldr.w	r3, [r8]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	bb62      	cbnz	r2, 800472c <_malloc_r+0xdc>
 80046d2:	f8c8 7000 	str.w	r7, [r8]
 80046d6:	e00f      	b.n	80046f8 <_malloc_r+0xa8>
 80046d8:	6822      	ldr	r2, [r4, #0]
 80046da:	1b52      	subs	r2, r2, r5
 80046dc:	d420      	bmi.n	8004720 <_malloc_r+0xd0>
 80046de:	2a0b      	cmp	r2, #11
 80046e0:	d917      	bls.n	8004712 <_malloc_r+0xc2>
 80046e2:	1961      	adds	r1, r4, r5
 80046e4:	42a3      	cmp	r3, r4
 80046e6:	6025      	str	r5, [r4, #0]
 80046e8:	bf18      	it	ne
 80046ea:	6059      	strne	r1, [r3, #4]
 80046ec:	6863      	ldr	r3, [r4, #4]
 80046ee:	bf08      	it	eq
 80046f0:	f8c8 1000 	streq.w	r1, [r8]
 80046f4:	5162      	str	r2, [r4, r5]
 80046f6:	604b      	str	r3, [r1, #4]
 80046f8:	4630      	mov	r0, r6
 80046fa:	f000 f82f 	bl	800475c <__malloc_unlock>
 80046fe:	f104 000b 	add.w	r0, r4, #11
 8004702:	1d23      	adds	r3, r4, #4
 8004704:	f020 0007 	bic.w	r0, r0, #7
 8004708:	1ac2      	subs	r2, r0, r3
 800470a:	bf1c      	itt	ne
 800470c:	1a1b      	subne	r3, r3, r0
 800470e:	50a3      	strne	r3, [r4, r2]
 8004710:	e7af      	b.n	8004672 <_malloc_r+0x22>
 8004712:	6862      	ldr	r2, [r4, #4]
 8004714:	42a3      	cmp	r3, r4
 8004716:	bf0c      	ite	eq
 8004718:	f8c8 2000 	streq.w	r2, [r8]
 800471c:	605a      	strne	r2, [r3, #4]
 800471e:	e7eb      	b.n	80046f8 <_malloc_r+0xa8>
 8004720:	4623      	mov	r3, r4
 8004722:	6864      	ldr	r4, [r4, #4]
 8004724:	e7ae      	b.n	8004684 <_malloc_r+0x34>
 8004726:	463c      	mov	r4, r7
 8004728:	687f      	ldr	r7, [r7, #4]
 800472a:	e7b6      	b.n	800469a <_malloc_r+0x4a>
 800472c:	461a      	mov	r2, r3
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	42a3      	cmp	r3, r4
 8004732:	d1fb      	bne.n	800472c <_malloc_r+0xdc>
 8004734:	2300      	movs	r3, #0
 8004736:	6053      	str	r3, [r2, #4]
 8004738:	e7de      	b.n	80046f8 <_malloc_r+0xa8>
 800473a:	230c      	movs	r3, #12
 800473c:	6033      	str	r3, [r6, #0]
 800473e:	4630      	mov	r0, r6
 8004740:	f000 f80c 	bl	800475c <__malloc_unlock>
 8004744:	e794      	b.n	8004670 <_malloc_r+0x20>
 8004746:	6005      	str	r5, [r0, #0]
 8004748:	e7d6      	b.n	80046f8 <_malloc_r+0xa8>
 800474a:	bf00      	nop
 800474c:	200003d0 	.word	0x200003d0

08004750 <__malloc_lock>:
 8004750:	4801      	ldr	r0, [pc, #4]	@ (8004758 <__malloc_lock+0x8>)
 8004752:	f7ff b8b8 	b.w	80038c6 <__retarget_lock_acquire_recursive>
 8004756:	bf00      	nop
 8004758:	200003c8 	.word	0x200003c8

0800475c <__malloc_unlock>:
 800475c:	4801      	ldr	r0, [pc, #4]	@ (8004764 <__malloc_unlock+0x8>)
 800475e:	f7ff b8b3 	b.w	80038c8 <__retarget_lock_release_recursive>
 8004762:	bf00      	nop
 8004764:	200003c8 	.word	0x200003c8

08004768 <_Balloc>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	69c6      	ldr	r6, [r0, #28]
 800476c:	4604      	mov	r4, r0
 800476e:	460d      	mov	r5, r1
 8004770:	b976      	cbnz	r6, 8004790 <_Balloc+0x28>
 8004772:	2010      	movs	r0, #16
 8004774:	f7ff ff42 	bl	80045fc <malloc>
 8004778:	4602      	mov	r2, r0
 800477a:	61e0      	str	r0, [r4, #28]
 800477c:	b920      	cbnz	r0, 8004788 <_Balloc+0x20>
 800477e:	4b18      	ldr	r3, [pc, #96]	@ (80047e0 <_Balloc+0x78>)
 8004780:	4818      	ldr	r0, [pc, #96]	@ (80047e4 <_Balloc+0x7c>)
 8004782:	216b      	movs	r1, #107	@ 0x6b
 8004784:	f000 fc3c 	bl	8005000 <__assert_func>
 8004788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800478c:	6006      	str	r6, [r0, #0]
 800478e:	60c6      	str	r6, [r0, #12]
 8004790:	69e6      	ldr	r6, [r4, #28]
 8004792:	68f3      	ldr	r3, [r6, #12]
 8004794:	b183      	cbz	r3, 80047b8 <_Balloc+0x50>
 8004796:	69e3      	ldr	r3, [r4, #28]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800479e:	b9b8      	cbnz	r0, 80047d0 <_Balloc+0x68>
 80047a0:	2101      	movs	r1, #1
 80047a2:	fa01 f605 	lsl.w	r6, r1, r5
 80047a6:	1d72      	adds	r2, r6, #5
 80047a8:	0092      	lsls	r2, r2, #2
 80047aa:	4620      	mov	r0, r4
 80047ac:	f000 fc46 	bl	800503c <_calloc_r>
 80047b0:	b160      	cbz	r0, 80047cc <_Balloc+0x64>
 80047b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80047b6:	e00e      	b.n	80047d6 <_Balloc+0x6e>
 80047b8:	2221      	movs	r2, #33	@ 0x21
 80047ba:	2104      	movs	r1, #4
 80047bc:	4620      	mov	r0, r4
 80047be:	f000 fc3d 	bl	800503c <_calloc_r>
 80047c2:	69e3      	ldr	r3, [r4, #28]
 80047c4:	60f0      	str	r0, [r6, #12]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e4      	bne.n	8004796 <_Balloc+0x2e>
 80047cc:	2000      	movs	r0, #0
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	6802      	ldr	r2, [r0, #0]
 80047d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80047d6:	2300      	movs	r3, #0
 80047d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80047dc:	e7f7      	b.n	80047ce <_Balloc+0x66>
 80047de:	bf00      	nop
 80047e0:	08005681 	.word	0x08005681
 80047e4:	08005701 	.word	0x08005701

080047e8 <_Bfree>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	69c6      	ldr	r6, [r0, #28]
 80047ec:	4605      	mov	r5, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	b976      	cbnz	r6, 8004810 <_Bfree+0x28>
 80047f2:	2010      	movs	r0, #16
 80047f4:	f7ff ff02 	bl	80045fc <malloc>
 80047f8:	4602      	mov	r2, r0
 80047fa:	61e8      	str	r0, [r5, #28]
 80047fc:	b920      	cbnz	r0, 8004808 <_Bfree+0x20>
 80047fe:	4b09      	ldr	r3, [pc, #36]	@ (8004824 <_Bfree+0x3c>)
 8004800:	4809      	ldr	r0, [pc, #36]	@ (8004828 <_Bfree+0x40>)
 8004802:	218f      	movs	r1, #143	@ 0x8f
 8004804:	f000 fbfc 	bl	8005000 <__assert_func>
 8004808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800480c:	6006      	str	r6, [r0, #0]
 800480e:	60c6      	str	r6, [r0, #12]
 8004810:	b13c      	cbz	r4, 8004822 <_Bfree+0x3a>
 8004812:	69eb      	ldr	r3, [r5, #28]
 8004814:	6862      	ldr	r2, [r4, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800481c:	6021      	str	r1, [r4, #0]
 800481e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004822:	bd70      	pop	{r4, r5, r6, pc}
 8004824:	08005681 	.word	0x08005681
 8004828:	08005701 	.word	0x08005701

0800482c <__multadd>:
 800482c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004830:	690d      	ldr	r5, [r1, #16]
 8004832:	4607      	mov	r7, r0
 8004834:	460c      	mov	r4, r1
 8004836:	461e      	mov	r6, r3
 8004838:	f101 0c14 	add.w	ip, r1, #20
 800483c:	2000      	movs	r0, #0
 800483e:	f8dc 3000 	ldr.w	r3, [ip]
 8004842:	b299      	uxth	r1, r3
 8004844:	fb02 6101 	mla	r1, r2, r1, r6
 8004848:	0c1e      	lsrs	r6, r3, #16
 800484a:	0c0b      	lsrs	r3, r1, #16
 800484c:	fb02 3306 	mla	r3, r2, r6, r3
 8004850:	b289      	uxth	r1, r1
 8004852:	3001      	adds	r0, #1
 8004854:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004858:	4285      	cmp	r5, r0
 800485a:	f84c 1b04 	str.w	r1, [ip], #4
 800485e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004862:	dcec      	bgt.n	800483e <__multadd+0x12>
 8004864:	b30e      	cbz	r6, 80048aa <__multadd+0x7e>
 8004866:	68a3      	ldr	r3, [r4, #8]
 8004868:	42ab      	cmp	r3, r5
 800486a:	dc19      	bgt.n	80048a0 <__multadd+0x74>
 800486c:	6861      	ldr	r1, [r4, #4]
 800486e:	4638      	mov	r0, r7
 8004870:	3101      	adds	r1, #1
 8004872:	f7ff ff79 	bl	8004768 <_Balloc>
 8004876:	4680      	mov	r8, r0
 8004878:	b928      	cbnz	r0, 8004886 <__multadd+0x5a>
 800487a:	4602      	mov	r2, r0
 800487c:	4b0c      	ldr	r3, [pc, #48]	@ (80048b0 <__multadd+0x84>)
 800487e:	480d      	ldr	r0, [pc, #52]	@ (80048b4 <__multadd+0x88>)
 8004880:	21ba      	movs	r1, #186	@ 0xba
 8004882:	f000 fbbd 	bl	8005000 <__assert_func>
 8004886:	6922      	ldr	r2, [r4, #16]
 8004888:	3202      	adds	r2, #2
 800488a:	f104 010c 	add.w	r1, r4, #12
 800488e:	0092      	lsls	r2, r2, #2
 8004890:	300c      	adds	r0, #12
 8004892:	f000 fba7 	bl	8004fe4 <memcpy>
 8004896:	4621      	mov	r1, r4
 8004898:	4638      	mov	r0, r7
 800489a:	f7ff ffa5 	bl	80047e8 <_Bfree>
 800489e:	4644      	mov	r4, r8
 80048a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80048a4:	3501      	adds	r5, #1
 80048a6:	615e      	str	r6, [r3, #20]
 80048a8:	6125      	str	r5, [r4, #16]
 80048aa:	4620      	mov	r0, r4
 80048ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b0:	080056f0 	.word	0x080056f0
 80048b4:	08005701 	.word	0x08005701

080048b8 <__hi0bits>:
 80048b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80048bc:	4603      	mov	r3, r0
 80048be:	bf36      	itet	cc
 80048c0:	0403      	lslcc	r3, r0, #16
 80048c2:	2000      	movcs	r0, #0
 80048c4:	2010      	movcc	r0, #16
 80048c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048ca:	bf3c      	itt	cc
 80048cc:	021b      	lslcc	r3, r3, #8
 80048ce:	3008      	addcc	r0, #8
 80048d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048d4:	bf3c      	itt	cc
 80048d6:	011b      	lslcc	r3, r3, #4
 80048d8:	3004      	addcc	r0, #4
 80048da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048de:	bf3c      	itt	cc
 80048e0:	009b      	lslcc	r3, r3, #2
 80048e2:	3002      	addcc	r0, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	db05      	blt.n	80048f4 <__hi0bits+0x3c>
 80048e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80048ec:	f100 0001 	add.w	r0, r0, #1
 80048f0:	bf08      	it	eq
 80048f2:	2020      	moveq	r0, #32
 80048f4:	4770      	bx	lr

080048f6 <__lo0bits>:
 80048f6:	6803      	ldr	r3, [r0, #0]
 80048f8:	4602      	mov	r2, r0
 80048fa:	f013 0007 	ands.w	r0, r3, #7
 80048fe:	d00b      	beq.n	8004918 <__lo0bits+0x22>
 8004900:	07d9      	lsls	r1, r3, #31
 8004902:	d421      	bmi.n	8004948 <__lo0bits+0x52>
 8004904:	0798      	lsls	r0, r3, #30
 8004906:	bf49      	itett	mi
 8004908:	085b      	lsrmi	r3, r3, #1
 800490a:	089b      	lsrpl	r3, r3, #2
 800490c:	2001      	movmi	r0, #1
 800490e:	6013      	strmi	r3, [r2, #0]
 8004910:	bf5c      	itt	pl
 8004912:	6013      	strpl	r3, [r2, #0]
 8004914:	2002      	movpl	r0, #2
 8004916:	4770      	bx	lr
 8004918:	b299      	uxth	r1, r3
 800491a:	b909      	cbnz	r1, 8004920 <__lo0bits+0x2a>
 800491c:	0c1b      	lsrs	r3, r3, #16
 800491e:	2010      	movs	r0, #16
 8004920:	b2d9      	uxtb	r1, r3
 8004922:	b909      	cbnz	r1, 8004928 <__lo0bits+0x32>
 8004924:	3008      	adds	r0, #8
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	0719      	lsls	r1, r3, #28
 800492a:	bf04      	itt	eq
 800492c:	091b      	lsreq	r3, r3, #4
 800492e:	3004      	addeq	r0, #4
 8004930:	0799      	lsls	r1, r3, #30
 8004932:	bf04      	itt	eq
 8004934:	089b      	lsreq	r3, r3, #2
 8004936:	3002      	addeq	r0, #2
 8004938:	07d9      	lsls	r1, r3, #31
 800493a:	d403      	bmi.n	8004944 <__lo0bits+0x4e>
 800493c:	085b      	lsrs	r3, r3, #1
 800493e:	f100 0001 	add.w	r0, r0, #1
 8004942:	d003      	beq.n	800494c <__lo0bits+0x56>
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4770      	bx	lr
 8004948:	2000      	movs	r0, #0
 800494a:	4770      	bx	lr
 800494c:	2020      	movs	r0, #32
 800494e:	4770      	bx	lr

08004950 <__i2b>:
 8004950:	b510      	push	{r4, lr}
 8004952:	460c      	mov	r4, r1
 8004954:	2101      	movs	r1, #1
 8004956:	f7ff ff07 	bl	8004768 <_Balloc>
 800495a:	4602      	mov	r2, r0
 800495c:	b928      	cbnz	r0, 800496a <__i2b+0x1a>
 800495e:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <__i2b+0x24>)
 8004960:	4805      	ldr	r0, [pc, #20]	@ (8004978 <__i2b+0x28>)
 8004962:	f240 1145 	movw	r1, #325	@ 0x145
 8004966:	f000 fb4b 	bl	8005000 <__assert_func>
 800496a:	2301      	movs	r3, #1
 800496c:	6144      	str	r4, [r0, #20]
 800496e:	6103      	str	r3, [r0, #16]
 8004970:	bd10      	pop	{r4, pc}
 8004972:	bf00      	nop
 8004974:	080056f0 	.word	0x080056f0
 8004978:	08005701 	.word	0x08005701

0800497c <__multiply>:
 800497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004980:	4614      	mov	r4, r2
 8004982:	690a      	ldr	r2, [r1, #16]
 8004984:	6923      	ldr	r3, [r4, #16]
 8004986:	429a      	cmp	r2, r3
 8004988:	bfa8      	it	ge
 800498a:	4623      	movge	r3, r4
 800498c:	460f      	mov	r7, r1
 800498e:	bfa4      	itt	ge
 8004990:	460c      	movge	r4, r1
 8004992:	461f      	movge	r7, r3
 8004994:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004998:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800499c:	68a3      	ldr	r3, [r4, #8]
 800499e:	6861      	ldr	r1, [r4, #4]
 80049a0:	eb0a 0609 	add.w	r6, sl, r9
 80049a4:	42b3      	cmp	r3, r6
 80049a6:	b085      	sub	sp, #20
 80049a8:	bfb8      	it	lt
 80049aa:	3101      	addlt	r1, #1
 80049ac:	f7ff fedc 	bl	8004768 <_Balloc>
 80049b0:	b930      	cbnz	r0, 80049c0 <__multiply+0x44>
 80049b2:	4602      	mov	r2, r0
 80049b4:	4b44      	ldr	r3, [pc, #272]	@ (8004ac8 <__multiply+0x14c>)
 80049b6:	4845      	ldr	r0, [pc, #276]	@ (8004acc <__multiply+0x150>)
 80049b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80049bc:	f000 fb20 	bl	8005000 <__assert_func>
 80049c0:	f100 0514 	add.w	r5, r0, #20
 80049c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80049c8:	462b      	mov	r3, r5
 80049ca:	2200      	movs	r2, #0
 80049cc:	4543      	cmp	r3, r8
 80049ce:	d321      	bcc.n	8004a14 <__multiply+0x98>
 80049d0:	f107 0114 	add.w	r1, r7, #20
 80049d4:	f104 0214 	add.w	r2, r4, #20
 80049d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80049dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80049e0:	9302      	str	r3, [sp, #8]
 80049e2:	1b13      	subs	r3, r2, r4
 80049e4:	3b15      	subs	r3, #21
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	3304      	adds	r3, #4
 80049ec:	f104 0715 	add.w	r7, r4, #21
 80049f0:	42ba      	cmp	r2, r7
 80049f2:	bf38      	it	cc
 80049f4:	2304      	movcc	r3, #4
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	9b02      	ldr	r3, [sp, #8]
 80049fa:	9103      	str	r1, [sp, #12]
 80049fc:	428b      	cmp	r3, r1
 80049fe:	d80c      	bhi.n	8004a1a <__multiply+0x9e>
 8004a00:	2e00      	cmp	r6, #0
 8004a02:	dd03      	ble.n	8004a0c <__multiply+0x90>
 8004a04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d05b      	beq.n	8004ac4 <__multiply+0x148>
 8004a0c:	6106      	str	r6, [r0, #16]
 8004a0e:	b005      	add	sp, #20
 8004a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a14:	f843 2b04 	str.w	r2, [r3], #4
 8004a18:	e7d8      	b.n	80049cc <__multiply+0x50>
 8004a1a:	f8b1 a000 	ldrh.w	sl, [r1]
 8004a1e:	f1ba 0f00 	cmp.w	sl, #0
 8004a22:	d024      	beq.n	8004a6e <__multiply+0xf2>
 8004a24:	f104 0e14 	add.w	lr, r4, #20
 8004a28:	46a9      	mov	r9, r5
 8004a2a:	f04f 0c00 	mov.w	ip, #0
 8004a2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004a32:	f8d9 3000 	ldr.w	r3, [r9]
 8004a36:	fa1f fb87 	uxth.w	fp, r7
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8004a40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004a44:	f8d9 7000 	ldr.w	r7, [r9]
 8004a48:	4463      	add	r3, ip
 8004a4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004a4e:	fb0a c70b 	mla	r7, sl, fp, ip
 8004a52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004a5c:	4572      	cmp	r2, lr
 8004a5e:	f849 3b04 	str.w	r3, [r9], #4
 8004a62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004a66:	d8e2      	bhi.n	8004a2e <__multiply+0xb2>
 8004a68:	9b01      	ldr	r3, [sp, #4]
 8004a6a:	f845 c003 	str.w	ip, [r5, r3]
 8004a6e:	9b03      	ldr	r3, [sp, #12]
 8004a70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004a74:	3104      	adds	r1, #4
 8004a76:	f1b9 0f00 	cmp.w	r9, #0
 8004a7a:	d021      	beq.n	8004ac0 <__multiply+0x144>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	f104 0c14 	add.w	ip, r4, #20
 8004a82:	46ae      	mov	lr, r5
 8004a84:	f04f 0a00 	mov.w	sl, #0
 8004a88:	f8bc b000 	ldrh.w	fp, [ip]
 8004a8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004a90:	fb09 770b 	mla	r7, r9, fp, r7
 8004a94:	4457      	add	r7, sl
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004a9c:	f84e 3b04 	str.w	r3, [lr], #4
 8004aa0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004aa4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004aa8:	f8be 3000 	ldrh.w	r3, [lr]
 8004aac:	fb09 330a 	mla	r3, r9, sl, r3
 8004ab0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004ab4:	4562      	cmp	r2, ip
 8004ab6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004aba:	d8e5      	bhi.n	8004a88 <__multiply+0x10c>
 8004abc:	9f01      	ldr	r7, [sp, #4]
 8004abe:	51eb      	str	r3, [r5, r7]
 8004ac0:	3504      	adds	r5, #4
 8004ac2:	e799      	b.n	80049f8 <__multiply+0x7c>
 8004ac4:	3e01      	subs	r6, #1
 8004ac6:	e79b      	b.n	8004a00 <__multiply+0x84>
 8004ac8:	080056f0 	.word	0x080056f0
 8004acc:	08005701 	.word	0x08005701

08004ad0 <__pow5mult>:
 8004ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad4:	4615      	mov	r5, r2
 8004ad6:	f012 0203 	ands.w	r2, r2, #3
 8004ada:	4607      	mov	r7, r0
 8004adc:	460e      	mov	r6, r1
 8004ade:	d007      	beq.n	8004af0 <__pow5mult+0x20>
 8004ae0:	4c25      	ldr	r4, [pc, #148]	@ (8004b78 <__pow5mult+0xa8>)
 8004ae2:	3a01      	subs	r2, #1
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004aea:	f7ff fe9f 	bl	800482c <__multadd>
 8004aee:	4606      	mov	r6, r0
 8004af0:	10ad      	asrs	r5, r5, #2
 8004af2:	d03d      	beq.n	8004b70 <__pow5mult+0xa0>
 8004af4:	69fc      	ldr	r4, [r7, #28]
 8004af6:	b97c      	cbnz	r4, 8004b18 <__pow5mult+0x48>
 8004af8:	2010      	movs	r0, #16
 8004afa:	f7ff fd7f 	bl	80045fc <malloc>
 8004afe:	4602      	mov	r2, r0
 8004b00:	61f8      	str	r0, [r7, #28]
 8004b02:	b928      	cbnz	r0, 8004b10 <__pow5mult+0x40>
 8004b04:	4b1d      	ldr	r3, [pc, #116]	@ (8004b7c <__pow5mult+0xac>)
 8004b06:	481e      	ldr	r0, [pc, #120]	@ (8004b80 <__pow5mult+0xb0>)
 8004b08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004b0c:	f000 fa78 	bl	8005000 <__assert_func>
 8004b10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b14:	6004      	str	r4, [r0, #0]
 8004b16:	60c4      	str	r4, [r0, #12]
 8004b18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004b1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b20:	b94c      	cbnz	r4, 8004b36 <__pow5mult+0x66>
 8004b22:	f240 2171 	movw	r1, #625	@ 0x271
 8004b26:	4638      	mov	r0, r7
 8004b28:	f7ff ff12 	bl	8004950 <__i2b>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b32:	4604      	mov	r4, r0
 8004b34:	6003      	str	r3, [r0, #0]
 8004b36:	f04f 0900 	mov.w	r9, #0
 8004b3a:	07eb      	lsls	r3, r5, #31
 8004b3c:	d50a      	bpl.n	8004b54 <__pow5mult+0x84>
 8004b3e:	4631      	mov	r1, r6
 8004b40:	4622      	mov	r2, r4
 8004b42:	4638      	mov	r0, r7
 8004b44:	f7ff ff1a 	bl	800497c <__multiply>
 8004b48:	4631      	mov	r1, r6
 8004b4a:	4680      	mov	r8, r0
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	f7ff fe4b 	bl	80047e8 <_Bfree>
 8004b52:	4646      	mov	r6, r8
 8004b54:	106d      	asrs	r5, r5, #1
 8004b56:	d00b      	beq.n	8004b70 <__pow5mult+0xa0>
 8004b58:	6820      	ldr	r0, [r4, #0]
 8004b5a:	b938      	cbnz	r0, 8004b6c <__pow5mult+0x9c>
 8004b5c:	4622      	mov	r2, r4
 8004b5e:	4621      	mov	r1, r4
 8004b60:	4638      	mov	r0, r7
 8004b62:	f7ff ff0b 	bl	800497c <__multiply>
 8004b66:	6020      	str	r0, [r4, #0]
 8004b68:	f8c0 9000 	str.w	r9, [r0]
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	e7e4      	b.n	8004b3a <__pow5mult+0x6a>
 8004b70:	4630      	mov	r0, r6
 8004b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b76:	bf00      	nop
 8004b78:	0800575c 	.word	0x0800575c
 8004b7c:	08005681 	.word	0x08005681
 8004b80:	08005701 	.word	0x08005701

08004b84 <__lshift>:
 8004b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b88:	460c      	mov	r4, r1
 8004b8a:	6849      	ldr	r1, [r1, #4]
 8004b8c:	6923      	ldr	r3, [r4, #16]
 8004b8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004b92:	68a3      	ldr	r3, [r4, #8]
 8004b94:	4607      	mov	r7, r0
 8004b96:	4691      	mov	r9, r2
 8004b98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b9c:	f108 0601 	add.w	r6, r8, #1
 8004ba0:	42b3      	cmp	r3, r6
 8004ba2:	db0b      	blt.n	8004bbc <__lshift+0x38>
 8004ba4:	4638      	mov	r0, r7
 8004ba6:	f7ff fddf 	bl	8004768 <_Balloc>
 8004baa:	4605      	mov	r5, r0
 8004bac:	b948      	cbnz	r0, 8004bc2 <__lshift+0x3e>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	4b28      	ldr	r3, [pc, #160]	@ (8004c54 <__lshift+0xd0>)
 8004bb2:	4829      	ldr	r0, [pc, #164]	@ (8004c58 <__lshift+0xd4>)
 8004bb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004bb8:	f000 fa22 	bl	8005000 <__assert_func>
 8004bbc:	3101      	adds	r1, #1
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	e7ee      	b.n	8004ba0 <__lshift+0x1c>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f100 0114 	add.w	r1, r0, #20
 8004bc8:	f100 0210 	add.w	r2, r0, #16
 8004bcc:	4618      	mov	r0, r3
 8004bce:	4553      	cmp	r3, sl
 8004bd0:	db33      	blt.n	8004c3a <__lshift+0xb6>
 8004bd2:	6920      	ldr	r0, [r4, #16]
 8004bd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004bd8:	f104 0314 	add.w	r3, r4, #20
 8004bdc:	f019 091f 	ands.w	r9, r9, #31
 8004be0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004be4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004be8:	d02b      	beq.n	8004c42 <__lshift+0xbe>
 8004bea:	f1c9 0e20 	rsb	lr, r9, #32
 8004bee:	468a      	mov	sl, r1
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	fa00 f009 	lsl.w	r0, r0, r9
 8004bf8:	4310      	orrs	r0, r2
 8004bfa:	f84a 0b04 	str.w	r0, [sl], #4
 8004bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c02:	459c      	cmp	ip, r3
 8004c04:	fa22 f20e 	lsr.w	r2, r2, lr
 8004c08:	d8f3      	bhi.n	8004bf2 <__lshift+0x6e>
 8004c0a:	ebac 0304 	sub.w	r3, ip, r4
 8004c0e:	3b15      	subs	r3, #21
 8004c10:	f023 0303 	bic.w	r3, r3, #3
 8004c14:	3304      	adds	r3, #4
 8004c16:	f104 0015 	add.w	r0, r4, #21
 8004c1a:	4584      	cmp	ip, r0
 8004c1c:	bf38      	it	cc
 8004c1e:	2304      	movcc	r3, #4
 8004c20:	50ca      	str	r2, [r1, r3]
 8004c22:	b10a      	cbz	r2, 8004c28 <__lshift+0xa4>
 8004c24:	f108 0602 	add.w	r6, r8, #2
 8004c28:	3e01      	subs	r6, #1
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	612e      	str	r6, [r5, #16]
 8004c2e:	4621      	mov	r1, r4
 8004c30:	f7ff fdda 	bl	80047e8 <_Bfree>
 8004c34:	4628      	mov	r0, r5
 8004c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004c3e:	3301      	adds	r3, #1
 8004c40:	e7c5      	b.n	8004bce <__lshift+0x4a>
 8004c42:	3904      	subs	r1, #4
 8004c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c48:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c4c:	459c      	cmp	ip, r3
 8004c4e:	d8f9      	bhi.n	8004c44 <__lshift+0xc0>
 8004c50:	e7ea      	b.n	8004c28 <__lshift+0xa4>
 8004c52:	bf00      	nop
 8004c54:	080056f0 	.word	0x080056f0
 8004c58:	08005701 	.word	0x08005701

08004c5c <__mcmp>:
 8004c5c:	690a      	ldr	r2, [r1, #16]
 8004c5e:	4603      	mov	r3, r0
 8004c60:	6900      	ldr	r0, [r0, #16]
 8004c62:	1a80      	subs	r0, r0, r2
 8004c64:	b530      	push	{r4, r5, lr}
 8004c66:	d10e      	bne.n	8004c86 <__mcmp+0x2a>
 8004c68:	3314      	adds	r3, #20
 8004c6a:	3114      	adds	r1, #20
 8004c6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004c70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004c74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004c7c:	4295      	cmp	r5, r2
 8004c7e:	d003      	beq.n	8004c88 <__mcmp+0x2c>
 8004c80:	d205      	bcs.n	8004c8e <__mcmp+0x32>
 8004c82:	f04f 30ff 	mov.w	r0, #4294967295
 8004c86:	bd30      	pop	{r4, r5, pc}
 8004c88:	42a3      	cmp	r3, r4
 8004c8a:	d3f3      	bcc.n	8004c74 <__mcmp+0x18>
 8004c8c:	e7fb      	b.n	8004c86 <__mcmp+0x2a>
 8004c8e:	2001      	movs	r0, #1
 8004c90:	e7f9      	b.n	8004c86 <__mcmp+0x2a>
	...

08004c94 <__mdiff>:
 8004c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c98:	4689      	mov	r9, r1
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4648      	mov	r0, r9
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	f7ff ffdb 	bl	8004c5c <__mcmp>
 8004ca6:	1e05      	subs	r5, r0, #0
 8004ca8:	d112      	bne.n	8004cd0 <__mdiff+0x3c>
 8004caa:	4629      	mov	r1, r5
 8004cac:	4630      	mov	r0, r6
 8004cae:	f7ff fd5b 	bl	8004768 <_Balloc>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	b928      	cbnz	r0, 8004cc2 <__mdiff+0x2e>
 8004cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8004db4 <__mdiff+0x120>)
 8004cb8:	f240 2137 	movw	r1, #567	@ 0x237
 8004cbc:	483e      	ldr	r0, [pc, #248]	@ (8004db8 <__mdiff+0x124>)
 8004cbe:	f000 f99f 	bl	8005000 <__assert_func>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004cc8:	4610      	mov	r0, r2
 8004cca:	b003      	add	sp, #12
 8004ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd0:	bfbc      	itt	lt
 8004cd2:	464b      	movlt	r3, r9
 8004cd4:	46a1      	movlt	r9, r4
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004cdc:	bfba      	itte	lt
 8004cde:	461c      	movlt	r4, r3
 8004ce0:	2501      	movlt	r5, #1
 8004ce2:	2500      	movge	r5, #0
 8004ce4:	f7ff fd40 	bl	8004768 <_Balloc>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	b918      	cbnz	r0, 8004cf4 <__mdiff+0x60>
 8004cec:	4b31      	ldr	r3, [pc, #196]	@ (8004db4 <__mdiff+0x120>)
 8004cee:	f240 2145 	movw	r1, #581	@ 0x245
 8004cf2:	e7e3      	b.n	8004cbc <__mdiff+0x28>
 8004cf4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004cf8:	6926      	ldr	r6, [r4, #16]
 8004cfa:	60c5      	str	r5, [r0, #12]
 8004cfc:	f109 0310 	add.w	r3, r9, #16
 8004d00:	f109 0514 	add.w	r5, r9, #20
 8004d04:	f104 0e14 	add.w	lr, r4, #20
 8004d08:	f100 0b14 	add.w	fp, r0, #20
 8004d0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004d10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004d14:	9301      	str	r3, [sp, #4]
 8004d16:	46d9      	mov	r9, fp
 8004d18:	f04f 0c00 	mov.w	ip, #0
 8004d1c:	9b01      	ldr	r3, [sp, #4]
 8004d1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004d22:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004d26:	9301      	str	r3, [sp, #4]
 8004d28:	fa1f f38a 	uxth.w	r3, sl
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	b283      	uxth	r3, r0
 8004d30:	1acb      	subs	r3, r1, r3
 8004d32:	0c00      	lsrs	r0, r0, #16
 8004d34:	4463      	add	r3, ip
 8004d36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004d3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004d44:	4576      	cmp	r6, lr
 8004d46:	f849 3b04 	str.w	r3, [r9], #4
 8004d4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004d4e:	d8e5      	bhi.n	8004d1c <__mdiff+0x88>
 8004d50:	1b33      	subs	r3, r6, r4
 8004d52:	3b15      	subs	r3, #21
 8004d54:	f023 0303 	bic.w	r3, r3, #3
 8004d58:	3415      	adds	r4, #21
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	42a6      	cmp	r6, r4
 8004d5e:	bf38      	it	cc
 8004d60:	2304      	movcc	r3, #4
 8004d62:	441d      	add	r5, r3
 8004d64:	445b      	add	r3, fp
 8004d66:	461e      	mov	r6, r3
 8004d68:	462c      	mov	r4, r5
 8004d6a:	4544      	cmp	r4, r8
 8004d6c:	d30e      	bcc.n	8004d8c <__mdiff+0xf8>
 8004d6e:	f108 0103 	add.w	r1, r8, #3
 8004d72:	1b49      	subs	r1, r1, r5
 8004d74:	f021 0103 	bic.w	r1, r1, #3
 8004d78:	3d03      	subs	r5, #3
 8004d7a:	45a8      	cmp	r8, r5
 8004d7c:	bf38      	it	cc
 8004d7e:	2100      	movcc	r1, #0
 8004d80:	440b      	add	r3, r1
 8004d82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004d86:	b191      	cbz	r1, 8004dae <__mdiff+0x11a>
 8004d88:	6117      	str	r7, [r2, #16]
 8004d8a:	e79d      	b.n	8004cc8 <__mdiff+0x34>
 8004d8c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004d90:	46e6      	mov	lr, ip
 8004d92:	0c08      	lsrs	r0, r1, #16
 8004d94:	fa1c fc81 	uxtah	ip, ip, r1
 8004d98:	4471      	add	r1, lr
 8004d9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004d9e:	b289      	uxth	r1, r1
 8004da0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004da4:	f846 1b04 	str.w	r1, [r6], #4
 8004da8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004dac:	e7dd      	b.n	8004d6a <__mdiff+0xd6>
 8004dae:	3f01      	subs	r7, #1
 8004db0:	e7e7      	b.n	8004d82 <__mdiff+0xee>
 8004db2:	bf00      	nop
 8004db4:	080056f0 	.word	0x080056f0
 8004db8:	08005701 	.word	0x08005701

08004dbc <__d2b>:
 8004dbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004dc0:	460f      	mov	r7, r1
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	ec59 8b10 	vmov	r8, r9, d0
 8004dc8:	4616      	mov	r6, r2
 8004dca:	f7ff fccd 	bl	8004768 <_Balloc>
 8004dce:	4604      	mov	r4, r0
 8004dd0:	b930      	cbnz	r0, 8004de0 <__d2b+0x24>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	4b23      	ldr	r3, [pc, #140]	@ (8004e64 <__d2b+0xa8>)
 8004dd6:	4824      	ldr	r0, [pc, #144]	@ (8004e68 <__d2b+0xac>)
 8004dd8:	f240 310f 	movw	r1, #783	@ 0x30f
 8004ddc:	f000 f910 	bl	8005000 <__assert_func>
 8004de0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004de4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004de8:	b10d      	cbz	r5, 8004dee <__d2b+0x32>
 8004dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dee:	9301      	str	r3, [sp, #4]
 8004df0:	f1b8 0300 	subs.w	r3, r8, #0
 8004df4:	d023      	beq.n	8004e3e <__d2b+0x82>
 8004df6:	4668      	mov	r0, sp
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	f7ff fd7c 	bl	80048f6 <__lo0bits>
 8004dfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004e02:	b1d0      	cbz	r0, 8004e3a <__d2b+0x7e>
 8004e04:	f1c0 0320 	rsb	r3, r0, #32
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	40c2      	lsrs	r2, r0
 8004e10:	6163      	str	r3, [r4, #20]
 8004e12:	9201      	str	r2, [sp, #4]
 8004e14:	9b01      	ldr	r3, [sp, #4]
 8004e16:	61a3      	str	r3, [r4, #24]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2201      	moveq	r2, #1
 8004e1e:	2202      	movne	r2, #2
 8004e20:	6122      	str	r2, [r4, #16]
 8004e22:	b1a5      	cbz	r5, 8004e4e <__d2b+0x92>
 8004e24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004e28:	4405      	add	r5, r0
 8004e2a:	603d      	str	r5, [r7, #0]
 8004e2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004e30:	6030      	str	r0, [r6, #0]
 8004e32:	4620      	mov	r0, r4
 8004e34:	b003      	add	sp, #12
 8004e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e3a:	6161      	str	r1, [r4, #20]
 8004e3c:	e7ea      	b.n	8004e14 <__d2b+0x58>
 8004e3e:	a801      	add	r0, sp, #4
 8004e40:	f7ff fd59 	bl	80048f6 <__lo0bits>
 8004e44:	9b01      	ldr	r3, [sp, #4]
 8004e46:	6163      	str	r3, [r4, #20]
 8004e48:	3020      	adds	r0, #32
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	e7e8      	b.n	8004e20 <__d2b+0x64>
 8004e4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004e52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004e56:	6038      	str	r0, [r7, #0]
 8004e58:	6918      	ldr	r0, [r3, #16]
 8004e5a:	f7ff fd2d 	bl	80048b8 <__hi0bits>
 8004e5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004e62:	e7e5      	b.n	8004e30 <__d2b+0x74>
 8004e64:	080056f0 	.word	0x080056f0
 8004e68:	08005701 	.word	0x08005701

08004e6c <__sflush_r>:
 8004e6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e74:	0716      	lsls	r6, r2, #28
 8004e76:	4605      	mov	r5, r0
 8004e78:	460c      	mov	r4, r1
 8004e7a:	d454      	bmi.n	8004f26 <__sflush_r+0xba>
 8004e7c:	684b      	ldr	r3, [r1, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	dc02      	bgt.n	8004e88 <__sflush_r+0x1c>
 8004e82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	dd48      	ble.n	8004f1a <__sflush_r+0xae>
 8004e88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e8a:	2e00      	cmp	r6, #0
 8004e8c:	d045      	beq.n	8004f1a <__sflush_r+0xae>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e94:	682f      	ldr	r7, [r5, #0]
 8004e96:	6a21      	ldr	r1, [r4, #32]
 8004e98:	602b      	str	r3, [r5, #0]
 8004e9a:	d030      	beq.n	8004efe <__sflush_r+0x92>
 8004e9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	0759      	lsls	r1, r3, #29
 8004ea2:	d505      	bpl.n	8004eb0 <__sflush_r+0x44>
 8004ea4:	6863      	ldr	r3, [r4, #4]
 8004ea6:	1ad2      	subs	r2, r2, r3
 8004ea8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004eaa:	b10b      	cbz	r3, 8004eb0 <__sflush_r+0x44>
 8004eac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004eae:	1ad2      	subs	r2, r2, r3
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004eb4:	6a21      	ldr	r1, [r4, #32]
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	47b0      	blx	r6
 8004eba:	1c43      	adds	r3, r0, #1
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	d106      	bne.n	8004ece <__sflush_r+0x62>
 8004ec0:	6829      	ldr	r1, [r5, #0]
 8004ec2:	291d      	cmp	r1, #29
 8004ec4:	d82b      	bhi.n	8004f1e <__sflush_r+0xb2>
 8004ec6:	4a2a      	ldr	r2, [pc, #168]	@ (8004f70 <__sflush_r+0x104>)
 8004ec8:	410a      	asrs	r2, r1
 8004eca:	07d6      	lsls	r6, r2, #31
 8004ecc:	d427      	bmi.n	8004f1e <__sflush_r+0xb2>
 8004ece:	2200      	movs	r2, #0
 8004ed0:	6062      	str	r2, [r4, #4]
 8004ed2:	04d9      	lsls	r1, r3, #19
 8004ed4:	6922      	ldr	r2, [r4, #16]
 8004ed6:	6022      	str	r2, [r4, #0]
 8004ed8:	d504      	bpl.n	8004ee4 <__sflush_r+0x78>
 8004eda:	1c42      	adds	r2, r0, #1
 8004edc:	d101      	bne.n	8004ee2 <__sflush_r+0x76>
 8004ede:	682b      	ldr	r3, [r5, #0]
 8004ee0:	b903      	cbnz	r3, 8004ee4 <__sflush_r+0x78>
 8004ee2:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ee6:	602f      	str	r7, [r5, #0]
 8004ee8:	b1b9      	cbz	r1, 8004f1a <__sflush_r+0xae>
 8004eea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004eee:	4299      	cmp	r1, r3
 8004ef0:	d002      	beq.n	8004ef8 <__sflush_r+0x8c>
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f7ff fb38 	bl	8004568 <_free_r>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	6363      	str	r3, [r4, #52]	@ 0x34
 8004efc:	e00d      	b.n	8004f1a <__sflush_r+0xae>
 8004efe:	2301      	movs	r3, #1
 8004f00:	4628      	mov	r0, r5
 8004f02:	47b0      	blx	r6
 8004f04:	4602      	mov	r2, r0
 8004f06:	1c50      	adds	r0, r2, #1
 8004f08:	d1c9      	bne.n	8004e9e <__sflush_r+0x32>
 8004f0a:	682b      	ldr	r3, [r5, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0c6      	beq.n	8004e9e <__sflush_r+0x32>
 8004f10:	2b1d      	cmp	r3, #29
 8004f12:	d001      	beq.n	8004f18 <__sflush_r+0xac>
 8004f14:	2b16      	cmp	r3, #22
 8004f16:	d11e      	bne.n	8004f56 <__sflush_r+0xea>
 8004f18:	602f      	str	r7, [r5, #0]
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	e022      	b.n	8004f64 <__sflush_r+0xf8>
 8004f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f22:	b21b      	sxth	r3, r3
 8004f24:	e01b      	b.n	8004f5e <__sflush_r+0xf2>
 8004f26:	690f      	ldr	r7, [r1, #16]
 8004f28:	2f00      	cmp	r7, #0
 8004f2a:	d0f6      	beq.n	8004f1a <__sflush_r+0xae>
 8004f2c:	0793      	lsls	r3, r2, #30
 8004f2e:	680e      	ldr	r6, [r1, #0]
 8004f30:	bf08      	it	eq
 8004f32:	694b      	ldreq	r3, [r1, #20]
 8004f34:	600f      	str	r7, [r1, #0]
 8004f36:	bf18      	it	ne
 8004f38:	2300      	movne	r3, #0
 8004f3a:	eba6 0807 	sub.w	r8, r6, r7
 8004f3e:	608b      	str	r3, [r1, #8]
 8004f40:	f1b8 0f00 	cmp.w	r8, #0
 8004f44:	dde9      	ble.n	8004f1a <__sflush_r+0xae>
 8004f46:	6a21      	ldr	r1, [r4, #32]
 8004f48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f4a:	4643      	mov	r3, r8
 8004f4c:	463a      	mov	r2, r7
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b0      	blx	r6
 8004f52:	2800      	cmp	r0, #0
 8004f54:	dc08      	bgt.n	8004f68 <__sflush_r+0xfc>
 8004f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f5e:	81a3      	strh	r3, [r4, #12]
 8004f60:	f04f 30ff 	mov.w	r0, #4294967295
 8004f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f68:	4407      	add	r7, r0
 8004f6a:	eba8 0800 	sub.w	r8, r8, r0
 8004f6e:	e7e7      	b.n	8004f40 <__sflush_r+0xd4>
 8004f70:	dfbffffe 	.word	0xdfbffffe

08004f74 <_fflush_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	690b      	ldr	r3, [r1, #16]
 8004f78:	4605      	mov	r5, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	b913      	cbnz	r3, 8004f84 <_fflush_r+0x10>
 8004f7e:	2500      	movs	r5, #0
 8004f80:	4628      	mov	r0, r5
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
 8004f84:	b118      	cbz	r0, 8004f8e <_fflush_r+0x1a>
 8004f86:	6a03      	ldr	r3, [r0, #32]
 8004f88:	b90b      	cbnz	r3, 8004f8e <_fflush_r+0x1a>
 8004f8a:	f7fe fba5 	bl	80036d8 <__sinit>
 8004f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0f3      	beq.n	8004f7e <_fflush_r+0xa>
 8004f96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f98:	07d0      	lsls	r0, r2, #31
 8004f9a:	d404      	bmi.n	8004fa6 <_fflush_r+0x32>
 8004f9c:	0599      	lsls	r1, r3, #22
 8004f9e:	d402      	bmi.n	8004fa6 <_fflush_r+0x32>
 8004fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fa2:	f7fe fc90 	bl	80038c6 <__retarget_lock_acquire_recursive>
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	4621      	mov	r1, r4
 8004faa:	f7ff ff5f 	bl	8004e6c <__sflush_r>
 8004fae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fb0:	07da      	lsls	r2, r3, #31
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	d4e4      	bmi.n	8004f80 <_fflush_r+0xc>
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	059b      	lsls	r3, r3, #22
 8004fba:	d4e1      	bmi.n	8004f80 <_fflush_r+0xc>
 8004fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fbe:	f7fe fc83 	bl	80038c8 <__retarget_lock_release_recursive>
 8004fc2:	e7dd      	b.n	8004f80 <_fflush_r+0xc>

08004fc4 <_sbrk_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	4d06      	ldr	r5, [pc, #24]	@ (8004fe0 <_sbrk_r+0x1c>)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4608      	mov	r0, r1
 8004fce:	602b      	str	r3, [r5, #0]
 8004fd0:	f7fc f81a 	bl	8001008 <_sbrk>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_sbrk_r+0x1a>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_sbrk_r+0x1a>
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	200003c4 	.word	0x200003c4

08004fe4 <memcpy>:
 8004fe4:	440a      	add	r2, r1
 8004fe6:	4291      	cmp	r1, r2
 8004fe8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fec:	d100      	bne.n	8004ff0 <memcpy+0xc>
 8004fee:	4770      	bx	lr
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ffa:	4291      	cmp	r1, r2
 8004ffc:	d1f9      	bne.n	8004ff2 <memcpy+0xe>
 8004ffe:	bd10      	pop	{r4, pc}

08005000 <__assert_func>:
 8005000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005002:	4614      	mov	r4, r2
 8005004:	461a      	mov	r2, r3
 8005006:	4b09      	ldr	r3, [pc, #36]	@ (800502c <__assert_func+0x2c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4605      	mov	r5, r0
 800500c:	68d8      	ldr	r0, [r3, #12]
 800500e:	b954      	cbnz	r4, 8005026 <__assert_func+0x26>
 8005010:	4b07      	ldr	r3, [pc, #28]	@ (8005030 <__assert_func+0x30>)
 8005012:	461c      	mov	r4, r3
 8005014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005018:	9100      	str	r1, [sp, #0]
 800501a:	462b      	mov	r3, r5
 800501c:	4905      	ldr	r1, [pc, #20]	@ (8005034 <__assert_func+0x34>)
 800501e:	f000 f841 	bl	80050a4 <fiprintf>
 8005022:	f000 f851 	bl	80050c8 <abort>
 8005026:	4b04      	ldr	r3, [pc, #16]	@ (8005038 <__assert_func+0x38>)
 8005028:	e7f4      	b.n	8005014 <__assert_func+0x14>
 800502a:	bf00      	nop
 800502c:	20000028 	.word	0x20000028
 8005030:	0800589d 	.word	0x0800589d
 8005034:	0800586f 	.word	0x0800586f
 8005038:	08005862 	.word	0x08005862

0800503c <_calloc_r>:
 800503c:	b570      	push	{r4, r5, r6, lr}
 800503e:	fba1 5402 	umull	r5, r4, r1, r2
 8005042:	b93c      	cbnz	r4, 8005054 <_calloc_r+0x18>
 8005044:	4629      	mov	r1, r5
 8005046:	f7ff fb03 	bl	8004650 <_malloc_r>
 800504a:	4606      	mov	r6, r0
 800504c:	b928      	cbnz	r0, 800505a <_calloc_r+0x1e>
 800504e:	2600      	movs	r6, #0
 8005050:	4630      	mov	r0, r6
 8005052:	bd70      	pop	{r4, r5, r6, pc}
 8005054:	220c      	movs	r2, #12
 8005056:	6002      	str	r2, [r0, #0]
 8005058:	e7f9      	b.n	800504e <_calloc_r+0x12>
 800505a:	462a      	mov	r2, r5
 800505c:	4621      	mov	r1, r4
 800505e:	f7fe fbb4 	bl	80037ca <memset>
 8005062:	e7f5      	b.n	8005050 <_calloc_r+0x14>

08005064 <__ascii_mbtowc>:
 8005064:	b082      	sub	sp, #8
 8005066:	b901      	cbnz	r1, 800506a <__ascii_mbtowc+0x6>
 8005068:	a901      	add	r1, sp, #4
 800506a:	b142      	cbz	r2, 800507e <__ascii_mbtowc+0x1a>
 800506c:	b14b      	cbz	r3, 8005082 <__ascii_mbtowc+0x1e>
 800506e:	7813      	ldrb	r3, [r2, #0]
 8005070:	600b      	str	r3, [r1, #0]
 8005072:	7812      	ldrb	r2, [r2, #0]
 8005074:	1e10      	subs	r0, r2, #0
 8005076:	bf18      	it	ne
 8005078:	2001      	movne	r0, #1
 800507a:	b002      	add	sp, #8
 800507c:	4770      	bx	lr
 800507e:	4610      	mov	r0, r2
 8005080:	e7fb      	b.n	800507a <__ascii_mbtowc+0x16>
 8005082:	f06f 0001 	mvn.w	r0, #1
 8005086:	e7f8      	b.n	800507a <__ascii_mbtowc+0x16>

08005088 <__ascii_wctomb>:
 8005088:	4603      	mov	r3, r0
 800508a:	4608      	mov	r0, r1
 800508c:	b141      	cbz	r1, 80050a0 <__ascii_wctomb+0x18>
 800508e:	2aff      	cmp	r2, #255	@ 0xff
 8005090:	d904      	bls.n	800509c <__ascii_wctomb+0x14>
 8005092:	228a      	movs	r2, #138	@ 0x8a
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	f04f 30ff 	mov.w	r0, #4294967295
 800509a:	4770      	bx	lr
 800509c:	700a      	strb	r2, [r1, #0]
 800509e:	2001      	movs	r0, #1
 80050a0:	4770      	bx	lr
	...

080050a4 <fiprintf>:
 80050a4:	b40e      	push	{r1, r2, r3}
 80050a6:	b503      	push	{r0, r1, lr}
 80050a8:	4601      	mov	r1, r0
 80050aa:	ab03      	add	r3, sp, #12
 80050ac:	4805      	ldr	r0, [pc, #20]	@ (80050c4 <fiprintf+0x20>)
 80050ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80050b2:	6800      	ldr	r0, [r0, #0]
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	f000 f837 	bl	8005128 <_vfiprintf_r>
 80050ba:	b002      	add	sp, #8
 80050bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80050c0:	b003      	add	sp, #12
 80050c2:	4770      	bx	lr
 80050c4:	20000028 	.word	0x20000028

080050c8 <abort>:
 80050c8:	b508      	push	{r3, lr}
 80050ca:	2006      	movs	r0, #6
 80050cc:	f000 fa00 	bl	80054d0 <raise>
 80050d0:	2001      	movs	r0, #1
 80050d2:	f7fb ff21 	bl	8000f18 <_exit>

080050d6 <__sfputc_r>:
 80050d6:	6893      	ldr	r3, [r2, #8]
 80050d8:	3b01      	subs	r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	b410      	push	{r4}
 80050de:	6093      	str	r3, [r2, #8]
 80050e0:	da08      	bge.n	80050f4 <__sfputc_r+0x1e>
 80050e2:	6994      	ldr	r4, [r2, #24]
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	db01      	blt.n	80050ec <__sfputc_r+0x16>
 80050e8:	290a      	cmp	r1, #10
 80050ea:	d103      	bne.n	80050f4 <__sfputc_r+0x1e>
 80050ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050f0:	f000 b932 	b.w	8005358 <__swbuf_r>
 80050f4:	6813      	ldr	r3, [r2, #0]
 80050f6:	1c58      	adds	r0, r3, #1
 80050f8:	6010      	str	r0, [r2, #0]
 80050fa:	7019      	strb	r1, [r3, #0]
 80050fc:	4608      	mov	r0, r1
 80050fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005102:	4770      	bx	lr

08005104 <__sfputs_r>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	4606      	mov	r6, r0
 8005108:	460f      	mov	r7, r1
 800510a:	4614      	mov	r4, r2
 800510c:	18d5      	adds	r5, r2, r3
 800510e:	42ac      	cmp	r4, r5
 8005110:	d101      	bne.n	8005116 <__sfputs_r+0x12>
 8005112:	2000      	movs	r0, #0
 8005114:	e007      	b.n	8005126 <__sfputs_r+0x22>
 8005116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800511a:	463a      	mov	r2, r7
 800511c:	4630      	mov	r0, r6
 800511e:	f7ff ffda 	bl	80050d6 <__sfputc_r>
 8005122:	1c43      	adds	r3, r0, #1
 8005124:	d1f3      	bne.n	800510e <__sfputs_r+0xa>
 8005126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005128 <_vfiprintf_r>:
 8005128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512c:	460d      	mov	r5, r1
 800512e:	b09d      	sub	sp, #116	@ 0x74
 8005130:	4614      	mov	r4, r2
 8005132:	4698      	mov	r8, r3
 8005134:	4606      	mov	r6, r0
 8005136:	b118      	cbz	r0, 8005140 <_vfiprintf_r+0x18>
 8005138:	6a03      	ldr	r3, [r0, #32]
 800513a:	b90b      	cbnz	r3, 8005140 <_vfiprintf_r+0x18>
 800513c:	f7fe facc 	bl	80036d8 <__sinit>
 8005140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005142:	07d9      	lsls	r1, r3, #31
 8005144:	d405      	bmi.n	8005152 <_vfiprintf_r+0x2a>
 8005146:	89ab      	ldrh	r3, [r5, #12]
 8005148:	059a      	lsls	r2, r3, #22
 800514a:	d402      	bmi.n	8005152 <_vfiprintf_r+0x2a>
 800514c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800514e:	f7fe fbba 	bl	80038c6 <__retarget_lock_acquire_recursive>
 8005152:	89ab      	ldrh	r3, [r5, #12]
 8005154:	071b      	lsls	r3, r3, #28
 8005156:	d501      	bpl.n	800515c <_vfiprintf_r+0x34>
 8005158:	692b      	ldr	r3, [r5, #16]
 800515a:	b99b      	cbnz	r3, 8005184 <_vfiprintf_r+0x5c>
 800515c:	4629      	mov	r1, r5
 800515e:	4630      	mov	r0, r6
 8005160:	f000 f938 	bl	80053d4 <__swsetup_r>
 8005164:	b170      	cbz	r0, 8005184 <_vfiprintf_r+0x5c>
 8005166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005168:	07dc      	lsls	r4, r3, #31
 800516a:	d504      	bpl.n	8005176 <_vfiprintf_r+0x4e>
 800516c:	f04f 30ff 	mov.w	r0, #4294967295
 8005170:	b01d      	add	sp, #116	@ 0x74
 8005172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005176:	89ab      	ldrh	r3, [r5, #12]
 8005178:	0598      	lsls	r0, r3, #22
 800517a:	d4f7      	bmi.n	800516c <_vfiprintf_r+0x44>
 800517c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800517e:	f7fe fba3 	bl	80038c8 <__retarget_lock_release_recursive>
 8005182:	e7f3      	b.n	800516c <_vfiprintf_r+0x44>
 8005184:	2300      	movs	r3, #0
 8005186:	9309      	str	r3, [sp, #36]	@ 0x24
 8005188:	2320      	movs	r3, #32
 800518a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800518e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005192:	2330      	movs	r3, #48	@ 0x30
 8005194:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005344 <_vfiprintf_r+0x21c>
 8005198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800519c:	f04f 0901 	mov.w	r9, #1
 80051a0:	4623      	mov	r3, r4
 80051a2:	469a      	mov	sl, r3
 80051a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051a8:	b10a      	cbz	r2, 80051ae <_vfiprintf_r+0x86>
 80051aa:	2a25      	cmp	r2, #37	@ 0x25
 80051ac:	d1f9      	bne.n	80051a2 <_vfiprintf_r+0x7a>
 80051ae:	ebba 0b04 	subs.w	fp, sl, r4
 80051b2:	d00b      	beq.n	80051cc <_vfiprintf_r+0xa4>
 80051b4:	465b      	mov	r3, fp
 80051b6:	4622      	mov	r2, r4
 80051b8:	4629      	mov	r1, r5
 80051ba:	4630      	mov	r0, r6
 80051bc:	f7ff ffa2 	bl	8005104 <__sfputs_r>
 80051c0:	3001      	adds	r0, #1
 80051c2:	f000 80a7 	beq.w	8005314 <_vfiprintf_r+0x1ec>
 80051c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051c8:	445a      	add	r2, fp
 80051ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80051cc:	f89a 3000 	ldrb.w	r3, [sl]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 809f 	beq.w	8005314 <_vfiprintf_r+0x1ec>
 80051d6:	2300      	movs	r3, #0
 80051d8:	f04f 32ff 	mov.w	r2, #4294967295
 80051dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051e0:	f10a 0a01 	add.w	sl, sl, #1
 80051e4:	9304      	str	r3, [sp, #16]
 80051e6:	9307      	str	r3, [sp, #28]
 80051e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80051ee:	4654      	mov	r4, sl
 80051f0:	2205      	movs	r2, #5
 80051f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f6:	4853      	ldr	r0, [pc, #332]	@ (8005344 <_vfiprintf_r+0x21c>)
 80051f8:	f7fb f812 	bl	8000220 <memchr>
 80051fc:	9a04      	ldr	r2, [sp, #16]
 80051fe:	b9d8      	cbnz	r0, 8005238 <_vfiprintf_r+0x110>
 8005200:	06d1      	lsls	r1, r2, #27
 8005202:	bf44      	itt	mi
 8005204:	2320      	movmi	r3, #32
 8005206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800520a:	0713      	lsls	r3, r2, #28
 800520c:	bf44      	itt	mi
 800520e:	232b      	movmi	r3, #43	@ 0x2b
 8005210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005214:	f89a 3000 	ldrb.w	r3, [sl]
 8005218:	2b2a      	cmp	r3, #42	@ 0x2a
 800521a:	d015      	beq.n	8005248 <_vfiprintf_r+0x120>
 800521c:	9a07      	ldr	r2, [sp, #28]
 800521e:	4654      	mov	r4, sl
 8005220:	2000      	movs	r0, #0
 8005222:	f04f 0c0a 	mov.w	ip, #10
 8005226:	4621      	mov	r1, r4
 8005228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800522c:	3b30      	subs	r3, #48	@ 0x30
 800522e:	2b09      	cmp	r3, #9
 8005230:	d94b      	bls.n	80052ca <_vfiprintf_r+0x1a2>
 8005232:	b1b0      	cbz	r0, 8005262 <_vfiprintf_r+0x13a>
 8005234:	9207      	str	r2, [sp, #28]
 8005236:	e014      	b.n	8005262 <_vfiprintf_r+0x13a>
 8005238:	eba0 0308 	sub.w	r3, r0, r8
 800523c:	fa09 f303 	lsl.w	r3, r9, r3
 8005240:	4313      	orrs	r3, r2
 8005242:	9304      	str	r3, [sp, #16]
 8005244:	46a2      	mov	sl, r4
 8005246:	e7d2      	b.n	80051ee <_vfiprintf_r+0xc6>
 8005248:	9b03      	ldr	r3, [sp, #12]
 800524a:	1d19      	adds	r1, r3, #4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	9103      	str	r1, [sp, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	bfbb      	ittet	lt
 8005254:	425b      	neglt	r3, r3
 8005256:	f042 0202 	orrlt.w	r2, r2, #2
 800525a:	9307      	strge	r3, [sp, #28]
 800525c:	9307      	strlt	r3, [sp, #28]
 800525e:	bfb8      	it	lt
 8005260:	9204      	strlt	r2, [sp, #16]
 8005262:	7823      	ldrb	r3, [r4, #0]
 8005264:	2b2e      	cmp	r3, #46	@ 0x2e
 8005266:	d10a      	bne.n	800527e <_vfiprintf_r+0x156>
 8005268:	7863      	ldrb	r3, [r4, #1]
 800526a:	2b2a      	cmp	r3, #42	@ 0x2a
 800526c:	d132      	bne.n	80052d4 <_vfiprintf_r+0x1ac>
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	1d1a      	adds	r2, r3, #4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	9203      	str	r2, [sp, #12]
 8005276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800527a:	3402      	adds	r4, #2
 800527c:	9305      	str	r3, [sp, #20]
 800527e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005354 <_vfiprintf_r+0x22c>
 8005282:	7821      	ldrb	r1, [r4, #0]
 8005284:	2203      	movs	r2, #3
 8005286:	4650      	mov	r0, sl
 8005288:	f7fa ffca 	bl	8000220 <memchr>
 800528c:	b138      	cbz	r0, 800529e <_vfiprintf_r+0x176>
 800528e:	9b04      	ldr	r3, [sp, #16]
 8005290:	eba0 000a 	sub.w	r0, r0, sl
 8005294:	2240      	movs	r2, #64	@ 0x40
 8005296:	4082      	lsls	r2, r0
 8005298:	4313      	orrs	r3, r2
 800529a:	3401      	adds	r4, #1
 800529c:	9304      	str	r3, [sp, #16]
 800529e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a2:	4829      	ldr	r0, [pc, #164]	@ (8005348 <_vfiprintf_r+0x220>)
 80052a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052a8:	2206      	movs	r2, #6
 80052aa:	f7fa ffb9 	bl	8000220 <memchr>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	d03f      	beq.n	8005332 <_vfiprintf_r+0x20a>
 80052b2:	4b26      	ldr	r3, [pc, #152]	@ (800534c <_vfiprintf_r+0x224>)
 80052b4:	bb1b      	cbnz	r3, 80052fe <_vfiprintf_r+0x1d6>
 80052b6:	9b03      	ldr	r3, [sp, #12]
 80052b8:	3307      	adds	r3, #7
 80052ba:	f023 0307 	bic.w	r3, r3, #7
 80052be:	3308      	adds	r3, #8
 80052c0:	9303      	str	r3, [sp, #12]
 80052c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052c4:	443b      	add	r3, r7
 80052c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80052c8:	e76a      	b.n	80051a0 <_vfiprintf_r+0x78>
 80052ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80052ce:	460c      	mov	r4, r1
 80052d0:	2001      	movs	r0, #1
 80052d2:	e7a8      	b.n	8005226 <_vfiprintf_r+0xfe>
 80052d4:	2300      	movs	r3, #0
 80052d6:	3401      	adds	r4, #1
 80052d8:	9305      	str	r3, [sp, #20]
 80052da:	4619      	mov	r1, r3
 80052dc:	f04f 0c0a 	mov.w	ip, #10
 80052e0:	4620      	mov	r0, r4
 80052e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052e6:	3a30      	subs	r2, #48	@ 0x30
 80052e8:	2a09      	cmp	r2, #9
 80052ea:	d903      	bls.n	80052f4 <_vfiprintf_r+0x1cc>
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0c6      	beq.n	800527e <_vfiprintf_r+0x156>
 80052f0:	9105      	str	r1, [sp, #20]
 80052f2:	e7c4      	b.n	800527e <_vfiprintf_r+0x156>
 80052f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80052f8:	4604      	mov	r4, r0
 80052fa:	2301      	movs	r3, #1
 80052fc:	e7f0      	b.n	80052e0 <_vfiprintf_r+0x1b8>
 80052fe:	ab03      	add	r3, sp, #12
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	462a      	mov	r2, r5
 8005304:	4b12      	ldr	r3, [pc, #72]	@ (8005350 <_vfiprintf_r+0x228>)
 8005306:	a904      	add	r1, sp, #16
 8005308:	4630      	mov	r0, r6
 800530a:	f7fd fda1 	bl	8002e50 <_printf_float>
 800530e:	4607      	mov	r7, r0
 8005310:	1c78      	adds	r0, r7, #1
 8005312:	d1d6      	bne.n	80052c2 <_vfiprintf_r+0x19a>
 8005314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005316:	07d9      	lsls	r1, r3, #31
 8005318:	d405      	bmi.n	8005326 <_vfiprintf_r+0x1fe>
 800531a:	89ab      	ldrh	r3, [r5, #12]
 800531c:	059a      	lsls	r2, r3, #22
 800531e:	d402      	bmi.n	8005326 <_vfiprintf_r+0x1fe>
 8005320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005322:	f7fe fad1 	bl	80038c8 <__retarget_lock_release_recursive>
 8005326:	89ab      	ldrh	r3, [r5, #12]
 8005328:	065b      	lsls	r3, r3, #25
 800532a:	f53f af1f 	bmi.w	800516c <_vfiprintf_r+0x44>
 800532e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005330:	e71e      	b.n	8005170 <_vfiprintf_r+0x48>
 8005332:	ab03      	add	r3, sp, #12
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	462a      	mov	r2, r5
 8005338:	4b05      	ldr	r3, [pc, #20]	@ (8005350 <_vfiprintf_r+0x228>)
 800533a:	a904      	add	r1, sp, #16
 800533c:	4630      	mov	r0, r6
 800533e:	f7fe f81f 	bl	8003380 <_printf_i>
 8005342:	e7e4      	b.n	800530e <_vfiprintf_r+0x1e6>
 8005344:	0800599f 	.word	0x0800599f
 8005348:	080059a9 	.word	0x080059a9
 800534c:	08002e51 	.word	0x08002e51
 8005350:	08005105 	.word	0x08005105
 8005354:	080059a5 	.word	0x080059a5

08005358 <__swbuf_r>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	460e      	mov	r6, r1
 800535c:	4614      	mov	r4, r2
 800535e:	4605      	mov	r5, r0
 8005360:	b118      	cbz	r0, 800536a <__swbuf_r+0x12>
 8005362:	6a03      	ldr	r3, [r0, #32]
 8005364:	b90b      	cbnz	r3, 800536a <__swbuf_r+0x12>
 8005366:	f7fe f9b7 	bl	80036d8 <__sinit>
 800536a:	69a3      	ldr	r3, [r4, #24]
 800536c:	60a3      	str	r3, [r4, #8]
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	071a      	lsls	r2, r3, #28
 8005372:	d501      	bpl.n	8005378 <__swbuf_r+0x20>
 8005374:	6923      	ldr	r3, [r4, #16]
 8005376:	b943      	cbnz	r3, 800538a <__swbuf_r+0x32>
 8005378:	4621      	mov	r1, r4
 800537a:	4628      	mov	r0, r5
 800537c:	f000 f82a 	bl	80053d4 <__swsetup_r>
 8005380:	b118      	cbz	r0, 800538a <__swbuf_r+0x32>
 8005382:	f04f 37ff 	mov.w	r7, #4294967295
 8005386:	4638      	mov	r0, r7
 8005388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	6922      	ldr	r2, [r4, #16]
 800538e:	1a98      	subs	r0, r3, r2
 8005390:	6963      	ldr	r3, [r4, #20]
 8005392:	b2f6      	uxtb	r6, r6
 8005394:	4283      	cmp	r3, r0
 8005396:	4637      	mov	r7, r6
 8005398:	dc05      	bgt.n	80053a6 <__swbuf_r+0x4e>
 800539a:	4621      	mov	r1, r4
 800539c:	4628      	mov	r0, r5
 800539e:	f7ff fde9 	bl	8004f74 <_fflush_r>
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d1ed      	bne.n	8005382 <__swbuf_r+0x2a>
 80053a6:	68a3      	ldr	r3, [r4, #8]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	60a3      	str	r3, [r4, #8]
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	6022      	str	r2, [r4, #0]
 80053b2:	701e      	strb	r6, [r3, #0]
 80053b4:	6962      	ldr	r2, [r4, #20]
 80053b6:	1c43      	adds	r3, r0, #1
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d004      	beq.n	80053c6 <__swbuf_r+0x6e>
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	07db      	lsls	r3, r3, #31
 80053c0:	d5e1      	bpl.n	8005386 <__swbuf_r+0x2e>
 80053c2:	2e0a      	cmp	r6, #10
 80053c4:	d1df      	bne.n	8005386 <__swbuf_r+0x2e>
 80053c6:	4621      	mov	r1, r4
 80053c8:	4628      	mov	r0, r5
 80053ca:	f7ff fdd3 	bl	8004f74 <_fflush_r>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d0d9      	beq.n	8005386 <__swbuf_r+0x2e>
 80053d2:	e7d6      	b.n	8005382 <__swbuf_r+0x2a>

080053d4 <__swsetup_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4b29      	ldr	r3, [pc, #164]	@ (800547c <__swsetup_r+0xa8>)
 80053d8:	4605      	mov	r5, r0
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	460c      	mov	r4, r1
 80053de:	b118      	cbz	r0, 80053e8 <__swsetup_r+0x14>
 80053e0:	6a03      	ldr	r3, [r0, #32]
 80053e2:	b90b      	cbnz	r3, 80053e8 <__swsetup_r+0x14>
 80053e4:	f7fe f978 	bl	80036d8 <__sinit>
 80053e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ec:	0719      	lsls	r1, r3, #28
 80053ee:	d422      	bmi.n	8005436 <__swsetup_r+0x62>
 80053f0:	06da      	lsls	r2, r3, #27
 80053f2:	d407      	bmi.n	8005404 <__swsetup_r+0x30>
 80053f4:	2209      	movs	r2, #9
 80053f6:	602a      	str	r2, [r5, #0]
 80053f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053fc:	81a3      	strh	r3, [r4, #12]
 80053fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005402:	e033      	b.n	800546c <__swsetup_r+0x98>
 8005404:	0758      	lsls	r0, r3, #29
 8005406:	d512      	bpl.n	800542e <__swsetup_r+0x5a>
 8005408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800540a:	b141      	cbz	r1, 800541e <__swsetup_r+0x4a>
 800540c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005410:	4299      	cmp	r1, r3
 8005412:	d002      	beq.n	800541a <__swsetup_r+0x46>
 8005414:	4628      	mov	r0, r5
 8005416:	f7ff f8a7 	bl	8004568 <_free_r>
 800541a:	2300      	movs	r3, #0
 800541c:	6363      	str	r3, [r4, #52]	@ 0x34
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005424:	81a3      	strh	r3, [r4, #12]
 8005426:	2300      	movs	r3, #0
 8005428:	6063      	str	r3, [r4, #4]
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	f043 0308 	orr.w	r3, r3, #8
 8005434:	81a3      	strh	r3, [r4, #12]
 8005436:	6923      	ldr	r3, [r4, #16]
 8005438:	b94b      	cbnz	r3, 800544e <__swsetup_r+0x7a>
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005444:	d003      	beq.n	800544e <__swsetup_r+0x7a>
 8005446:	4621      	mov	r1, r4
 8005448:	4628      	mov	r0, r5
 800544a:	f000 f883 	bl	8005554 <__smakebuf_r>
 800544e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005452:	f013 0201 	ands.w	r2, r3, #1
 8005456:	d00a      	beq.n	800546e <__swsetup_r+0x9a>
 8005458:	2200      	movs	r2, #0
 800545a:	60a2      	str	r2, [r4, #8]
 800545c:	6962      	ldr	r2, [r4, #20]
 800545e:	4252      	negs	r2, r2
 8005460:	61a2      	str	r2, [r4, #24]
 8005462:	6922      	ldr	r2, [r4, #16]
 8005464:	b942      	cbnz	r2, 8005478 <__swsetup_r+0xa4>
 8005466:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800546a:	d1c5      	bne.n	80053f8 <__swsetup_r+0x24>
 800546c:	bd38      	pop	{r3, r4, r5, pc}
 800546e:	0799      	lsls	r1, r3, #30
 8005470:	bf58      	it	pl
 8005472:	6962      	ldrpl	r2, [r4, #20]
 8005474:	60a2      	str	r2, [r4, #8]
 8005476:	e7f4      	b.n	8005462 <__swsetup_r+0x8e>
 8005478:	2000      	movs	r0, #0
 800547a:	e7f7      	b.n	800546c <__swsetup_r+0x98>
 800547c:	20000028 	.word	0x20000028

08005480 <_raise_r>:
 8005480:	291f      	cmp	r1, #31
 8005482:	b538      	push	{r3, r4, r5, lr}
 8005484:	4605      	mov	r5, r0
 8005486:	460c      	mov	r4, r1
 8005488:	d904      	bls.n	8005494 <_raise_r+0x14>
 800548a:	2316      	movs	r3, #22
 800548c:	6003      	str	r3, [r0, #0]
 800548e:	f04f 30ff 	mov.w	r0, #4294967295
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005496:	b112      	cbz	r2, 800549e <_raise_r+0x1e>
 8005498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800549c:	b94b      	cbnz	r3, 80054b2 <_raise_r+0x32>
 800549e:	4628      	mov	r0, r5
 80054a0:	f000 f830 	bl	8005504 <_getpid_r>
 80054a4:	4622      	mov	r2, r4
 80054a6:	4601      	mov	r1, r0
 80054a8:	4628      	mov	r0, r5
 80054aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054ae:	f000 b817 	b.w	80054e0 <_kill_r>
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d00a      	beq.n	80054cc <_raise_r+0x4c>
 80054b6:	1c59      	adds	r1, r3, #1
 80054b8:	d103      	bne.n	80054c2 <_raise_r+0x42>
 80054ba:	2316      	movs	r3, #22
 80054bc:	6003      	str	r3, [r0, #0]
 80054be:	2001      	movs	r0, #1
 80054c0:	e7e7      	b.n	8005492 <_raise_r+0x12>
 80054c2:	2100      	movs	r1, #0
 80054c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80054c8:	4620      	mov	r0, r4
 80054ca:	4798      	blx	r3
 80054cc:	2000      	movs	r0, #0
 80054ce:	e7e0      	b.n	8005492 <_raise_r+0x12>

080054d0 <raise>:
 80054d0:	4b02      	ldr	r3, [pc, #8]	@ (80054dc <raise+0xc>)
 80054d2:	4601      	mov	r1, r0
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	f7ff bfd3 	b.w	8005480 <_raise_r>
 80054da:	bf00      	nop
 80054dc:	20000028 	.word	0x20000028

080054e0 <_kill_r>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4d07      	ldr	r5, [pc, #28]	@ (8005500 <_kill_r+0x20>)
 80054e4:	2300      	movs	r3, #0
 80054e6:	4604      	mov	r4, r0
 80054e8:	4608      	mov	r0, r1
 80054ea:	4611      	mov	r1, r2
 80054ec:	602b      	str	r3, [r5, #0]
 80054ee:	f7fb fd03 	bl	8000ef8 <_kill>
 80054f2:	1c43      	adds	r3, r0, #1
 80054f4:	d102      	bne.n	80054fc <_kill_r+0x1c>
 80054f6:	682b      	ldr	r3, [r5, #0]
 80054f8:	b103      	cbz	r3, 80054fc <_kill_r+0x1c>
 80054fa:	6023      	str	r3, [r4, #0]
 80054fc:	bd38      	pop	{r3, r4, r5, pc}
 80054fe:	bf00      	nop
 8005500:	200003c4 	.word	0x200003c4

08005504 <_getpid_r>:
 8005504:	f7fb bcf0 	b.w	8000ee8 <_getpid>

08005508 <__swhatbuf_r>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	460c      	mov	r4, r1
 800550c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005510:	2900      	cmp	r1, #0
 8005512:	b096      	sub	sp, #88	@ 0x58
 8005514:	4615      	mov	r5, r2
 8005516:	461e      	mov	r6, r3
 8005518:	da0d      	bge.n	8005536 <__swhatbuf_r+0x2e>
 800551a:	89a3      	ldrh	r3, [r4, #12]
 800551c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005520:	f04f 0100 	mov.w	r1, #0
 8005524:	bf14      	ite	ne
 8005526:	2340      	movne	r3, #64	@ 0x40
 8005528:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800552c:	2000      	movs	r0, #0
 800552e:	6031      	str	r1, [r6, #0]
 8005530:	602b      	str	r3, [r5, #0]
 8005532:	b016      	add	sp, #88	@ 0x58
 8005534:	bd70      	pop	{r4, r5, r6, pc}
 8005536:	466a      	mov	r2, sp
 8005538:	f000 f848 	bl	80055cc <_fstat_r>
 800553c:	2800      	cmp	r0, #0
 800553e:	dbec      	blt.n	800551a <__swhatbuf_r+0x12>
 8005540:	9901      	ldr	r1, [sp, #4]
 8005542:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005546:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800554a:	4259      	negs	r1, r3
 800554c:	4159      	adcs	r1, r3
 800554e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005552:	e7eb      	b.n	800552c <__swhatbuf_r+0x24>

08005554 <__smakebuf_r>:
 8005554:	898b      	ldrh	r3, [r1, #12]
 8005556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005558:	079d      	lsls	r5, r3, #30
 800555a:	4606      	mov	r6, r0
 800555c:	460c      	mov	r4, r1
 800555e:	d507      	bpl.n	8005570 <__smakebuf_r+0x1c>
 8005560:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	6123      	str	r3, [r4, #16]
 8005568:	2301      	movs	r3, #1
 800556a:	6163      	str	r3, [r4, #20]
 800556c:	b003      	add	sp, #12
 800556e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005570:	ab01      	add	r3, sp, #4
 8005572:	466a      	mov	r2, sp
 8005574:	f7ff ffc8 	bl	8005508 <__swhatbuf_r>
 8005578:	9f00      	ldr	r7, [sp, #0]
 800557a:	4605      	mov	r5, r0
 800557c:	4639      	mov	r1, r7
 800557e:	4630      	mov	r0, r6
 8005580:	f7ff f866 	bl	8004650 <_malloc_r>
 8005584:	b948      	cbnz	r0, 800559a <__smakebuf_r+0x46>
 8005586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800558a:	059a      	lsls	r2, r3, #22
 800558c:	d4ee      	bmi.n	800556c <__smakebuf_r+0x18>
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	f043 0302 	orr.w	r3, r3, #2
 8005596:	81a3      	strh	r3, [r4, #12]
 8005598:	e7e2      	b.n	8005560 <__smakebuf_r+0xc>
 800559a:	89a3      	ldrh	r3, [r4, #12]
 800559c:	6020      	str	r0, [r4, #0]
 800559e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a2:	81a3      	strh	r3, [r4, #12]
 80055a4:	9b01      	ldr	r3, [sp, #4]
 80055a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055aa:	b15b      	cbz	r3, 80055c4 <__smakebuf_r+0x70>
 80055ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055b0:	4630      	mov	r0, r6
 80055b2:	f000 f81d 	bl	80055f0 <_isatty_r>
 80055b6:	b128      	cbz	r0, 80055c4 <__smakebuf_r+0x70>
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	81a3      	strh	r3, [r4, #12]
 80055c4:	89a3      	ldrh	r3, [r4, #12]
 80055c6:	431d      	orrs	r5, r3
 80055c8:	81a5      	strh	r5, [r4, #12]
 80055ca:	e7cf      	b.n	800556c <__smakebuf_r+0x18>

080055cc <_fstat_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	4d07      	ldr	r5, [pc, #28]	@ (80055ec <_fstat_r+0x20>)
 80055d0:	2300      	movs	r3, #0
 80055d2:	4604      	mov	r4, r0
 80055d4:	4608      	mov	r0, r1
 80055d6:	4611      	mov	r1, r2
 80055d8:	602b      	str	r3, [r5, #0]
 80055da:	f7fb fced 	bl	8000fb8 <_fstat>
 80055de:	1c43      	adds	r3, r0, #1
 80055e0:	d102      	bne.n	80055e8 <_fstat_r+0x1c>
 80055e2:	682b      	ldr	r3, [r5, #0]
 80055e4:	b103      	cbz	r3, 80055e8 <_fstat_r+0x1c>
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	bd38      	pop	{r3, r4, r5, pc}
 80055ea:	bf00      	nop
 80055ec:	200003c4 	.word	0x200003c4

080055f0 <_isatty_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4d06      	ldr	r5, [pc, #24]	@ (800560c <_isatty_r+0x1c>)
 80055f4:	2300      	movs	r3, #0
 80055f6:	4604      	mov	r4, r0
 80055f8:	4608      	mov	r0, r1
 80055fa:	602b      	str	r3, [r5, #0]
 80055fc:	f7fb fcec 	bl	8000fd8 <_isatty>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d102      	bne.n	800560a <_isatty_r+0x1a>
 8005604:	682b      	ldr	r3, [r5, #0]
 8005606:	b103      	cbz	r3, 800560a <_isatty_r+0x1a>
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	bd38      	pop	{r3, r4, r5, pc}
 800560c:	200003c4 	.word	0x200003c4

08005610 <_init>:
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005612:	bf00      	nop
 8005614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005616:	bc08      	pop	{r3}
 8005618:	469e      	mov	lr, r3
 800561a:	4770      	bx	lr

0800561c <_fini>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr
