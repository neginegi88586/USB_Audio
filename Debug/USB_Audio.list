
USB_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  080052d8  080052d8  000062d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005660  08005660  000071d0  2**0
                  CONTENTS
  4 .ARM          00000008  08005660  08005660  00006660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005668  08005668  000071d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005668  08005668  00006668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800566c  0800566c  0000666c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  08005670  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200001d0  08005840  000071d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08005840  000073c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004469  00000000  00000000  00007200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f35  00000000  00000000  0000b669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d0  00000000  00000000  0000c5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001fa  00000000  00000000  0000c870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b02e  00000000  00000000  0000ca6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004d43  00000000  00000000  00027a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093fb2  00000000  00000000  0002c7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c078d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000192c  00000000  00000000  000c07d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c20fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d0 	.word	0x200001d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080052c0 	.word	0x080052c0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d4 	.word	0x200001d4
 800021c:	080052c0 	.word	0x080052c0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return 1;
 8000eec:	2301      	movs	r3, #1
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_kill>:

int _kill(int pid, int sig)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f02:	f002 fb0f 	bl	8003524 <__errno>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2216      	movs	r2, #22
 8000f0a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_exit>:

void _exit (int status)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ffe7 	bl	8000ef8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f2a:	bf00      	nop
 8000f2c:	e7fd      	b.n	8000f2a <_exit+0x12>

08000f2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e00a      	b.n	8000f56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f40:	f3af 8000 	nop.w
 8000f44:	4601      	mov	r1, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	60ba      	str	r2, [r7, #8]
 8000f4c:	b2ca      	uxtb	r2, r1
 8000f4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dbf0      	blt.n	8000f40 <_read+0x12>
  }

  return len;
 8000f5e:	687b      	ldr	r3, [r7, #4]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e009      	b.n	8000f8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	60ba      	str	r2, [r7, #8]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	dbf1      	blt.n	8000f7a <_write+0x12>
  }
  return len;
 8000f96:	687b      	ldr	r3, [r7, #4]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_close>:

int _close(int file)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fc8:	605a      	str	r2, [r3, #4]
  return 0;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_isatty>:

int _isatty(int file)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fe0:	2301      	movs	r3, #1
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b085      	sub	sp, #20
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001010:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <_sbrk+0x5c>)
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <_sbrk+0x60>)
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	4b13      	ldr	r3, [pc, #76]	@ (800106c <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <_sbrk+0x64>)
 8001026:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <_sbrk+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	429a      	cmp	r2, r3
 8001036:	d207      	bcs.n	8001048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001038:	f002 fa74 	bl	8003524 <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e009      	b.n	800105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b07      	ldr	r3, [pc, #28]	@ (800106c <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20040000 	.word	0x20040000
 8001068:	00000400 	.word	0x00000400
 800106c:	200001ec 	.word	0x200001ec
 8001070:	200003c0 	.word	0x200003c0

08001074 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <SystemInit+0x28>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800107e:	4a07      	ldr	r2, [pc, #28]	@ (800109c <SystemInit+0x28>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <SystemInit+0x28>)
 800108a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800108e:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <Clock_Setup_OSC>:
#define MCO2_GPIO_PORT			GPIOC
#define MCO2_PIN           	    (1 << 9)


Error_HandleTypeDef Clock_Setup_OSC(OSC_ConfigSetTypeDef *osc_config)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	uint32_t TickStart;
	if(osc_config == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <Clock_Setup_OSC+0x12>
	{
		return STATE_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e0fa      	b.n	80012a8 <Clock_Setup_OSC+0x208>
	}

	/* ---------------------HSE Configuration--------------------- */
	if((osc_config->OSC_TYPE & OSC_TYPE_HSE) == OSC_TYPE_HSE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8083 	beq.w	80011c6 <Clock_Setup_OSC+0x126>
	{
		if((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_HSE || ((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL && (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE) == RCC_PLLCFGR_PLLSRC_HSE))
 80010c0:	4b7c      	ldr	r3, [pc, #496]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d00c      	beq.n	80010e6 <Clock_Setup_OSC+0x46>
 80010cc:	4b79      	ldr	r3, [pc, #484]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d112      	bne.n	80010fe <Clock_Setup_OSC+0x5e>
 80010d8:	4b76      	ldr	r3, [pc, #472]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010e4:	d10b      	bne.n	80010fe <Clock_Setup_OSC+0x5e>
		{
			if((RCC->CR & RCC_CR_HSERDY) != RESET && (osc_config->HSE_SET.HSE_STATE) == HSE_OFF)
 80010e6:	4b73      	ldr	r3, [pc, #460]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d068      	beq.n	80011c4 <Clock_Setup_OSC+0x124>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7f1b      	ldrb	r3, [r3, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d164      	bne.n	80011c4 <Clock_Setup_OSC+0x124>
			{
				return STATE_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e0d4      	b.n	80012a8 <Clock_Setup_OSC+0x208>
			}
		}
		else
		{
			HSE_CONFIG(osc_config->HSE_SET.HSE_STATE);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7f1b      	ldrb	r3, [r3, #28]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10c      	bne.n	8001120 <Clock_Setup_OSC+0x80>
 8001106:	4b6b      	ldr	r3, [pc, #428]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a6a      	ldr	r2, [pc, #424]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 800110c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b68      	ldr	r3, [pc, #416]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a67      	ldr	r2, [pc, #412]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001118:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e027      	b.n	8001170 <Clock_Setup_OSC+0xd0>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7f1b      	ldrb	r3, [r3, #28]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d106      	bne.n	8001136 <Clock_Setup_OSC+0x96>
 8001128:	4b62      	ldr	r3, [pc, #392]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a61      	ldr	r2, [pc, #388]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 800112e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	e01c      	b.n	8001170 <Clock_Setup_OSC+0xd0>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7f1b      	ldrb	r3, [r3, #28]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d10c      	bne.n	8001158 <Clock_Setup_OSC+0xb8>
 800113e:	4b5d      	ldr	r3, [pc, #372]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a5c      	ldr	r2, [pc, #368]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b5a      	ldr	r3, [pc, #360]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a59      	ldr	r2, [pc, #356]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e00b      	b.n	8001170 <Clock_Setup_OSC+0xd0>
 8001158:	4b56      	ldr	r3, [pc, #344]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a55      	ldr	r2, [pc, #340]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 800115e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b53      	ldr	r3, [pc, #332]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a52      	ldr	r2, [pc, #328]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 800116a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800116e:	6013      	str	r3, [r2, #0]
			if(osc_config->HSE_SET.HSE_STATE == HSE_ON)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7f1b      	ldrb	r3, [r3, #28]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d112      	bne.n	800119e <Clock_Setup_OSC+0xfe>
			{
				TickStart = uwTick;
 8001178:	4b4f      	ldr	r3, [pc, #316]	@ (80012b8 <Clock_Setup_OSC+0x218>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_HSERDY) == RESET)
 800117e:	e007      	b.n	8001190 <Clock_Setup_OSC+0xf0>
				{
					if((uwTick - TickStart) > HSE_TIMEOUT_VALUE)
 8001180:	4b4d      	ldr	r3, [pc, #308]	@ (80012b8 <Clock_Setup_OSC+0x218>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b64      	cmp	r3, #100	@ 0x64
 800118a:	d901      	bls.n	8001190 <Clock_Setup_OSC+0xf0>
					{
						return STATE_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e08b      	b.n	80012a8 <Clock_Setup_OSC+0x208>
				while((RCC->CR & RCC_CR_HSERDY) == RESET)
 8001190:	4b48      	ldr	r3, [pc, #288]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f1      	beq.n	8001180 <Clock_Setup_OSC+0xe0>
 800119c:	e013      	b.n	80011c6 <Clock_Setup_OSC+0x126>
					}
				}
			}
			else
			{
				TickStart = uwTick;
 800119e:	4b46      	ldr	r3, [pc, #280]	@ (80012b8 <Clock_Setup_OSC+0x218>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_HSERDY) == RESET)
 80011a4:	e007      	b.n	80011b6 <Clock_Setup_OSC+0x116>
				{
					if((uwTick - TickStart) > HSE_TIMEOUT_VALUE)
 80011a6:	4b44      	ldr	r3, [pc, #272]	@ (80012b8 <Clock_Setup_OSC+0x218>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	@ 0x64
 80011b0:	d901      	bls.n	80011b6 <Clock_Setup_OSC+0x116>
					{
						return STATE_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e078      	b.n	80012a8 <Clock_Setup_OSC+0x208>
				while((RCC->CR & RCC_CR_HSERDY) == RESET)
 80011b6:	4b3f      	ldr	r3, [pc, #252]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f1      	beq.n	80011a6 <Clock_Setup_OSC+0x106>
 80011c2:	e000      	b.n	80011c6 <Clock_Setup_OSC+0x126>
			if((RCC->CR & RCC_CR_HSERDY) != RESET && (osc_config->HSE_SET.HSE_STATE) == HSE_OFF)
 80011c4:	bf00      	nop
			}
		}
	}

	/* ---------------------HSI Configuration--------------------- */
	if((osc_config->OSC_TYPE & OSC_TYPE_HSE) == OSC_TYPE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d069      	beq.n	80012a6 <Clock_Setup_OSC+0x206>
	{
		if((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_HSI || ((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL && (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))
 80011d2:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <Clock_Setup_OSC+0x156>
 80011de:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d11d      	bne.n	8001226 <Clock_Setup_OSC+0x186>
 80011ea:	4b32      	ldr	r3, [pc, #200]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d117      	bne.n	8001226 <Clock_Setup_OSC+0x186>
		{
			if((RCC->CR & RCC_CR_HSIRDY) != RESET && (osc_config->HSI_SET.HSI_STATE) == HSI_OFF)
 80011f6:	4b2f      	ldr	r3, [pc, #188]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d006      	beq.n	8001210 <Clock_Setup_OSC+0x170>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <Clock_Setup_OSC+0x170>
			{
				return STATE_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e04b      	b.n	80012a8 <Clock_Setup_OSC+0x208>
			}
			else
			{
				RCC_HSI_CALIBRATION_ADJUST(osc_config->HSI_SET.HSI_CAL);
 8001210:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4925      	ldr	r1, [pc, #148]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]
			if((RCC->CR & RCC_CR_HSIRDY) != RESET && (osc_config->HSI_SET.HSI_STATE) == HSI_OFF)
 8001224:	e03f      	b.n	80012a6 <Clock_Setup_OSC+0x206>
			}
		}
		else
		{
			if(osc_config->HSI_SET.HSI_STATE == HSI_ON)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800122c:	2b01      	cmp	r3, #1
 800122e:	d122      	bne.n	8001276 <Clock_Setup_OSC+0x1d6>
			{
				HSI_ENABLE();
 8001230:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a1f      	ldr	r2, [pc, #124]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6013      	str	r3, [r2, #0]
				TickStart = uwTick;
 800123c:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <Clock_Setup_OSC+0x218>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_HSIRDY) == RESET)
 8001242:	e007      	b.n	8001254 <Clock_Setup_OSC+0x1b4>
				{
					if((uwTick - TickStart) > HSI_TIMEOUT_VALUE)
 8001244:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <Clock_Setup_OSC+0x218>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <Clock_Setup_OSC+0x1b4>
					{
						return STATE_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e029      	b.n	80012a8 <Clock_Setup_OSC+0x208>
				while((RCC->CR & RCC_CR_HSIRDY) == RESET)
 8001254:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f1      	beq.n	8001244 <Clock_Setup_OSC+0x1a4>
					}
				}
				RCC_HSI_CALIBRATION_ADJUST(osc_config->HSI_SET.HSI_CAL);
 8001260:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4911      	ldr	r1, [pc, #68]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001270:	4313      	orrs	r3, r2
 8001272:	600b      	str	r3, [r1, #0]
 8001274:	e017      	b.n	80012a6 <Clock_Setup_OSC+0x206>
			}
			else
			{
				HSI_DISEBLE();
 8001276:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6013      	str	r3, [r2, #0]
				TickStart = uwTick;
 8001282:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <Clock_Setup_OSC+0x218>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	60fb      	str	r3, [r7, #12]
				while((RCC->CR & RCC_CR_HSIRDY) == RESET)
 8001288:	e007      	b.n	800129a <Clock_Setup_OSC+0x1fa>
				{
					if((uwTick - TickStart) > HSI_TIMEOUT_VALUE)
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <Clock_Setup_OSC+0x218>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <Clock_Setup_OSC+0x1fa>
					{
						return STATE_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e006      	b.n	80012a8 <Clock_Setup_OSC+0x208>
				while((RCC->CR & RCC_CR_HSIRDY) == RESET)
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <Clock_Setup_OSC+0x214>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f1      	beq.n	800128a <Clock_Setup_OSC+0x1ea>
					}
				}
			}
		}
	}
	return STATE_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40023800 	.word	0x40023800
 80012b8:	20000270 	.word	0x20000270

080012bc <Clock_Setup_Clock>:

Error_HandleTypeDef Clock_Setup_Clock(Clock_ConfigTypeDef *clock_config)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	uint32_t TickStart;

	if(clock_config == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <Clock_Setup_Clock+0x12>
	{
		return STATE_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e0cf      	b.n	800146e <Clock_Setup_Clock+0x1b2>
	}

	if(clock_config->FLatency > FLASH_GET_LATENCY())
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	4b69      	ldr	r3, [pc, #420]	@ (8001478 <Clock_Setup_Clock+0x1bc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	429a      	cmp	r2, r3
 80012dc:	d912      	bls.n	8001304 <Clock_Setup_Clock+0x48>
	{
		FLASH_SET_LATENCY(clock_config->FLatency);
 80012de:	4b66      	ldr	r3, [pc, #408]	@ (8001478 <Clock_Setup_Clock+0x1bc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 020f 	bic.w	r2, r3, #15
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4963      	ldr	r1, [pc, #396]	@ (8001478 <Clock_Setup_Clock+0x1bc>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]

		if(FLASH_GET_LATENCY() != clock_config->FLatency)
 80012f0:	4b61      	ldr	r3, [pc, #388]	@ (8001478 <Clock_Setup_Clock+0x1bc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 020f 	and.w	r2, r3, #15
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <Clock_Setup_Clock+0x48>
		{
			return STATE_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e0b4      	b.n	800146e <Clock_Setup_Clock+0x1b2>
		}
	}

	if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_HCLK) == RCC_CLK_TYPE_HCLK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d020      	beq.n	8001352 <Clock_Setup_Clock+0x96>
	{
		if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_PCLK1) == RCC_CLK_TYPE_PCLK1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <Clock_Setup_Clock+0x6c>
		{
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800131c:	4b57      	ldr	r3, [pc, #348]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4a56      	ldr	r2, [pc, #344]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 8001322:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001326:	6093      	str	r3, [r2, #8]
		}
		if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_PCLK2) == RCC_CLK_TYPE_PCLK2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <Clock_Setup_Clock+0x84>
		{
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001334:	4b51      	ldr	r3, [pc, #324]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	4a50      	ldr	r2, [pc, #320]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 800133a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800133e:	6093      	str	r3, [r2, #8]
		}

		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, clock_config->AHBCLK_DIV);
 8001340:	4b4e      	ldr	r3, [pc, #312]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	494b      	ldr	r1, [pc, #300]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 800134e:	4313      	orrs	r3, r2
 8001350:	608b      	str	r3, [r1, #8]
	}

	if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_SYSCLK) == RCC_CLK_TYPE_SYSCLK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d03f      	beq.n	80013de <Clock_Setup_Clock+0x122>
	{
		if((clock_config->SYSCLK_SOURCE) == RCC_SYSCLKSOURCE_HSE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d107      	bne.n	8001376 <Clock_Setup_Clock+0xba>
		{
			if((RCC->CR & RCC_CR_HSERDY) == RESET)
 8001366:	4b45      	ldr	r3, [pc, #276]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d115      	bne.n	800139e <Clock_Setup_Clock+0xe2>
			{
				return STATE_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e07b      	b.n	800146e <Clock_Setup_Clock+0x1b2>
			}
		}
		else if((clock_config->SYSCLK_SOURCE) == RCC_SYSCLKSOURCE_PLLCLK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d107      	bne.n	800138e <Clock_Setup_Clock+0xd2>
		{
			if((RCC->CR & RCC_CR_PLLRDY) == RESET)
 800137e:	4b3f      	ldr	r3, [pc, #252]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <Clock_Setup_Clock+0xe2>
			{
				return STATE_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e06f      	b.n	800146e <Clock_Setup_Clock+0x1b2>
			}
		}
		else
		{
			if((RCC->CR & RCC_CR_HSIRDY) == RESET)
 800138e:	4b3b      	ldr	r3, [pc, #236]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <Clock_Setup_Clock+0xe2>
			{
				return STATE_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e067      	b.n	800146e <Clock_Setup_Clock+0x1b2>
			}
		}

		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, (clock_config->SYSCLK_SOURCE));
 800139e:	4b37      	ldr	r3, [pc, #220]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f023 0203 	bic.w	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	4934      	ldr	r1, [pc, #208]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	608b      	str	r3, [r1, #8]

		TickStart = uwTick;
 80013b0:	4b33      	ldr	r3, [pc, #204]	@ (8001480 <Clock_Setup_Clock+0x1c4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]

		while((RCC->CFGR & RCC_CFGR_SWS) == (clock_config->SYSCLK_SOURCE) << RCC_CFGR_SWS_Pos)
 80013b6:	e009      	b.n	80013cc <Clock_Setup_Clock+0x110>
		{
			if((uwTick - TickStart) > CLK_SW_TIMEOUT_VALUE)
 80013b8:	4b31      	ldr	r3, [pc, #196]	@ (8001480 <Clock_Setup_Clock+0x1c4>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d901      	bls.n	80013cc <Clock_Setup_Clock+0x110>
			{
				return STATE_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e050      	b.n	800146e <Clock_Setup_Clock+0x1b2>
		while((RCC->CFGR & RCC_CFGR_SWS) == (clock_config->SYSCLK_SOURCE) << RCC_CFGR_SWS_Pos)
 80013cc:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 020c 	and.w	r2, r3, #12
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	429a      	cmp	r2, r3
 80013dc:	d0ec      	beq.n	80013b8 <Clock_Setup_Clock+0xfc>
			}
		}
	}

	if(clock_config->FLatency < FLASH_GET_LATENCY())
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	4b25      	ldr	r3, [pc, #148]	@ (8001478 <Clock_Setup_Clock+0x1bc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d212      	bcs.n	8001414 <Clock_Setup_Clock+0x158>
	{
		FLASH_SET_LATENCY(clock_config->FLatency);
 80013ee:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <Clock_Setup_Clock+0x1bc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 020f 	bic.w	r2, r3, #15
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	491f      	ldr	r1, [pc, #124]	@ (8001478 <Clock_Setup_Clock+0x1bc>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]

		if(FLASH_GET_LATENCY() != clock_config->FLatency)
 8001400:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <Clock_Setup_Clock+0x1bc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 020f 	and.w	r2, r3, #15
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	429a      	cmp	r2, r3
 800140e:	d001      	beq.n	8001414 <Clock_Setup_Clock+0x158>
		{
			return STATE_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e02c      	b.n	800146e <Clock_Setup_Clock+0x1b2>
		}
	}

	if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_PCLK1) == RCC_CLK_TYPE_PCLK1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d008      	beq.n	8001432 <Clock_Setup_Clock+0x176>
	{
	    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, clock_config->APB1CLK_DIV);
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4913      	ldr	r1, [pc, #76]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 800142e:	4313      	orrs	r3, r2
 8001430:	608b      	str	r3, [r1, #8]
	}
	if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_PCLK2) == RCC_CLK_TYPE_PCLK2)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d008      	beq.n	8001450 <Clock_Setup_Clock+0x194>
	{
	    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, clock_config->APB2CLK_DIV);
 800143e:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	490c      	ldr	r1, [pc, #48]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 800144c:	4313      	orrs	r3, r2
 800144e:	608b      	str	r3, [r1, #8]
	}

	SystemCoreClock = Get_SysClock_Freq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001450:	f000 f874 	bl	800153c <Get_SysClock_Freq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <Clock_Setup_Clock+0x1c0>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	4908      	ldr	r1, [pc, #32]	@ (8001484 <Clock_Setup_Clock+0x1c8>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
 8001468:	4a07      	ldr	r2, [pc, #28]	@ (8001488 <Clock_Setup_Clock+0x1cc>)
 800146a:	6013      	str	r3, [r2, #0]

	return STATE_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023c00 	.word	0x40023c00
 800147c:	40023800 	.word	0x40023800
 8001480:	20000270 	.word	0x20000270
 8001484:	080052d8 	.word	0x080052d8
 8001488:	20000000 	.word	0x20000000

0800148c <MCO_Config>:

void MCO_Config(uint32_t MCOx, uint32_t MCO_SRC, uint32_t MCO_DIV)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	@ 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
	GPIO_ConfigTypeDef config;

	if(MCOx == RCC_MCO1)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d121      	bne.n	80014e2 <MCO_Config+0x56>
	{
		MCO1_CLK_ENABLE();
 800149e:	4b24      	ldr	r3, [pc, #144]	@ (8001530 <MCO_Config+0xa4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a23      	ldr	r2, [pc, #140]	@ (8001530 <MCO_Config+0xa4>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30

		config.PIN = MCO1_PIN;
 80014aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014ae:	617b      	str	r3, [r7, #20]
		config.MODE = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
		config.SPEED = GPIO_SPEED_FREQ_HIGH;
 80014b4:	2302      	movs	r3, #2
 80014b6:	623b      	str	r3, [r7, #32]
		config.PULL = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
		config.ALT = (uint8_t)0x00;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_Config(MCO1_GPIO_PORT, &config);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	481b      	ldr	r0, [pc, #108]	@ (8001534 <MCO_Config+0xa8>)
 80014c8:	f000 fa06 	bl	80018d8 <GPIO_Config>

		MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (MCO_SRC | MCO_DIV));
 80014cc:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <MCO_Config+0xa4>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	430b      	orrs	r3, r1
 80014da:	4915      	ldr	r1, [pc, #84]	@ (8001530 <MCO_Config+0xa4>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	608b      	str	r3, [r1, #8]
		config.ALT = (uint8_t)0x00;
		GPIO_Config(MCO2_GPIO_PORT, &config);

		MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (MCO_SRC | (MCO_DIV << 3)));
	}
}
 80014e0:	e021      	b.n	8001526 <MCO_Config+0x9a>
		MCO2_CLK_ENABLE();
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <MCO_Config+0xa4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a12      	ldr	r2, [pc, #72]	@ (8001530 <MCO_Config+0xa4>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
		config.PIN = MCO2_PIN;
 80014ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014f2:	617b      	str	r3, [r7, #20]
		config.MODE = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
		config.SPEED = GPIO_SPEED_FREQ_HIGH;
 80014f8:	2302      	movs	r3, #2
 80014fa:	623b      	str	r3, [r7, #32]
		config.PULL = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
		config.ALT = (uint8_t)0x00;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_Config(MCO2_GPIO_PORT, &config);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	480b      	ldr	r0, [pc, #44]	@ (8001538 <MCO_Config+0xac>)
 800150c:	f000 f9e4 	bl	80018d8 <GPIO_Config>
		MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (MCO_SRC | (MCO_DIV << 3)));
 8001510:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <MCO_Config+0xa4>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	00d9      	lsls	r1, r3, #3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	430b      	orrs	r3, r1
 8001520:	4903      	ldr	r1, [pc, #12]	@ (8001530 <MCO_Config+0xa4>)
 8001522:	4313      	orrs	r3, r2
 8001524:	608b      	str	r3, [r1, #8]
}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	@ 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000
 8001538:	40020800 	.word	0x40020800

0800153c <Get_SysClock_Freq>:

uint32_t Get_SysClock_Freq(void)
{
 800153c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001540:	b090      	sub	sp, #64	@ 0x40
 8001542:	af00      	add	r7, sp, #0
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	@ 0x34
 8001548:	2300      	movs	r3, #0
 800154a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t sysclock_freq = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	63bb      	str	r3, [r7, #56]	@ 0x38
	switch (RCC->CFGR & RCC_CFGR_SWS)
 8001554:	4b5b      	ldr	r3, [pc, #364]	@ (80016c4 <Get_SysClock_Freq+0x188>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	2b08      	cmp	r3, #8
 800155e:	d00d      	beq.n	800157c <Get_SysClock_Freq+0x40>
 8001560:	2b08      	cmp	r3, #8
 8001562:	f200 80a1 	bhi.w	80016a8 <Get_SysClock_Freq+0x16c>
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <Get_SysClock_Freq+0x34>
 800156a:	2b04      	cmp	r3, #4
 800156c:	d003      	beq.n	8001576 <Get_SysClock_Freq+0x3a>
 800156e:	e09b      	b.n	80016a8 <Get_SysClock_Freq+0x16c>
	{
	case RCC_SYSCLKSOURCE_STATUS_HSI:
		sysclock_freq = HSI_VALUE;
 8001570:	4b55      	ldr	r3, [pc, #340]	@ (80016c8 <Get_SysClock_Freq+0x18c>)
 8001572:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 8001574:	e09b      	b.n	80016ae <Get_SysClock_Freq+0x172>
	case RCC_SYSCLKSOURCE_STATUS_HSE:
		sysclock_freq = HSE_VALUE;
 8001576:	4b55      	ldr	r3, [pc, #340]	@ (80016cc <Get_SysClock_Freq+0x190>)
 8001578:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 800157a:	e098      	b.n	80016ae <Get_SysClock_Freq+0x172>
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK:
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800157c:	4b51      	ldr	r3, [pc, #324]	@ (80016c4 <Get_SysClock_Freq+0x188>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001584:	637b      	str	r3, [r7, #52]	@ 0x34
		if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) != RCC_PLLCFGR_PLLSRC_HSI)
 8001586:	4b4f      	ldr	r3, [pc, #316]	@ (80016c4 <Get_SysClock_Freq+0x188>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d028      	beq.n	80015e4 <Get_SysClock_Freq+0xa8>
		{
			pllvco = (uint32_t)((((uint64_t)HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001592:	4b4c      	ldr	r3, [pc, #304]	@ (80016c4 <Get_SysClock_Freq+0x188>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	099b      	lsrs	r3, r3, #6
 8001598:	2200      	movs	r2, #0
 800159a:	623b      	str	r3, [r7, #32]
 800159c:	627a      	str	r2, [r7, #36]	@ 0x24
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80015a4:	2100      	movs	r1, #0
 80015a6:	4b49      	ldr	r3, [pc, #292]	@ (80016cc <Get_SysClock_Freq+0x190>)
 80015a8:	fb03 f201 	mul.w	r2, r3, r1
 80015ac:	2300      	movs	r3, #0
 80015ae:	fb00 f303 	mul.w	r3, r0, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	4a45      	ldr	r2, [pc, #276]	@ (80016cc <Get_SysClock_Freq+0x190>)
 80015b6:	fba0 1202 	umull	r1, r2, r0, r2
 80015ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015bc:	460a      	mov	r2, r1
 80015be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80015c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015c2:	4413      	add	r3, r2
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015c8:	2200      	movs	r2, #0
 80015ca:	61bb      	str	r3, [r7, #24]
 80015cc:	61fa      	str	r2, [r7, #28]
 80015ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80015d6:	f7ff fb0f 	bl	8000bf8 <__aeabi_uldivmod>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4613      	mov	r3, r2
 80015e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015e2:	e053      	b.n	800168c <Get_SysClock_Freq+0x150>
		}
		else
		{
			pllvco = (uint32_t)((((uint64_t)HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e4:	4b37      	ldr	r3, [pc, #220]	@ (80016c4 <Get_SysClock_Freq+0x188>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	099b      	lsrs	r3, r3, #6
 80015ea:	2200      	movs	r2, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	617a      	str	r2, [r7, #20]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80015f6:	f04f 0b00 	mov.w	fp, #0
 80015fa:	4652      	mov	r2, sl
 80015fc:	465b      	mov	r3, fp
 80015fe:	f04f 0000 	mov.w	r0, #0
 8001602:	f04f 0100 	mov.w	r1, #0
 8001606:	0159      	lsls	r1, r3, #5
 8001608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800160c:	0150      	lsls	r0, r2, #5
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	ebb2 080a 	subs.w	r8, r2, sl
 8001616:	eb63 090b 	sbc.w	r9, r3, fp
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001626:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800162a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800162e:	ebb2 0408 	subs.w	r4, r2, r8
 8001632:	eb63 0509 	sbc.w	r5, r3, r9
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	00eb      	lsls	r3, r5, #3
 8001640:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001644:	00e2      	lsls	r2, r4, #3
 8001646:	4614      	mov	r4, r2
 8001648:	461d      	mov	r5, r3
 800164a:	eb14 030a 	adds.w	r3, r4, sl
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	eb45 030b 	adc.w	r3, r5, fp
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001662:	4629      	mov	r1, r5
 8001664:	028b      	lsls	r3, r1, #10
 8001666:	4621      	mov	r1, r4
 8001668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800166c:	4621      	mov	r1, r4
 800166e:	028a      	lsls	r2, r1, #10
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001676:	2200      	movs	r2, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	60fa      	str	r2, [r7, #12]
 800167c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001680:	f7ff faba 	bl	8000bf8 <__aeabi_uldivmod>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4613      	mov	r3, r2
 800168a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800168c:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <Get_SysClock_Freq+0x188>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	0c1b      	lsrs	r3, r3, #16
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	3301      	adds	r3, #1
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30

		sysclock_freq = pllvco / pllp;
 800169c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800169e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 80016a6:	e002      	b.n	80016ae <Get_SysClock_Freq+0x172>
	default:
		sysclock_freq = HSI_VALUE;
 80016a8:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <Get_SysClock_Freq+0x18c>)
 80016aa:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 80016ac:	bf00      	nop
	}

	Tick_Init(uwTickPrio);
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <Get_SysClock_Freq+0x194>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fbc2 	bl	8001e3c <Tick_Init>

	return sysclock_freq;
 80016b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3740      	adds	r7, #64	@ 0x40
 80016be:	46bd      	mov	sp, r7
 80016c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	00f42400 	.word	0x00f42400
 80016cc:	016e3600 	.word	0x016e3600
 80016d0:	20000004 	.word	0x20000004

080016d4 <Delay_Ms>:

void Delay_Ms(uint32_t delay_time)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	uint32_t TickStart = uwTick;
 80016dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001714 <Delay_Ms+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60bb      	str	r3, [r7, #8]
	uint32_t wait = delay_time;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60fb      	str	r3, [r7, #12]

	if(wait < MS_MAX_DELAY)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ec:	d002      	beq.n	80016f4 <Delay_Ms+0x20>
	{
		wait += (uint32_t)1;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3301      	adds	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
	}

	while((uwTick - TickStart) < wait);
 80016f4:	bf00      	nop
 80016f6:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <Delay_Ms+0x40>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d8f8      	bhi.n	80016f6 <Delay_Ms+0x22>
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000270 	.word	0x20000270

08001718 <RCC_GetPCLK_Freq>:

uint32_t RCC_GetPCLK_Freq(uint32_t cfgr_ppre, uint32_t cfgr_pos)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
	return (SystemCoreClock >> APBPrescTable[cfgr_ppre >> cfgr_pos]);
 8001722:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <RCC_GetPCLK_Freq+0x28>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	fa21 f202 	lsr.w	r2, r1, r2
 800172e:	4905      	ldr	r1, [pc, #20]	@ (8001744 <RCC_GetPCLK_Freq+0x2c>)
 8001730:	5c8a      	ldrb	r2, [r1, r2]
 8001732:	40d3      	lsrs	r3, r2
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	20000000 	.word	0x20000000
 8001744:	080052e8 	.word	0x080052e8

08001748 <PeriphCLKConfig>:

Error_HandleTypeDef PeriphCLKConfig(RCC_Periph_CLK_ConfigTypedef *periph_clk_config)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	uint32_t TickStart = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg0 = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
	uint32_t plli2s_used = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
	uint32_t pllsai_used = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

	if(((periph_clk_config->PeriphClockSelection) & (uint32_t)0x80000) == (uint32_t)0x80000U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d010      	beq.n	800178e <PeriphCLKConfig+0x46>
	{
		MODIFY_REG(RCC->DCKCFGR1, RCC_DCKCFGR1_SAI1SEL, (uint32_t)(periph_clk_config->Sai1ClockSelection));
 800176c:	4b58      	ldr	r3, [pc, #352]	@ (80018d0 <PeriphCLKConfig+0x188>)
 800176e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001772:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177a:	4955      	ldr	r1, [pc, #340]	@ (80018d0 <PeriphCLKConfig+0x188>)
 800177c:	4313      	orrs	r3, r2
 800177e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
		if((periph_clk_config->Sai1ClockSelection) == (uint32_t)0x00U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <PeriphCLKConfig+0x46>
		{
			pllsai_used = 1;
 800178a:	2301      	movs	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
		}
	}

	if(((periph_clk_config->PeriphClockSelection) & 0x40U) == 0x40U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00a      	beq.n	80017b0 <PeriphCLKConfig+0x68>
	{
		MODIFY_REG(RCC->DCKCFGR2, RCC_DCKCFGR2_USART1SEL, (uint32_t)(periph_clk_config->Usart1ClockSelection));
 800179a:	4b4d      	ldr	r3, [pc, #308]	@ (80018d0 <PeriphCLKConfig+0x188>)
 800179c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a0:	f023 0203 	bic.w	r2, r3, #3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a8:	4949      	ldr	r1, [pc, #292]	@ (80018d0 <PeriphCLKConfig+0x188>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
	}

	if(pllsai_used == 1)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	f040 8084 	bne.w	80018c0 <PeriphCLKConfig+0x178>
	{
		RCC->CR &= ~(RCC_CR_PLLSAION);
 80017b8:	4b45      	ldr	r3, [pc, #276]	@ (80018d0 <PeriphCLKConfig+0x188>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a44      	ldr	r2, [pc, #272]	@ (80018d0 <PeriphCLKConfig+0x188>)
 80017be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	6013      	str	r3, [r2, #0]

		TickStart = uwTick;
 80017c4:	4b43      	ldr	r3, [pc, #268]	@ (80018d4 <PeriphCLKConfig+0x18c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	613b      	str	r3, [r7, #16]
		while(((RCC->CR & RCC_CR_PLLSAIRDY) == RCC_CR_PLLSAIRDY) == RESET)
 80017ca:	e007      	b.n	80017dc <PeriphCLKConfig+0x94>
		{
			if((uwTick - TickStart) > PLLSAI_TIMEOUT_VALUE)
 80017cc:	4b41      	ldr	r3, [pc, #260]	@ (80018d4 <PeriphCLKConfig+0x18c>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b64      	cmp	r3, #100	@ 0x64
 80017d6:	d901      	bls.n	80017dc <PeriphCLKConfig+0x94>
			{
				return STATE_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e072      	b.n	80018c2 <PeriphCLKConfig+0x17a>
		while(((RCC->CR & RCC_CR_PLLSAIRDY) == RCC_CR_PLLSAIRDY) == RESET)
 80017dc:	4b3c      	ldr	r3, [pc, #240]	@ (80018d0 <PeriphCLKConfig+0x188>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017e8:	d1f0      	bne.n	80017cc <PeriphCLKConfig+0x84>
			}
		}

	    if(((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x80000U) == (uint32_t)0x80000U) && (periph_clk_config->Sai1ClockSelection == (uint32_t)0x00U)) ||\
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <PeriphCLKConfig+0xb6>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d009      	beq.n	8001812 <PeriphCLKConfig+0xca>
	       ((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x100000U) == (uint32_t)0x100000) && (periph_clk_config->Sai2ClockSelection == (uint32_t)0x00U)))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
	    if(((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x80000U) == (uint32_t)0x80000U) && (periph_clk_config->Sai1ClockSelection == (uint32_t)0x00U)) ||\
 8001806:	2b00      	cmp	r3, #0
 8001808:	d023      	beq.n	8001852 <PeriphCLKConfig+0x10a>
	       ((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x100000U) == (uint32_t)0x100000) && (periph_clk_config->Sai2ClockSelection == (uint32_t)0x00U)))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800180e:	2b00      	cmp	r3, #0
 8001810:	d11f      	bne.n	8001852 <PeriphCLKConfig+0x10a>
	    {
	    	tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001812:	4b2f      	ldr	r3, [pc, #188]	@ (80018d0 <PeriphCLKConfig+0x188>)
 8001814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	60fb      	str	r3, [r7, #12]

	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	019a      	lsls	r2, r3, #6
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	431a      	orrs	r2, r3
	    			tmpreg0 |
					((periph_clk_config->PLLSAI.PLLSAIQ) << RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	061b      	lsls	r3, r3, #24
	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 8001830:	4927      	ldr	r1, [pc, #156]	@ (80018d0 <PeriphCLKConfig+0x188>)
	    			tmpreg0 |
 8001832:	4313      	orrs	r3, r2
	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 8001834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

	    	MODIFY_REG(RCC->DCKCFGR1, RCC_DCKCFGR1_PLLSAIDIVQ, (periph_clk_config->PLLSAIDivQ - 1) << 8);
 8001838:	4b25      	ldr	r3, [pc, #148]	@ (80018d0 <PeriphCLKConfig+0x188>)
 800183a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800183e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	3b01      	subs	r3, #1
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	4921      	ldr	r1, [pc, #132]	@ (80018d0 <PeriphCLKConfig+0x188>)
 800184c:	4313      	orrs	r3, r2
 800184e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
	    }

	    if((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x200000U) == (uint32_t)0x200000U) && (periph_clk_config->Clk48ClockSelection == RCC_DCKCFGR2_CK48MSEL))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d017      	beq.n	800188e <PeriphCLKConfig+0x146>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001862:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001866:	d112      	bne.n	800188e <PeriphCLKConfig+0x146>
		{

	    	tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001868:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <PeriphCLKConfig+0x188>)
 800186a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800186e:	0e1b      	lsrs	r3, r3, #24
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	60fb      	str	r3, [r7, #12]

	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	019a      	lsls	r2, r3, #6
					((periph_clk_config->PLLSAI.PLLSAIP) << RCC_PLLSAICFGR_PLLSAIP_Pos) |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	041b      	lsls	r3, r3, #16
	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 8001882:	431a      	orrs	r2, r3
 8001884:	4912      	ldr	r1, [pc, #72]	@ (80018d0 <PeriphCLKConfig+0x188>)
					((periph_clk_config->PLLSAI.PLLSAIP) << RCC_PLLSAICFGR_PLLSAIP_Pos) |
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 800188a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
					tmpreg0;
		}

	    (RCC->CR |= (RCC_CR_PLLSAION));
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <PeriphCLKConfig+0x188>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a0f      	ldr	r2, [pc, #60]	@ (80018d0 <PeriphCLKConfig+0x188>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001898:	6013      	str	r3, [r2, #0]

	    TickStart = uwTick;
 800189a:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <PeriphCLKConfig+0x18c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	613b      	str	r3, [r7, #16]

	    while(((RCC->CR & RCC_CR_PLLSAIRDY) == RCC_CR_PLLSAIRDY) == RESET)
 80018a0:	e007      	b.n	80018b2 <PeriphCLKConfig+0x16a>
	    {
			if((uwTick - TickStart) > PLLSAI_TIMEOUT_VALUE)
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <PeriphCLKConfig+0x18c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	@ 0x64
 80018ac:	d901      	bls.n	80018b2 <PeriphCLKConfig+0x16a>
			{
				return STATE_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e007      	b.n	80018c2 <PeriphCLKConfig+0x17a>
	    while(((RCC->CR & RCC_CR_PLLSAIRDY) == RCC_CR_PLLSAIRDY) == RESET)
 80018b2:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <PeriphCLKConfig+0x188>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018be:	d1f0      	bne.n	80018a2 <PeriphCLKConfig+0x15a>
			}
	    }
	}
	return STATE_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	20000270 	.word	0x20000270

080018d8 <GPIO_Config>:

#define GPIO_NUMBER           ((uint32_t)16U)


void GPIO_Config(GPIO_TypeDef *GPIOx, GPIO_ConfigTypeDef *GPIO_Conf)
{
 80018d8:	b480      	push	{r7}
 80018da:	b087      	sub	sp, #28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	uint32_t position = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
	uint32_t ioposition = 0x00;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
	uint32_t iocurrent = 0x00;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
	uint32_t temp = 0x00;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]

	for(position = 0; position < GPIO_NUMBER; position++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e163      	b.n	8001bc0 <GPIO_Config+0x2e8>
	{
		ioposition = ((uint32_t)0x01) << position;
 80018f8:	2201      	movs	r2, #1
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	60fb      	str	r3, [r7, #12]

		iocurrent = (uint32_t)(GPIO_Conf->PIN) & ioposition;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]

		if(iocurrent == ioposition)
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	f040 8152 	bne.w	8001bba <GPIO_Config+0x2e2>
		{
			if(((GPIO_Conf->MODE & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Conf->MODE & GPIO_MODE) == MODE_AF))
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d005      	beq.n	800192e <GPIO_Config+0x56>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d130      	bne.n	8001990 <GPIO_Config+0xb8>
			{
				temp = GPIOx->OSPEEDR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_Conf->SPEED << (position * 2));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
				GPIOx->OSPEEDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	609a      	str	r2, [r3, #8]

				temp = GPIOx->OTYPER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OTYPER_OT0 << position);
 8001964:	2201      	movs	r2, #1
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Conf->MODE & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
				GPIOx->OTYPER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	605a      	str	r2, [r3, #4]
			}
		    if((GPIO_Conf->MODE & GPIO_MODE) != MODE_ANALOG)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b03      	cmp	r3, #3
 800199a:	d017      	beq.n	80019cc <GPIO_Config+0xf4>
		    {
		        temp = GPIOx->PUPDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	613b      	str	r3, [r7, #16]
		        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
		        temp |= ((GPIO_Conf->PULL) << (position * 2));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
		        GPIOx->PUPDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	60da      	str	r2, [r3, #12]
		    }
		    if ((GPIO_Conf->MODE & GPIO_MODE) == MODE_AF)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d123      	bne.n	8001a20 <GPIO_Config+0x148>
		    {
		        temp = GPIOx->AFR[position >> 3];
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
		        temp |= ((uint32_t)(GPIO_Conf->ALT) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
		        GPIOx->AFR[position >> 3] = temp;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	6939      	ldr	r1, [r7, #16]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		    }
		    temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	613b      	str	r3, [r7, #16]
		    temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
		    temp |= ((GPIO_Conf->MODE & GPIO_MODE) << (position * 2));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
		    GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	601a      	str	r2, [r3, #0]

		    if((GPIO_Conf->MODE & EXTI_MODE) != 0x00u)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80ac 	beq.w	8001bba <GPIO_Config+0x2e2>
		    {
		    	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN);
 8001a62:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd8 <GPIO_Config+0x300>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a66:	4a5c      	ldr	r2, [pc, #368]	@ (8001bd8 <GPIO_Config+0x300>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a6c:	6453      	str	r3, [r2, #68]	@ 0x44

		    	temp = SYSCFG->EXTICR[position >> 2];
 8001a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bdc <GPIO_Config+0x304>)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	3302      	adds	r3, #2
 8001a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7a:	613b      	str	r3, [r7, #16]
		    	temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	220f      	movs	r2, #15
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
		    	temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a52      	ldr	r2, [pc, #328]	@ (8001be0 <GPIO_Config+0x308>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d02b      	beq.n	8001af2 <GPIO_Config+0x21a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a51      	ldr	r2, [pc, #324]	@ (8001be4 <GPIO_Config+0x30c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d025      	beq.n	8001aee <GPIO_Config+0x216>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a50      	ldr	r2, [pc, #320]	@ (8001be8 <GPIO_Config+0x310>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d01f      	beq.n	8001aea <GPIO_Config+0x212>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4f      	ldr	r2, [pc, #316]	@ (8001bec <GPIO_Config+0x314>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d019      	beq.n	8001ae6 <GPIO_Config+0x20e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4e      	ldr	r2, [pc, #312]	@ (8001bf0 <GPIO_Config+0x318>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d013      	beq.n	8001ae2 <GPIO_Config+0x20a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4d      	ldr	r2, [pc, #308]	@ (8001bf4 <GPIO_Config+0x31c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d00d      	beq.n	8001ade <GPIO_Config+0x206>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf8 <GPIO_Config+0x320>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d007      	beq.n	8001ada <GPIO_Config+0x202>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4b      	ldr	r2, [pc, #300]	@ (8001bfc <GPIO_Config+0x324>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d101      	bne.n	8001ad6 <GPIO_Config+0x1fe>
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	e00e      	b.n	8001af4 <GPIO_Config+0x21c>
 8001ad6:	2308      	movs	r3, #8
 8001ad8:	e00c      	b.n	8001af4 <GPIO_Config+0x21c>
 8001ada:	2306      	movs	r3, #6
 8001adc:	e00a      	b.n	8001af4 <GPIO_Config+0x21c>
 8001ade:	2305      	movs	r3, #5
 8001ae0:	e008      	b.n	8001af4 <GPIO_Config+0x21c>
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	e006      	b.n	8001af4 <GPIO_Config+0x21c>
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e004      	b.n	8001af4 <GPIO_Config+0x21c>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e002      	b.n	8001af4 <GPIO_Config+0x21c>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <GPIO_Config+0x21c>
 8001af2:	2300      	movs	r3, #0
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	f002 0203 	and.w	r2, r2, #3
 8001afa:	0092      	lsls	r2, r2, #2
 8001afc:	4093      	lsls	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
		    	SYSCFG->EXTICR[position >> 2] = temp;
 8001b04:	4935      	ldr	r1, [pc, #212]	@ (8001bdc <GPIO_Config+0x304>)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		        temp = EXTI->RTSR;
 8001b12:	4b3b      	ldr	r3, [pc, #236]	@ (8001c00 <GPIO_Config+0x328>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)iocurrent);
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
		        if ((GPIO_Conf->MODE & TRIGGER_RISING) != 0x00u)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <GPIO_Config+0x25e>
		        {
		        	temp |= iocurrent;
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
		        }
		        EXTI->RTSR = temp;
 8001b36:	4a32      	ldr	r2, [pc, #200]	@ (8001c00 <GPIO_Config+0x328>)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	6093      	str	r3, [r2, #8]

		        temp = EXTI->FTSR;
 8001b3c:	4b30      	ldr	r3, [pc, #192]	@ (8001c00 <GPIO_Config+0x328>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)iocurrent);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
		        if ((GPIO_Conf->MODE & TRIGGER_FALLING) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <GPIO_Config+0x288>
		        {
		        	temp |= iocurrent;
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
		        }
		        EXTI->FTSR = temp;
 8001b60:	4a27      	ldr	r2, [pc, #156]	@ (8001c00 <GPIO_Config+0x328>)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	60d3      	str	r3, [r2, #12]

		        temp = EXTI->EMR;
 8001b66:	4b26      	ldr	r3, [pc, #152]	@ (8001c00 <GPIO_Config+0x328>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)iocurrent);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
		        if ((GPIO_Conf->MODE & EXTI_EVT) != 0x00u)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <GPIO_Config+0x2b2>
		        {
		        	temp |= iocurrent;
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
		        }
		        EXTI->EMR = temp;
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001c00 <GPIO_Config+0x328>)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	6053      	str	r3, [r2, #4]

		        temp = EXTI->IMR;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <GPIO_Config+0x328>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)iocurrent);
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
		        if ((GPIO_Conf->MODE & EXTI_IT) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <GPIO_Config+0x2dc>
		        {
		        	temp |= iocurrent;
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
		        }
		        EXTI->IMR = temp;
 8001bb4:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <GPIO_Config+0x328>)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	6013      	str	r3, [r2, #0]
	for(position = 0; position < GPIO_NUMBER; position++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b0f      	cmp	r3, #15
 8001bc4:	f67f ae98 	bls.w	80018f8 <GPIO_Config+0x20>
		    }
		}
	}
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	371c      	adds	r7, #28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40013800 	.word	0x40013800
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40020800 	.word	0x40020800
 8001bec:	40020c00 	.word	0x40020c00
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40021400 	.word	0x40021400
 8001bf8:	40021800 	.word	0x40021800
 8001bfc:	40021c00 	.word	0x40021c00
 8001c00:	40013c00 	.word	0x40013c00

08001c04 <GPIO_Write>:

void GPIO_Write(GPIO_TypeDef *GPIOx, uint16_t Pin, GPIO_State State)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
 8001c10:	4613      	mov	r3, r2
 8001c12:	707b      	strb	r3, [r7, #1]
	if(State == GPIO_RESET)
 8001c14:	787b      	ldrb	r3, [r7, #1]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <GPIO_Write+0x1e>
	{
		GPIOx->BSRR = Pin;
 8001c1a:	887a      	ldrh	r2, [r7, #2]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	619a      	str	r2, [r3, #24]
	}
	else
	{
		GPIOx->BSRR = (uint32_t)Pin << 16;
	}
}
 8001c20:	e003      	b.n	8001c2a <GPIO_Write+0x26>
		GPIOx->BSRR = (uint32_t)Pin << 16;
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	041a      	lsls	r2, r3, #16
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	619a      	str	r2, [r3, #24]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <NMI_Handler>:
 */

#include "interrupt.h"

void NMI_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
	while(1);
 8001c3a:	bf00      	nop
 8001c3c:	e7fd      	b.n	8001c3a <NMI_Handler+0x4>

08001c3e <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
	while(1);
 8001c42:	bf00      	nop
 8001c44:	e7fd      	b.n	8001c42 <HardFault_Handler+0x4>

08001c46 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
	while(1);
 8001c4a:	bf00      	nop
 8001c4c:	e7fd      	b.n	8001c4a <MemManage_Handler+0x4>

08001c4e <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
	while(1);
 8001c52:	bf00      	nop
 8001c54:	e7fd      	b.n	8001c52 <BusFault_Handler+0x4>

08001c56 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
	while(1);
 8001c5a:	bf00      	nop
 8001c5c:	e7fd      	b.n	8001c5a <UsageFault_Handler+0x4>

08001c5e <SVC_Handler>:
}

void SVC_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <PendSV_Handler>:

void PendSV_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
	uwTick += 1U;
 8001c8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <SysTick_Handler+0x18>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	4a03      	ldr	r2, [pc, #12]	@ (8001ca0 <SysTick_Handler+0x18>)
 8001c94:	6013      	str	r3, [r2, #0]
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	20000270 	.word	0x20000270

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00
 8001ce8:	05fa0000 	.word	0x05fa0000

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	@ (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	@ (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	@ 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	@ 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd4:	d301      	bcc.n	8001dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00f      	b.n	8001dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dda:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <SysTick_Config+0x40>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de2:	210f      	movs	r1, #15
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f7ff ff8e 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <SysTick_Config+0x40>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df2:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <SysTick_Config+0x40>)
 8001df4:	2207      	movs	r2, #7
 8001df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <System_Config>:

#include "system_config.h"


void System_Config(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	NVIC_SetPriorityGrouping((uint32_t)TICK_INT_PRIORITY);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f7ff ff49 	bl	8001ca4 <__NVIC_SetPriorityGrouping>

	Tick_Init(TICK_INT_PRIORITY);
 8001e12:	2003      	movs	r0, #3
 8001e14:	f000 f812 	bl	8001e3c <Tick_Init>

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <System_Config+0x2c>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <System_Config+0x2c>)
 8001e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e22:	6413      	str	r3, [r2, #64]	@ 0x40
	MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_CR1_VOS);
 8001e24:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <System_Config+0x30>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a03      	ldr	r2, [pc, #12]	@ (8001e38 <System_Config+0x30>)
 8001e2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40007000 	.word	0x40007000

08001e3c <Tick_Init>:

void Tick_Init(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	uint32_t priority_group = 0x00;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]

	priority_group = NVIC_GetPriorityGrouping();
 8001e48:	f7ff ff50 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e4c:	60f8      	str	r0, [r7, #12]
	SysTick_Config(SystemCoreClock / (1000U / 1U));
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <Tick_Init+0x50>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a0f      	ldr	r2, [pc, #60]	@ (8001e90 <Tick_Init+0x54>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ffb2 	bl	8001dc4 <SysTick_Config>

	if(TickPriority < (1U << __NVIC_PRIO_BITS))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	d80d      	bhi.n	8001e82 <Tick_Init+0x46>
	{
		NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(priority_group, TickPriority, 0));
 8001e66:	2200      	movs	r2, #0
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff ff76 	bl	8001d5c <NVIC_EncodePriority>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4619      	mov	r1, r3
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f7ff ff46 	bl	8001d08 <__NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8001e7c:	4a05      	ldr	r2, [pc, #20]	@ (8001e94 <Tick_Init+0x58>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
	}
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	10624dd3 	.word	0x10624dd3
 8001e94:	20000004 	.word	0x20000004

08001e98 <UART_Config>:

static void UART_EndRxTransfer(UART_HandleTypeDef *huart);


Error_HandleTypeDef UART_Config(UART_HandleTypeDef *huart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	if(huart == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <UART_Config+0x12>
	{
		return STATE_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e039      	b.n	8001f1e <UART_Config+0x86>
	}

	if(huart->gSTATE == UART_STATE_RST)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <UART_Config+0x28>
	{
		huart->LOCK = UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

		UART_Pin_Config(huart);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fb08 	bl	80024d0 <UART_Pin_Config>
	}
	huart->gSTATE = UART_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2224      	movs	r2, #36	@ 0x24
 8001ec4:	675a      	str	r2, [r3, #116]	@ 0x74

	huart->INSTANCE->CR1 &= ~(USART_CR1_UE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
	if(huart->ADV_INIT.ADV_FEAT_INIT != 0x00U)
	{

	}

	if(UART_SetConfig(huart) != STATE_ERROR)
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f826 	bl	8001f28 <UART_SetConfig>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d001      	beq.n	8001ee6 <UART_Config+0x4e>
	{
		return STATE_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e01b      	b.n	8001f1e <UART_Config+0x86>
	}

	CLEAR_BIT(huart->INSTANCE->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ef4:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(huart->INSTANCE->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f04:	609a      	str	r2, [r3, #8]

	huart->INSTANCE->CR1 |= USART_CR1_UE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

	return (UART_CheckIdleState(huart));
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fa82 	bl	8002420 <UART_CheckIdleState>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <UART_SetConfig>:

Error_HandleTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;
	uint16_t brrtemp;
	UART_ClockSourceTypeDef clocksource;
	uint32_t usartdiv;
	Error_HandleTypeDef ret = STATE_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	77bb      	strb	r3, [r7, #30]
	uint32_t pclk;

	tmpreg = (uint32_t)huart->INIT.WORD_LEN | huart->INIT.PARITY | huart->INIT.MODE | huart->INIT.OVER_SAMPLE ;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]
	MODIFY_REG((huart->INSTANCE->CR1), USART_CR1_FIELDS, tmpreg);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4ba6      	ldr	r3, [pc, #664]	@ (80021ec <UART_SetConfig+0x2c4>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	6979      	ldr	r1, [r7, #20]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	6013      	str	r3, [r2, #0]

	MODIFY_REG(huart->INSTANCE->CR2, USART_CR2_STOP, huart->INIT.STOP_BIT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]

	tmpreg = (uint32_t)huart->INIT.FLOW_CTRL;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	617b      	str	r3, [r7, #20]

	tmpreg |= huart->INIT.ONEB_SAMPLE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]
	MODIFY_REG(huart->INSTANCE->CR3, USART_CR3_FIELDS, tmpreg);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	609a      	str	r2, [r3, #8]
	UART_GETCLOCKSOURCE(huart, clocksource);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a94      	ldr	r2, [pc, #592]	@ (80021f0 <UART_SetConfig+0x2c8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d120      	bne.n	8001fe6 <UART_SetConfig+0xbe>
 8001fa4:	4b93      	ldr	r3, [pc, #588]	@ (80021f4 <UART_SetConfig+0x2cc>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d816      	bhi.n	8001fe0 <UART_SetConfig+0xb8>
 8001fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb8 <UART_SetConfig+0x90>)
 8001fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb8:	08001fc9 	.word	0x08001fc9
 8001fbc:	08001fd5 	.word	0x08001fd5
 8001fc0:	08001fcf 	.word	0x08001fcf
 8001fc4:	08001fdb 	.word	0x08001fdb
 8001fc8:	2301      	movs	r3, #1
 8001fca:	77fb      	strb	r3, [r7, #31]
 8001fcc:	e150      	b.n	8002270 <UART_SetConfig+0x348>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	77fb      	strb	r3, [r7, #31]
 8001fd2:	e14d      	b.n	8002270 <UART_SetConfig+0x348>
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	77fb      	strb	r3, [r7, #31]
 8001fd8:	e14a      	b.n	8002270 <UART_SetConfig+0x348>
 8001fda:	2308      	movs	r3, #8
 8001fdc:	77fb      	strb	r3, [r7, #31]
 8001fde:	e147      	b.n	8002270 <UART_SetConfig+0x348>
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	77fb      	strb	r3, [r7, #31]
 8001fe4:	e144      	b.n	8002270 <UART_SetConfig+0x348>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a83      	ldr	r2, [pc, #524]	@ (80021f8 <UART_SetConfig+0x2d0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d132      	bne.n	8002056 <UART_SetConfig+0x12e>
 8001ff0:	4b80      	ldr	r3, [pc, #512]	@ (80021f4 <UART_SetConfig+0x2cc>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d828      	bhi.n	8002050 <UART_SetConfig+0x128>
 8001ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8002004 <UART_SetConfig+0xdc>)
 8002000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002004:	08002039 	.word	0x08002039
 8002008:	08002051 	.word	0x08002051
 800200c:	08002051 	.word	0x08002051
 8002010:	08002051 	.word	0x08002051
 8002014:	08002045 	.word	0x08002045
 8002018:	08002051 	.word	0x08002051
 800201c:	08002051 	.word	0x08002051
 8002020:	08002051 	.word	0x08002051
 8002024:	0800203f 	.word	0x0800203f
 8002028:	08002051 	.word	0x08002051
 800202c:	08002051 	.word	0x08002051
 8002030:	08002051 	.word	0x08002051
 8002034:	0800204b 	.word	0x0800204b
 8002038:	2300      	movs	r3, #0
 800203a:	77fb      	strb	r3, [r7, #31]
 800203c:	e118      	b.n	8002270 <UART_SetConfig+0x348>
 800203e:	2302      	movs	r3, #2
 8002040:	77fb      	strb	r3, [r7, #31]
 8002042:	e115      	b.n	8002270 <UART_SetConfig+0x348>
 8002044:	2304      	movs	r3, #4
 8002046:	77fb      	strb	r3, [r7, #31]
 8002048:	e112      	b.n	8002270 <UART_SetConfig+0x348>
 800204a:	2308      	movs	r3, #8
 800204c:	77fb      	strb	r3, [r7, #31]
 800204e:	e10f      	b.n	8002270 <UART_SetConfig+0x348>
 8002050:	2310      	movs	r3, #16
 8002052:	77fb      	strb	r3, [r7, #31]
 8002054:	e10c      	b.n	8002270 <UART_SetConfig+0x348>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a68      	ldr	r2, [pc, #416]	@ (80021fc <UART_SetConfig+0x2d4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d120      	bne.n	80020a2 <UART_SetConfig+0x17a>
 8002060:	4b64      	ldr	r3, [pc, #400]	@ (80021f4 <UART_SetConfig+0x2cc>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002066:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800206a:	2b30      	cmp	r3, #48	@ 0x30
 800206c:	d013      	beq.n	8002096 <UART_SetConfig+0x16e>
 800206e:	2b30      	cmp	r3, #48	@ 0x30
 8002070:	d814      	bhi.n	800209c <UART_SetConfig+0x174>
 8002072:	2b20      	cmp	r3, #32
 8002074:	d009      	beq.n	800208a <UART_SetConfig+0x162>
 8002076:	2b20      	cmp	r3, #32
 8002078:	d810      	bhi.n	800209c <UART_SetConfig+0x174>
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <UART_SetConfig+0x15c>
 800207e:	2b10      	cmp	r3, #16
 8002080:	d006      	beq.n	8002090 <UART_SetConfig+0x168>
 8002082:	e00b      	b.n	800209c <UART_SetConfig+0x174>
 8002084:	2300      	movs	r3, #0
 8002086:	77fb      	strb	r3, [r7, #31]
 8002088:	e0f2      	b.n	8002270 <UART_SetConfig+0x348>
 800208a:	2302      	movs	r3, #2
 800208c:	77fb      	strb	r3, [r7, #31]
 800208e:	e0ef      	b.n	8002270 <UART_SetConfig+0x348>
 8002090:	2304      	movs	r3, #4
 8002092:	77fb      	strb	r3, [r7, #31]
 8002094:	e0ec      	b.n	8002270 <UART_SetConfig+0x348>
 8002096:	2308      	movs	r3, #8
 8002098:	77fb      	strb	r3, [r7, #31]
 800209a:	e0e9      	b.n	8002270 <UART_SetConfig+0x348>
 800209c:	2310      	movs	r3, #16
 800209e:	77fb      	strb	r3, [r7, #31]
 80020a0:	e0e6      	b.n	8002270 <UART_SetConfig+0x348>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a56      	ldr	r2, [pc, #344]	@ (8002200 <UART_SetConfig+0x2d8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d120      	bne.n	80020ee <UART_SetConfig+0x1c6>
 80020ac:	4b51      	ldr	r3, [pc, #324]	@ (80021f4 <UART_SetConfig+0x2cc>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80020b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80020b8:	d013      	beq.n	80020e2 <UART_SetConfig+0x1ba>
 80020ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80020bc:	d814      	bhi.n	80020e8 <UART_SetConfig+0x1c0>
 80020be:	2b80      	cmp	r3, #128	@ 0x80
 80020c0:	d009      	beq.n	80020d6 <UART_SetConfig+0x1ae>
 80020c2:	2b80      	cmp	r3, #128	@ 0x80
 80020c4:	d810      	bhi.n	80020e8 <UART_SetConfig+0x1c0>
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <UART_SetConfig+0x1a8>
 80020ca:	2b40      	cmp	r3, #64	@ 0x40
 80020cc:	d006      	beq.n	80020dc <UART_SetConfig+0x1b4>
 80020ce:	e00b      	b.n	80020e8 <UART_SetConfig+0x1c0>
 80020d0:	2300      	movs	r3, #0
 80020d2:	77fb      	strb	r3, [r7, #31]
 80020d4:	e0cc      	b.n	8002270 <UART_SetConfig+0x348>
 80020d6:	2302      	movs	r3, #2
 80020d8:	77fb      	strb	r3, [r7, #31]
 80020da:	e0c9      	b.n	8002270 <UART_SetConfig+0x348>
 80020dc:	2304      	movs	r3, #4
 80020de:	77fb      	strb	r3, [r7, #31]
 80020e0:	e0c6      	b.n	8002270 <UART_SetConfig+0x348>
 80020e2:	2308      	movs	r3, #8
 80020e4:	77fb      	strb	r3, [r7, #31]
 80020e6:	e0c3      	b.n	8002270 <UART_SetConfig+0x348>
 80020e8:	2310      	movs	r3, #16
 80020ea:	77fb      	strb	r3, [r7, #31]
 80020ec:	e0c0      	b.n	8002270 <UART_SetConfig+0x348>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a44      	ldr	r2, [pc, #272]	@ (8002204 <UART_SetConfig+0x2dc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d125      	bne.n	8002144 <UART_SetConfig+0x21c>
 80020f8:	4b3e      	ldr	r3, [pc, #248]	@ (80021f4 <UART_SetConfig+0x2cc>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002102:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002106:	d017      	beq.n	8002138 <UART_SetConfig+0x210>
 8002108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800210c:	d817      	bhi.n	800213e <UART_SetConfig+0x216>
 800210e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002112:	d00b      	beq.n	800212c <UART_SetConfig+0x204>
 8002114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002118:	d811      	bhi.n	800213e <UART_SetConfig+0x216>
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <UART_SetConfig+0x1fe>
 800211e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002122:	d006      	beq.n	8002132 <UART_SetConfig+0x20a>
 8002124:	e00b      	b.n	800213e <UART_SetConfig+0x216>
 8002126:	2300      	movs	r3, #0
 8002128:	77fb      	strb	r3, [r7, #31]
 800212a:	e0a1      	b.n	8002270 <UART_SetConfig+0x348>
 800212c:	2302      	movs	r3, #2
 800212e:	77fb      	strb	r3, [r7, #31]
 8002130:	e09e      	b.n	8002270 <UART_SetConfig+0x348>
 8002132:	2304      	movs	r3, #4
 8002134:	77fb      	strb	r3, [r7, #31]
 8002136:	e09b      	b.n	8002270 <UART_SetConfig+0x348>
 8002138:	2308      	movs	r3, #8
 800213a:	77fb      	strb	r3, [r7, #31]
 800213c:	e098      	b.n	8002270 <UART_SetConfig+0x348>
 800213e:	2310      	movs	r3, #16
 8002140:	77fb      	strb	r3, [r7, #31]
 8002142:	e095      	b.n	8002270 <UART_SetConfig+0x348>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a2f      	ldr	r2, [pc, #188]	@ (8002208 <UART_SetConfig+0x2e0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d125      	bne.n	800219a <UART_SetConfig+0x272>
 800214e:	4b29      	ldr	r3, [pc, #164]	@ (80021f4 <UART_SetConfig+0x2cc>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002154:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002158:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800215c:	d017      	beq.n	800218e <UART_SetConfig+0x266>
 800215e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002162:	d817      	bhi.n	8002194 <UART_SetConfig+0x26c>
 8002164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002168:	d00b      	beq.n	8002182 <UART_SetConfig+0x25a>
 800216a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800216e:	d811      	bhi.n	8002194 <UART_SetConfig+0x26c>
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <UART_SetConfig+0x254>
 8002174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002178:	d006      	beq.n	8002188 <UART_SetConfig+0x260>
 800217a:	e00b      	b.n	8002194 <UART_SetConfig+0x26c>
 800217c:	2301      	movs	r3, #1
 800217e:	77fb      	strb	r3, [r7, #31]
 8002180:	e076      	b.n	8002270 <UART_SetConfig+0x348>
 8002182:	2302      	movs	r3, #2
 8002184:	77fb      	strb	r3, [r7, #31]
 8002186:	e073      	b.n	8002270 <UART_SetConfig+0x348>
 8002188:	2304      	movs	r3, #4
 800218a:	77fb      	strb	r3, [r7, #31]
 800218c:	e070      	b.n	8002270 <UART_SetConfig+0x348>
 800218e:	2308      	movs	r3, #8
 8002190:	77fb      	strb	r3, [r7, #31]
 8002192:	e06d      	b.n	8002270 <UART_SetConfig+0x348>
 8002194:	2310      	movs	r3, #16
 8002196:	77fb      	strb	r3, [r7, #31]
 8002198:	e06a      	b.n	8002270 <UART_SetConfig+0x348>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1b      	ldr	r2, [pc, #108]	@ (800220c <UART_SetConfig+0x2e4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d138      	bne.n	8002216 <UART_SetConfig+0x2ee>
 80021a4:	4b13      	ldr	r3, [pc, #76]	@ (80021f4 <UART_SetConfig+0x2cc>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80021ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80021b2:	d017      	beq.n	80021e4 <UART_SetConfig+0x2bc>
 80021b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80021b8:	d82a      	bhi.n	8002210 <UART_SetConfig+0x2e8>
 80021ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021be:	d00b      	beq.n	80021d8 <UART_SetConfig+0x2b0>
 80021c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021c4:	d824      	bhi.n	8002210 <UART_SetConfig+0x2e8>
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <UART_SetConfig+0x2aa>
 80021ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021ce:	d006      	beq.n	80021de <UART_SetConfig+0x2b6>
 80021d0:	e01e      	b.n	8002210 <UART_SetConfig+0x2e8>
 80021d2:	2300      	movs	r3, #0
 80021d4:	77fb      	strb	r3, [r7, #31]
 80021d6:	e04b      	b.n	8002270 <UART_SetConfig+0x348>
 80021d8:	2302      	movs	r3, #2
 80021da:	77fb      	strb	r3, [r7, #31]
 80021dc:	e048      	b.n	8002270 <UART_SetConfig+0x348>
 80021de:	2304      	movs	r3, #4
 80021e0:	77fb      	strb	r3, [r7, #31]
 80021e2:	e045      	b.n	8002270 <UART_SetConfig+0x348>
 80021e4:	2308      	movs	r3, #8
 80021e6:	77fb      	strb	r3, [r7, #31]
 80021e8:	e042      	b.n	8002270 <UART_SetConfig+0x348>
 80021ea:	bf00      	nop
 80021ec:	efff69f3 	.word	0xefff69f3
 80021f0:	40011000 	.word	0x40011000
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40004400 	.word	0x40004400
 80021fc:	40004800 	.word	0x40004800
 8002200:	40004c00 	.word	0x40004c00
 8002204:	40005000 	.word	0x40005000
 8002208:	40011400 	.word	0x40011400
 800220c:	40007800 	.word	0x40007800
 8002210:	2310      	movs	r3, #16
 8002212:	77fb      	strb	r3, [r7, #31]
 8002214:	e02c      	b.n	8002270 <UART_SetConfig+0x348>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a7e      	ldr	r2, [pc, #504]	@ (8002414 <UART_SetConfig+0x4ec>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d125      	bne.n	800226c <UART_SetConfig+0x344>
 8002220:	4b7d      	ldr	r3, [pc, #500]	@ (8002418 <UART_SetConfig+0x4f0>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002226:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800222a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800222e:	d017      	beq.n	8002260 <UART_SetConfig+0x338>
 8002230:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002234:	d817      	bhi.n	8002266 <UART_SetConfig+0x33e>
 8002236:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800223a:	d00b      	beq.n	8002254 <UART_SetConfig+0x32c>
 800223c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002240:	d811      	bhi.n	8002266 <UART_SetConfig+0x33e>
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <UART_SetConfig+0x326>
 8002246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800224a:	d006      	beq.n	800225a <UART_SetConfig+0x332>
 800224c:	e00b      	b.n	8002266 <UART_SetConfig+0x33e>
 800224e:	2300      	movs	r3, #0
 8002250:	77fb      	strb	r3, [r7, #31]
 8002252:	e00d      	b.n	8002270 <UART_SetConfig+0x348>
 8002254:	2302      	movs	r3, #2
 8002256:	77fb      	strb	r3, [r7, #31]
 8002258:	e00a      	b.n	8002270 <UART_SetConfig+0x348>
 800225a:	2304      	movs	r3, #4
 800225c:	77fb      	strb	r3, [r7, #31]
 800225e:	e007      	b.n	8002270 <UART_SetConfig+0x348>
 8002260:	2308      	movs	r3, #8
 8002262:	77fb      	strb	r3, [r7, #31]
 8002264:	e004      	b.n	8002270 <UART_SetConfig+0x348>
 8002266:	2310      	movs	r3, #16
 8002268:	77fb      	strb	r3, [r7, #31]
 800226a:	e001      	b.n	8002270 <UART_SetConfig+0x348>
 800226c:	2310      	movs	r3, #16
 800226e:	77fb      	strb	r3, [r7, #31]

	if (huart->INIT.OVER_SAMPLE == USART_CR1_OVER8)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002278:	d168      	bne.n	800234c <UART_SetConfig+0x424>
	{
		switch (clocksource)
 800227a:	7ffb      	ldrb	r3, [r7, #31]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d834      	bhi.n	80022ea <UART_SetConfig+0x3c2>
 8002280:	a201      	add	r2, pc, #4	@ (adr r2, 8002288 <UART_SetConfig+0x360>)
 8002282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002286:	bf00      	nop
 8002288:	080022ad 	.word	0x080022ad
 800228c:	080022c1 	.word	0x080022c1
 8002290:	080022d5 	.word	0x080022d5
 8002294:	080022eb 	.word	0x080022eb
 8002298:	080022db 	.word	0x080022db
 800229c:	080022eb 	.word	0x080022eb
 80022a0:	080022eb 	.word	0x080022eb
 80022a4:	080022eb 	.word	0x080022eb
 80022a8:	080022e3 	.word	0x080022e3
		{
		case UART_CLOCKSOURCE_PCLK1:
			pclk = RCC_GetPCLK_Freq((RCC->CFGR & RCC_CFGR_PPRE1), RCC_CFGR_PPRE1_Pos);
 80022ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002418 <UART_SetConfig+0x4f0>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80022b4:	210a      	movs	r1, #10
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fa2e 	bl	8001718 <RCC_GetPCLK_Freq>
 80022bc:	61b8      	str	r0, [r7, #24]
			break;
 80022be:	e019      	b.n	80022f4 <UART_SetConfig+0x3cc>
		case UART_CLOCKSOURCE_PCLK2:
			pclk = RCC_GetPCLK_Freq((RCC->CFGR & RCC_CFGR_PPRE2), RCC_CFGR_PPRE2_Pos);
 80022c0:	4b55      	ldr	r3, [pc, #340]	@ (8002418 <UART_SetConfig+0x4f0>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80022c8:	210d      	movs	r1, #13
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fa24 	bl	8001718 <RCC_GetPCLK_Freq>
 80022d0:	61b8      	str	r0, [r7, #24]
	        break;
 80022d2:	e00f      	b.n	80022f4 <UART_SetConfig+0x3cc>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 80022d4:	4b51      	ldr	r3, [pc, #324]	@ (800241c <UART_SetConfig+0x4f4>)
 80022d6:	61bb      	str	r3, [r7, #24]
	        break;
 80022d8:	e00c      	b.n	80022f4 <UART_SetConfig+0x3cc>
		case UART_CLOCKSOURCE_SYSCLK:
	        pclk = Get_SysClock_Freq();
 80022da:	f7ff f92f 	bl	800153c <Get_SysClock_Freq>
 80022de:	61b8      	str	r0, [r7, #24]
	        break;
 80022e0:	e008      	b.n	80022f4 <UART_SetConfig+0x3cc>
		case UART_CLOCKSOURCE_LSE:
	        pclk = (uint32_t) LSE_VALUE;
 80022e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022e6:	61bb      	str	r3, [r7, #24]
	        break;
 80022e8:	e004      	b.n	80022f4 <UART_SetConfig+0x3cc>
		default:
	        pclk = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
	        ret = STATE_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	77bb      	strb	r3, [r7, #30]
	        break;
 80022f2:	bf00      	nop
		}
		if (pclk != 0U)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8080 	beq.w	80023fc <UART_SetConfig+0x4d4>
		{
			usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->INIT.BAUD));
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	005a      	lsls	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	441a      	add	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	613b      	str	r3, [r7, #16]
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2b0f      	cmp	r3, #15
 8002316:	d916      	bls.n	8002346 <UART_SetConfig+0x41e>
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800231e:	d212      	bcs.n	8002346 <UART_SetConfig+0x41e>
			{
				brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	b29b      	uxth	r3, r3
 8002324:	f023 030f 	bic.w	r3, r3, #15
 8002328:	81fb      	strh	r3, [r7, #14]
				brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	085b      	lsrs	r3, r3, #1
 800232e:	b29b      	uxth	r3, r3
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	b29a      	uxth	r2, r3
 8002336:	89fb      	ldrh	r3, [r7, #14]
 8002338:	4313      	orrs	r3, r2
 800233a:	81fb      	strh	r3, [r7, #14]
				huart->INSTANCE->BRR = brrtemp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	89fa      	ldrh	r2, [r7, #14]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	e05a      	b.n	80023fc <UART_SetConfig+0x4d4>
			}
			else
			{
				ret = STATE_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	77bb      	strb	r3, [r7, #30]
 800234a:	e057      	b.n	80023fc <UART_SetConfig+0x4d4>
			}
		}
	}
	else
	{
	    switch (clocksource)
 800234c:	7ffb      	ldrb	r3, [r7, #31]
 800234e:	2b08      	cmp	r3, #8
 8002350:	d833      	bhi.n	80023ba <UART_SetConfig+0x492>
 8002352:	a201      	add	r2, pc, #4	@ (adr r2, 8002358 <UART_SetConfig+0x430>)
 8002354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002358:	0800237d 	.word	0x0800237d
 800235c:	08002391 	.word	0x08002391
 8002360:	080023a5 	.word	0x080023a5
 8002364:	080023bb 	.word	0x080023bb
 8002368:	080023ab 	.word	0x080023ab
 800236c:	080023bb 	.word	0x080023bb
 8002370:	080023bb 	.word	0x080023bb
 8002374:	080023bb 	.word	0x080023bb
 8002378:	080023b3 	.word	0x080023b3
	    {
	    case UART_CLOCKSOURCE_PCLK1:
	        pclk = RCC_GetPCLK_Freq((RCC->CFGR & RCC_CFGR_PPRE1), RCC_CFGR_PPRE1_Pos);
 800237c:	4b26      	ldr	r3, [pc, #152]	@ (8002418 <UART_SetConfig+0x4f0>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002384:	210a      	movs	r1, #10
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff f9c6 	bl	8001718 <RCC_GetPCLK_Freq>
 800238c:	61b8      	str	r0, [r7, #24]
	        break;
 800238e:	e019      	b.n	80023c4 <UART_SetConfig+0x49c>
	    case UART_CLOCKSOURCE_PCLK2:
	        pclk = RCC_GetPCLK_Freq((RCC->CFGR & RCC_CFGR_PPRE2), RCC_CFGR_PPRE2_Pos);
 8002390:	4b21      	ldr	r3, [pc, #132]	@ (8002418 <UART_SetConfig+0x4f0>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002398:	210d      	movs	r1, #13
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f9bc 	bl	8001718 <RCC_GetPCLK_Freq>
 80023a0:	61b8      	str	r0, [r7, #24]
	        break;
 80023a2:	e00f      	b.n	80023c4 <UART_SetConfig+0x49c>
	    case UART_CLOCKSOURCE_HSI:
	        pclk = (uint32_t) HSI_VALUE;
 80023a4:	4b1d      	ldr	r3, [pc, #116]	@ (800241c <UART_SetConfig+0x4f4>)
 80023a6:	61bb      	str	r3, [r7, #24]
	        break;
 80023a8:	e00c      	b.n	80023c4 <UART_SetConfig+0x49c>
	    case UART_CLOCKSOURCE_SYSCLK:
	        pclk = Get_SysClock_Freq();
 80023aa:	f7ff f8c7 	bl	800153c <Get_SysClock_Freq>
 80023ae:	61b8      	str	r0, [r7, #24]
	        break;
 80023b0:	e008      	b.n	80023c4 <UART_SetConfig+0x49c>
	    case UART_CLOCKSOURCE_LSE:
	        pclk = (uint32_t) LSE_VALUE;
 80023b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023b6:	61bb      	str	r3, [r7, #24]
	        break;
 80023b8:	e004      	b.n	80023c4 <UART_SetConfig+0x49c>
	    default:
	        pclk = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
	        ret = STATE_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	77bb      	strb	r3, [r7, #30]
	        break;
 80023c2:	bf00      	nop
	    }

	    if (pclk != 0U)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d018      	beq.n	80023fc <UART_SetConfig+0x4d4>
	    {
	      /* USARTDIV must be greater than or equal to 0d16 */
	    	usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->INIT.BAUD));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	085a      	lsrs	r2, r3, #1
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	441a      	add	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	613b      	str	r3, [r7, #16]
	    	if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b0f      	cmp	r3, #15
 80023e2:	d909      	bls.n	80023f8 <UART_SetConfig+0x4d0>
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023ea:	d205      	bcs.n	80023f8 <UART_SetConfig+0x4d0>
	    	{
	    		huart->INSTANCE->BRR = (uint16_t)usartdiv;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	e001      	b.n	80023fc <UART_SetConfig+0x4d4>
	    	}
	    	else
	    	{
	    		ret = STATE_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	77bb      	strb	r3, [r7, #30]
	    	}
	    }
	}

	huart->TX_ISR = NULL;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	669a      	str	r2, [r3, #104]	@ 0x68
	huart->RX_ISR = NULL;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	66da      	str	r2, [r3, #108]	@ 0x6c

	return ret;
 8002408:	7fbb      	ldrb	r3, [r7, #30]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40007c00 	.word	0x40007c00
 8002418:	40023800 	.word	0x40023800
 800241c:	00f42400 	.word	0x00f42400

08002420 <UART_CheckIdleState>:

Error_HandleTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08c      	sub	sp, #48	@ 0x30
 8002424:	af02      	add	r7, sp, #8
 8002426:	6078      	str	r0, [r7, #4]
	uint32_t TickStart;

	huart->ERR_CODE = 0x00U;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	67da      	str	r2, [r3, #124]	@ 0x7c
	TickStart = uwTick;
 800242e:	4b27      	ldr	r3, [pc, #156]	@ (80024cc <UART_CheckIdleState+0xac>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24

	if ((huart->INSTANCE->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b08      	cmp	r3, #8
 8002440:	d12e      	bne.n	80024a0 <UART_CheckIdleState+0x80>
	{
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, TickStart, UART_TIMEOUT_VALUE) != STATE_OK)
 8002442:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	2200      	movs	r2, #0
 800244c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f88f 	bl	8002574 <UART_WaitOnFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d021      	beq.n	80024a0 <UART_CheckIdleState+0x80>
		{
			ATOMIC_CLEAR_BIT(huart->INSTANCE->CR1, USART_CR1_TXEIE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	e853 3f00 	ldrex	r3, [r3]
 8002468:	60fb      	str	r3, [r7, #12]
   return(result);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002470:	623b      	str	r3, [r7, #32]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247e:	69b9      	ldr	r1, [r7, #24]
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	e841 2300 	strex	r3, r2, [r1]
 8002486:	617b      	str	r3, [r7, #20]
   return(result);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1e6      	bne.n	800245c <UART_CheckIdleState+0x3c>

			huart->gSTATE = 0x20U;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2220      	movs	r2, #32
 8002492:	675a      	str	r2, [r3, #116]	@ 0x74

			do
			{
				huart->LOCK = UNLOCKED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			}
			while(0);

			return STATE_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e010      	b.n	80024c2 <UART_CheckIdleState+0xa2>
		}
	}

	huart->gSTATE = 0x20U;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2220      	movs	r2, #32
 80024a4:	675a      	str	r2, [r3, #116]	@ 0x74
	huart->RX_STATE = 0x20;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2220      	movs	r2, #32
 80024aa:	679a      	str	r2, [r3, #120]	@ 0x78
	huart->RECEPT_TYP = 0x00U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	661a      	str	r2, [r3, #96]	@ 0x60
	huart->RX_EVT_TYP = 0x00U;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	665a      	str	r2, [r3, #100]	@ 0x64

	do
	{
		huart->LOCK = UNLOCKED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	}
	while(0);

	return STATE_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3728      	adds	r7, #40	@ 0x28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000270 	.word	0x20000270

080024d0 <UART_Pin_Config>:

void UART_Pin_Config(UART_HandleTypeDef *huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b0a8      	sub	sp, #160	@ 0xa0
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	GPIO_ConfigTypeDef gpio_config = {0};
 80024d8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
	RCC_Periph_CLK_ConfigTypedef periph_clk_config = {0};
 80024e8:	f107 030c 	add.w	r3, r7, #12
 80024ec:	2280      	movs	r2, #128	@ 0x80
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 ffc4 	bl	800347e <memset>

	if(huart->INSTANCE == USART1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002568 <UART_Pin_Config+0x98>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d12f      	bne.n	8002560 <UART_Pin_Config+0x90>
	{
		periph_clk_config.PeriphClockSelection = (uint32_t)0x40U;
 8002500:	2340      	movs	r3, #64	@ 0x40
 8002502:	60fb      	str	r3, [r7, #12]
		periph_clk_config.Usart1ClockSelection = (uint32_t)0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	64bb      	str	r3, [r7, #72]	@ 0x48

		if(PeriphCLKConfig(&periph_clk_config) != STATE_OK)
 8002508:	f107 030c 	add.w	r3, r7, #12
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f91b 	bl	8001748 <PeriphCLKConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <UART_Pin_Config+0x4c>
		{
			Error_Handler();
 8002518:	f000 fa26 	bl	8002968 <Error_Handler>
		}

		do
		{
			SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN);
 800251c:	4b13      	ldr	r3, [pc, #76]	@ (800256c <UART_Pin_Config+0x9c>)
 800251e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002520:	4a12      	ldr	r2, [pc, #72]	@ (800256c <UART_Pin_Config+0x9c>)
 8002522:	f043 0310 	orr.w	r3, r3, #16
 8002526:	6453      	str	r3, [r2, #68]	@ 0x44
		}
		while(0);

		RCC_GPIOCLK_ENABLE(RCC_AHB1ENR_GPIOAEN);
 8002528:	4b10      	ldr	r3, [pc, #64]	@ (800256c <UART_Pin_Config+0x9c>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	4a0f      	ldr	r2, [pc, #60]	@ (800256c <UART_Pin_Config+0x9c>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6313      	str	r3, [r2, #48]	@ 0x30

		gpio_config.PIN = ((1 << 9) | (1 << 10));
 8002534:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002538:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		gpio_config.MODE = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		gpio_config.PULL = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		gpio_config.SPEED = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		gpio_config.ALT = (uint8_t)0x07U;
 800254e:	2307      	movs	r3, #7
 8002550:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

		GPIO_Config(GPIOA, &gpio_config);
 8002554:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002558:	4619      	mov	r1, r3
 800255a:	4805      	ldr	r0, [pc, #20]	@ (8002570 <UART_Pin_Config+0xa0>)
 800255c:	f7ff f9bc 	bl	80018d8 <GPIO_Config>
	}
}
 8002560:	bf00      	nop
 8002562:	37a0      	adds	r7, #160	@ 0xa0
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40011000 	.word	0x40011000
 800256c:	40023800 	.word	0x40023800
 8002570:	40020000 	.word	0x40020000

08002574 <UART_WaitOnFlagUntilTimeout>:

Error_HandleTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	71fb      	strb	r3, [r7, #7]
	while(((huart->INSTANCE->ISR & Flag) == Flag) == RESET)
 8002584:	e04c      	b.n	8002620 <UART_WaitOnFlagUntilTimeout+0xac>
	{
		if(Timeout != MS_MAX_DELAY)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d048      	beq.n	8002620 <UART_WaitOnFlagUntilTimeout+0xac>
		{
			if((uwTick - Tickstart) > Timeout || Timeout == 0U)
 800258e:	4b2b      	ldr	r3, [pc, #172]	@ (800263c <UART_WaitOnFlagUntilTimeout+0xc8>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	429a      	cmp	r2, r3
 800259a:	d302      	bcc.n	80025a2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x32>
			{
				return STATE_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e045      	b.n	8002632 <UART_WaitOnFlagUntilTimeout+0xbe>
			}
			if((READ_BIT(huart->INSTANCE->CR1, USART_CR1_RE) != 0U) && (Flag != USART_ISR_TXE) && (Flag != USART_ISR_TC))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d035      	beq.n	8002620 <UART_WaitOnFlagUntilTimeout+0xac>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b80      	cmp	r3, #128	@ 0x80
 80025b8:	d032      	beq.n	8002620 <UART_WaitOnFlagUntilTimeout+0xac>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b40      	cmp	r3, #64	@ 0x40
 80025be:	d02f      	beq.n	8002620 <UART_WaitOnFlagUntilTimeout+0xac>
			{
				if(((huart->INSTANCE->ISR & USART_ISR_ORE) == USART_ISR_ORE) == SET)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d10f      	bne.n	80025ee <UART_WaitOnFlagUntilTimeout+0x7a>
				{
					(huart->INSTANCE->ICR) = USART_ICR_ORECF;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2208      	movs	r2, #8
 80025d4:	621a      	str	r2, [r3, #32]

					UART_EndRxTransfer(huart);
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f832 	bl	8002640 <UART_EndRxTransfer>

					huart->ERR_CODE = 0x08U;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2208      	movs	r2, #8
 80025e0:	67da      	str	r2, [r3, #124]	@ 0x7c

					do
					{
						huart->LOCK = UNLOCKED;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					}
					while(0);

					return STATE_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e021      	b.n	8002632 <UART_WaitOnFlagUntilTimeout+0xbe>
				}
				if(((huart->INSTANCE->ISR & USART_ISR_RTOF) == USART_ISR_RTOF) == SET)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025fc:	d110      	bne.n	8002620 <UART_WaitOnFlagUntilTimeout+0xac>
				{
					(huart->INSTANCE->ICR) = USART_ICR_RTOCF;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002606:	621a      	str	r2, [r3, #32]

					UART_EndRxTransfer(huart);
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f819 	bl	8002640 <UART_EndRxTransfer>

					huart->ERR_CODE = 0x20U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2220      	movs	r2, #32
 8002612:	67da      	str	r2, [r3, #124]	@ 0x7c

					do
					{
						huart->LOCK = UNLOCKED;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					}
					while(0);

					return STATE_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e008      	b.n	8002632 <UART_WaitOnFlagUntilTimeout+0xbe>
	while(((huart->INSTANCE->ISR & Flag) == Flag) == RESET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4013      	ands	r3, r2
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	429a      	cmp	r2, r3
 800262e:	d1aa      	bne.n	8002586 <UART_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return STATE_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000270 	.word	0x20000270

08002640 <UART_EndRxTransfer>:

static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002640:	b480      	push	{r7}
 8002642:	b095      	sub	sp, #84	@ 0x54
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	ATOMIC_CLEAR_BIT(huart->INSTANCE->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002650:	e853 3f00 	ldrex	r3, [r3]
 8002654:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002658:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800265c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002666:	643b      	str	r3, [r7, #64]	@ 0x40
 8002668:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800266c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800266e:	e841 2300 	strex	r3, r2, [r1]
 8002672:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1e6      	bne.n	8002648 <UART_EndRxTransfer+0x8>
	ATOMIC_CLEAR_BIT(huart->INSTANCE->CR3, USART_CR3_EIE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3308      	adds	r3, #8
 8002680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	e853 3f00 	ldrex	r3, [r3]
 8002688:	61fb      	str	r3, [r7, #28]
   return(result);
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3308      	adds	r3, #8
 8002698:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800269a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800269c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026a2:	e841 2300 	strex	r3, r2, [r1]
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1e5      	bne.n	800267a <UART_EndRxTransfer+0x3a>

	if(huart->RECEPT_TYP == 0x01U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d118      	bne.n	80026e8 <UART_EndRxTransfer+0xa8>
	{
		ATOMIC_CLEAR_BIT(huart->INSTANCE->CR1, USART_CR1_IDLEIE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	e853 3f00 	ldrex	r3, [r3]
 80026c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f023 0310 	bic.w	r3, r3, #16
 80026ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d8:	6979      	ldr	r1, [r7, #20]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	e841 2300 	strex	r3, r2, [r1]
 80026e0:	613b      	str	r3, [r7, #16]
   return(result);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1e6      	bne.n	80026b6 <UART_EndRxTransfer+0x76>
	}

	huart->RX_STATE = 0x20U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	679a      	str	r2, [r3, #120]	@ 0x78
	huart->RECEPT_TYP = 0x00U;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	661a      	str	r2, [r3, #96]	@ 0x60

	huart->RX_ISR = NULL;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80026fa:	bf00      	nop
 80026fc:	3754      	adds	r7, #84	@ 0x54
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	System_Config();
 800270c:	f7ff fb7c 	bl	8001e08 <System_Config>

	System_Clock_Config();
 8002710:	f000 f81a 	bl	8002748 <System_Clock_Config>

	GPIO_Init();
 8002714:	f000 f8b6 	bl	8002884 <GPIO_Init>
	UART_Init();
 8002718:	f000 f8f6 	bl	8002908 <UART_Init>

	while(1)
	{
		GPIO_Write(GPIOA, (1<<0), GPIO_SET);
 800271c:	2201      	movs	r2, #1
 800271e:	2101      	movs	r1, #1
 8002720:	4808      	ldr	r0, [pc, #32]	@ (8002744 <main+0x3c>)
 8002722:	f7ff fa6f 	bl	8001c04 <GPIO_Write>
		Delay_Ms(500);
 8002726:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800272a:	f7fe ffd3 	bl	80016d4 <Delay_Ms>
		GPIO_Write(GPIOA, (1<<0), GPIO_RESET);
 800272e:	2200      	movs	r2, #0
 8002730:	2101      	movs	r1, #1
 8002732:	4804      	ldr	r0, [pc, #16]	@ (8002744 <main+0x3c>)
 8002734:	f7ff fa66 	bl	8001c04 <GPIO_Write>
		Delay_Ms(500);
 8002738:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800273c:	f7fe ffca 	bl	80016d4 <Delay_Ms>
		GPIO_Write(GPIOA, (1<<0), GPIO_SET);
 8002740:	bf00      	nop
 8002742:	e7eb      	b.n	800271c <main+0x14>
 8002744:	40020000 	.word	0x40020000

08002748 <System_Clock_Config>:
	}
}

void System_Clock_Config(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b092      	sub	sp, #72	@ 0x48
 800274c:	af00      	add	r7, sp, #0
	OSC_ConfigSetTypeDef config = {0};
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	2228      	movs	r2, #40	@ 0x28
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fe91 	bl	800347e <memset>
	Clock_ConfigTypeDef clock_config = {0};
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]
 8002768:	611a      	str	r2, [r3, #16]
 800276a:	615a      	str	r2, [r3, #20]
	uint32_t TickStart;

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 800276c:	4b42      	ldr	r3, [pc, #264]	@ (8002878 <System_Clock_Config+0x130>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	4a41      	ldr	r2, [pc, #260]	@ (8002878 <System_Clock_Config+0x130>)
 8002772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002776:	6413      	str	r3, [r2, #64]	@ 0x40
	MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_CR1_VOS);
 8002778:	4b40      	ldr	r3, [pc, #256]	@ (800287c <System_Clock_Config+0x134>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a3f      	ldr	r2, [pc, #252]	@ (800287c <System_Clock_Config+0x134>)
 800277e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002782:	6013      	str	r3, [r2, #0]

	config.OSC_TYPE = OSC_TYPE_HSE;
 8002784:	2301      	movs	r3, #1
 8002786:	61fb      	str	r3, [r7, #28]
	config.HSE_SET.HSE_STATE = HSE_ON;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	config.HSI_SET.HSI_STATE = HSI_OFF;
 800278e:	2300      	movs	r3, #0
 8002790:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	config.PLL_SET.PLL_STATE = PLL_ON;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 3020 	strb.w	r3, [r7, #32]
	config.PLL_SET.PLLSRC = PLLSRC_HSE;
 800279a:	2301      	movs	r3, #1
 800279c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	config.PLL_SET.PLLM = 12;
 80027a0:	230c      	movs	r3, #12
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24
	config.PLL_SET.PLLN = 216;
 80027a4:	23d8      	movs	r3, #216	@ 0xd8
 80027a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	config.PLL_SET.PLLP = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	config.PLL_SET.PLLQ = 9;
 80027ac:	2309      	movs	r3, #9
 80027ae:	633b      	str	r3, [r7, #48]	@ 0x30
	if(Clock_Setup_OSC(&config) != STATE_OK)
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fc73 	bl	80010a0 <Clock_Setup_OSC>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <System_Clock_Config+0x7c>
	{
		Error_Handler();
 80027c0:	f000 f8d2 	bl	8002968 <Error_Handler>
	}

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 80027c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002878 <System_Clock_Config+0x130>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002878 <System_Clock_Config+0x130>)
 80027ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ce:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR1 |= (uint32_t)PWR_CR1_ODEN;
 80027d0:	4b2a      	ldr	r3, [pc, #168]	@ (800287c <System_Clock_Config+0x134>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a29      	ldr	r2, [pc, #164]	@ (800287c <System_Clock_Config+0x134>)
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027da:	6013      	str	r3, [r2, #0]

	TickStart = uwTick;
 80027dc:	4b28      	ldr	r3, [pc, #160]	@ (8002880 <System_Clock_Config+0x138>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	647b      	str	r3, [r7, #68]	@ 0x44
	while(!(PWR->CSR1 & PWR_CSR1_ODRDY))
 80027e2:	e008      	b.n	80027f6 <System_Clock_Config+0xae>
	{
		if((uwTick - TickStart) > 1000)
 80027e4:	4b26      	ldr	r3, [pc, #152]	@ (8002880 <System_Clock_Config+0x138>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027f0:	d901      	bls.n	80027f6 <System_Clock_Config+0xae>
		{
			Error_Handler();
 80027f2:	f000 f8b9 	bl	8002968 <Error_Handler>
	while(!(PWR->CSR1 & PWR_CSR1_ODRDY))
 80027f6:	4b21      	ldr	r3, [pc, #132]	@ (800287c <System_Clock_Config+0x134>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <System_Clock_Config+0x9c>
		}
	}

	PWR->CR1 |= (uint32_t)PWR_CR1_ODSWEN;
 8002802:	4b1e      	ldr	r3, [pc, #120]	@ (800287c <System_Clock_Config+0x134>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1d      	ldr	r2, [pc, #116]	@ (800287c <System_Clock_Config+0x134>)
 8002808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280c:	6013      	str	r3, [r2, #0]

	TickStart = uwTick;
 800280e:	4b1c      	ldr	r3, [pc, #112]	@ (8002880 <System_Clock_Config+0x138>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	647b      	str	r3, [r7, #68]	@ 0x44
	while(!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
 8002814:	e008      	b.n	8002828 <System_Clock_Config+0xe0>
	{
		if((uwTick - TickStart) > 1000)
 8002816:	4b1a      	ldr	r3, [pc, #104]	@ (8002880 <System_Clock_Config+0x138>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002822:	d901      	bls.n	8002828 <System_Clock_Config+0xe0>
		{
			Error_Handler();
 8002824:	f000 f8a0 	bl	8002968 <Error_Handler>
	while(!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
 8002828:	4b14      	ldr	r3, [pc, #80]	@ (800287c <System_Clock_Config+0x134>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <System_Clock_Config+0xce>
		}
	}

	clock_config.CLOCK_TYPE = RCC_CLK_TYPE_SYSCLK | RCC_CLK_TYPE_HCLK | RCC_CLK_TYPE_PCLK1 | RCC_CLK_TYPE_PCLK2;
 8002834:	230f      	movs	r3, #15
 8002836:	607b      	str	r3, [r7, #4]
	clock_config.SYSCLK_SOURCE = RCC_SYSCLKSOURCE_PLLCLK;
 8002838:	2302      	movs	r3, #2
 800283a:	60bb      	str	r3, [r7, #8]
	clock_config.AHBCLK_DIV = RCC_SYSCLK_DIV1;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
	clock_config.APB1CLK_DIV = RCC_HCLK_DIV4;
 8002840:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002844:	613b      	str	r3, [r7, #16]
	clock_config.APB2CLK_DIV = RCC_HCLK_DIV2;
 8002846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800284a:	617b      	str	r3, [r7, #20]
	clock_config.FLatency = FLASH_ACR_LATENCY_7WS;
 800284c:	2307      	movs	r3, #7
 800284e:	61bb      	str	r3, [r7, #24]
	if(Clock_Setup_Clock(&clock_config))
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fd32 	bl	80012bc <Clock_Setup_Clock>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <System_Clock_Config+0x11a>
	{
		Error_Handler();
 800285e:	f000 f883 	bl	8002968 <Error_Handler>
	}

	MCO_Config(RCC_MCO1, RCC_CFGR_MCO1_1, (uint32_t)0x00);
 8002862:	2200      	movs	r2, #0
 8002864:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002868:	2000      	movs	r0, #0
 800286a:	f7fe fe0f 	bl	800148c <MCO_Config>
}
 800286e:	bf00      	nop
 8002870:	3748      	adds	r7, #72	@ 0x48
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40007000 	.word	0x40007000
 8002880:	20000270 	.word	0x20000270

08002884 <GPIO_Init>:

static void GPIO_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
	GPIO_ConfigTypeDef config = {0};
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]

	RCC_GPIOCLK_ENABLE(RCC_AHB1ENR_GPIOAEN);
 8002898:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <GPIO_Init+0x7c>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	4a18      	ldr	r2, [pc, #96]	@ (8002900 <GPIO_Init+0x7c>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC_GPIOCLK_ENABLE(RCC_AHB1ENR_GPIOBEN);
 80028a4:	4b16      	ldr	r3, [pc, #88]	@ (8002900 <GPIO_Init+0x7c>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	4a15      	ldr	r2, [pc, #84]	@ (8002900 <GPIO_Init+0x7c>)
 80028aa:	f043 0302 	orr.w	r3, r3, #2
 80028ae:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC_GPIOCLK_ENABLE(RCC_AHB1ENR_GPIOHEN);
 80028b0:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <GPIO_Init+0x7c>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b4:	4a12      	ldr	r2, [pc, #72]	@ (8002900 <GPIO_Init+0x7c>)
 80028b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ba:	6313      	str	r3, [r2, #48]	@ 0x30

	config.PIN = (1 << 8);
 80028bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028c0:	607b      	str	r3, [r7, #4]
	config.MODE = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	60bb      	str	r3, [r7, #8]
	config.PULL = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
	config.SPEED = GPIO_SPEED_FREQ_HIGH;
 80028ca:	2302      	movs	r3, #2
 80028cc:	613b      	str	r3, [r7, #16]
	config.ALT = (uint8_t)0x00;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]

	GPIO_Config(GPIOA, &config);
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	480b      	ldr	r0, [pc, #44]	@ (8002904 <GPIO_Init+0x80>)
 80028d8:	f7fe fffe 	bl	80018d8 <GPIO_Config>


	config.PIN = (1 << 0);
 80028dc:	2301      	movs	r3, #1
 80028de:	607b      	str	r3, [r7, #4]
	config.MODE = GPIO_MODE_OUTPUT_PP;
 80028e0:	2301      	movs	r3, #1
 80028e2:	60bb      	str	r3, [r7, #8]
	config.PULL = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
	config.SPEED = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]

	GPIO_Config(GPIOA, &config);
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4804      	ldr	r0, [pc, #16]	@ (8002904 <GPIO_Init+0x80>)
 80028f2:	f7fe fff1 	bl	80018d8 <GPIO_Config>
}
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	40020000 	.word	0x40020000

08002908 <UART_Init>:

static void UART_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	huart1.INSTANCE = USART1;
 800290c:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <UART_Init+0x58>)
 800290e:	4a15      	ldr	r2, [pc, #84]	@ (8002964 <UART_Init+0x5c>)
 8002910:	601a      	str	r2, [r3, #0]
	huart1.INIT.BAUD = 115200;
 8002912:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <UART_Init+0x58>)
 8002914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002918:	605a      	str	r2, [r3, #4]
	huart1.INIT.WORD_LEN = 0x00U;
 800291a:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <UART_Init+0x58>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
	huart1.INIT.STOP_BIT = 0x00U;
 8002920:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <UART_Init+0x58>)
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
	huart1.INIT.PARITY = 0x00U;
 8002926:	4b0e      	ldr	r3, [pc, #56]	@ (8002960 <UART_Init+0x58>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
	huart1.INIT.MODE = (USART_CR1_TE | USART_CR1_RE);
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <UART_Init+0x58>)
 800292e:	220c      	movs	r2, #12
 8002930:	615a      	str	r2, [r3, #20]
	huart1.INIT.FLOW_CTRL = 0x00U;
 8002932:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <UART_Init+0x58>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
	huart1.INIT.OVER_SAMPLE = 0x00U;
 8002938:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <UART_Init+0x58>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
	huart1.INIT.ONEB_SAMPLE = 0x00U;
 800293e:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <UART_Init+0x58>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
	huart1.ADV_INIT.ADV_FEAT_INIT = 0x00U;
 8002944:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <UART_Init+0x58>)
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24
	if(UART_Config(&huart1) != STATE_OK)
 800294a:	4805      	ldr	r0, [pc, #20]	@ (8002960 <UART_Init+0x58>)
 800294c:	f7ff faa4 	bl	8001e98 <UART_Config>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <UART_Init+0x52>
	{
		Error_Handler();
 8002956:	f000 f807 	bl	8002968 <Error_Handler>
	}
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200001f0 	.word	0x200001f0
 8002964:	40011000 	.word	0x40011000

08002968 <Error_Handler>:

void Error_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800296c:	b672      	cpsid	i
}
 800296e:	bf00      	nop
	__disable_irq();
	while(1);
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <Error_Handler+0x8>

08002974 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002974:	480d      	ldr	r0, [pc, #52]	@ (80029ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002976:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002978:	f7fe fb7c 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800297c:	480c      	ldr	r0, [pc, #48]	@ (80029b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800297e:	490d      	ldr	r1, [pc, #52]	@ (80029b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002980:	4a0d      	ldr	r2, [pc, #52]	@ (80029b8 <LoopForever+0xe>)
  movs r3, #0
 8002982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002984:	e002      	b.n	800298c <LoopCopyDataInit>

08002986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298a:	3304      	adds	r3, #4

0800298c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800298c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800298e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002990:	d3f9      	bcc.n	8002986 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002992:	4a0a      	ldr	r2, [pc, #40]	@ (80029bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002994:	4c0a      	ldr	r4, [pc, #40]	@ (80029c0 <LoopForever+0x16>)
  movs r3, #0
 8002996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002998:	e001      	b.n	800299e <LoopFillZerobss>

0800299a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800299c:	3204      	adds	r2, #4

0800299e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800299e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a0:	d3fb      	bcc.n	800299a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029a2:	f000 fdc5 	bl	8003530 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029a6:	f7ff feaf 	bl	8002708 <main>

080029aa <LoopForever>:

LoopForever:
  b LoopForever
 80029aa:	e7fe      	b.n	80029aa <LoopForever>
  ldr   r0, =_estack
 80029ac:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80029b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b4:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80029b8:	08005670 	.word	0x08005670
  ldr r2, =_sbss
 80029bc:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80029c0:	200003c0 	.word	0x200003c0

080029c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029c4:	e7fe      	b.n	80029c4 <ADC_IRQHandler>

080029c6 <__cvt>:
 80029c6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029ca:	ec57 6b10 	vmov	r6, r7, d0
 80029ce:	2f00      	cmp	r7, #0
 80029d0:	460c      	mov	r4, r1
 80029d2:	4619      	mov	r1, r3
 80029d4:	463b      	mov	r3, r7
 80029d6:	bfbb      	ittet	lt
 80029d8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80029dc:	461f      	movlt	r7, r3
 80029de:	2300      	movge	r3, #0
 80029e0:	232d      	movlt	r3, #45	@ 0x2d
 80029e2:	700b      	strb	r3, [r1, #0]
 80029e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80029e6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80029ea:	4691      	mov	r9, r2
 80029ec:	f023 0820 	bic.w	r8, r3, #32
 80029f0:	bfbc      	itt	lt
 80029f2:	4632      	movlt	r2, r6
 80029f4:	4616      	movlt	r6, r2
 80029f6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80029fa:	d005      	beq.n	8002a08 <__cvt+0x42>
 80029fc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002a00:	d100      	bne.n	8002a04 <__cvt+0x3e>
 8002a02:	3401      	adds	r4, #1
 8002a04:	2102      	movs	r1, #2
 8002a06:	e000      	b.n	8002a0a <__cvt+0x44>
 8002a08:	2103      	movs	r1, #3
 8002a0a:	ab03      	add	r3, sp, #12
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	ab02      	add	r3, sp, #8
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	ec47 6b10 	vmov	d0, r6, r7
 8002a16:	4653      	mov	r3, sl
 8002a18:	4622      	mov	r2, r4
 8002a1a:	f000 fe39 	bl	8003690 <_dtoa_r>
 8002a1e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002a22:	4605      	mov	r5, r0
 8002a24:	d119      	bne.n	8002a5a <__cvt+0x94>
 8002a26:	f019 0f01 	tst.w	r9, #1
 8002a2a:	d00e      	beq.n	8002a4a <__cvt+0x84>
 8002a2c:	eb00 0904 	add.w	r9, r0, r4
 8002a30:	2200      	movs	r2, #0
 8002a32:	2300      	movs	r3, #0
 8002a34:	4630      	mov	r0, r6
 8002a36:	4639      	mov	r1, r7
 8002a38:	f7fe f86e 	bl	8000b18 <__aeabi_dcmpeq>
 8002a3c:	b108      	cbz	r0, 8002a42 <__cvt+0x7c>
 8002a3e:	f8cd 900c 	str.w	r9, [sp, #12]
 8002a42:	2230      	movs	r2, #48	@ 0x30
 8002a44:	9b03      	ldr	r3, [sp, #12]
 8002a46:	454b      	cmp	r3, r9
 8002a48:	d31e      	bcc.n	8002a88 <__cvt+0xc2>
 8002a4a:	9b03      	ldr	r3, [sp, #12]
 8002a4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002a4e:	1b5b      	subs	r3, r3, r5
 8002a50:	4628      	mov	r0, r5
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	b004      	add	sp, #16
 8002a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a5a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002a5e:	eb00 0904 	add.w	r9, r0, r4
 8002a62:	d1e5      	bne.n	8002a30 <__cvt+0x6a>
 8002a64:	7803      	ldrb	r3, [r0, #0]
 8002a66:	2b30      	cmp	r3, #48	@ 0x30
 8002a68:	d10a      	bne.n	8002a80 <__cvt+0xba>
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	4630      	mov	r0, r6
 8002a70:	4639      	mov	r1, r7
 8002a72:	f7fe f851 	bl	8000b18 <__aeabi_dcmpeq>
 8002a76:	b918      	cbnz	r0, 8002a80 <__cvt+0xba>
 8002a78:	f1c4 0401 	rsb	r4, r4, #1
 8002a7c:	f8ca 4000 	str.w	r4, [sl]
 8002a80:	f8da 3000 	ldr.w	r3, [sl]
 8002a84:	4499      	add	r9, r3
 8002a86:	e7d3      	b.n	8002a30 <__cvt+0x6a>
 8002a88:	1c59      	adds	r1, r3, #1
 8002a8a:	9103      	str	r1, [sp, #12]
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e7d9      	b.n	8002a44 <__cvt+0x7e>

08002a90 <__exponent>:
 8002a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a92:	2900      	cmp	r1, #0
 8002a94:	bfba      	itte	lt
 8002a96:	4249      	neglt	r1, r1
 8002a98:	232d      	movlt	r3, #45	@ 0x2d
 8002a9a:	232b      	movge	r3, #43	@ 0x2b
 8002a9c:	2909      	cmp	r1, #9
 8002a9e:	7002      	strb	r2, [r0, #0]
 8002aa0:	7043      	strb	r3, [r0, #1]
 8002aa2:	dd29      	ble.n	8002af8 <__exponent+0x68>
 8002aa4:	f10d 0307 	add.w	r3, sp, #7
 8002aa8:	461d      	mov	r5, r3
 8002aaa:	270a      	movs	r7, #10
 8002aac:	461a      	mov	r2, r3
 8002aae:	fbb1 f6f7 	udiv	r6, r1, r7
 8002ab2:	fb07 1416 	mls	r4, r7, r6, r1
 8002ab6:	3430      	adds	r4, #48	@ 0x30
 8002ab8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002abc:	460c      	mov	r4, r1
 8002abe:	2c63      	cmp	r4, #99	@ 0x63
 8002ac0:	f103 33ff 	add.w	r3, r3, #4294967295
 8002ac4:	4631      	mov	r1, r6
 8002ac6:	dcf1      	bgt.n	8002aac <__exponent+0x1c>
 8002ac8:	3130      	adds	r1, #48	@ 0x30
 8002aca:	1e94      	subs	r4, r2, #2
 8002acc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002ad0:	1c41      	adds	r1, r0, #1
 8002ad2:	4623      	mov	r3, r4
 8002ad4:	42ab      	cmp	r3, r5
 8002ad6:	d30a      	bcc.n	8002aee <__exponent+0x5e>
 8002ad8:	f10d 0309 	add.w	r3, sp, #9
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	42ac      	cmp	r4, r5
 8002ae0:	bf88      	it	hi
 8002ae2:	2300      	movhi	r3, #0
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	4403      	add	r3, r0
 8002ae8:	1a18      	subs	r0, r3, r0
 8002aea:	b003      	add	sp, #12
 8002aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aee:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002af2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002af6:	e7ed      	b.n	8002ad4 <__exponent+0x44>
 8002af8:	2330      	movs	r3, #48	@ 0x30
 8002afa:	3130      	adds	r1, #48	@ 0x30
 8002afc:	7083      	strb	r3, [r0, #2]
 8002afe:	70c1      	strb	r1, [r0, #3]
 8002b00:	1d03      	adds	r3, r0, #4
 8002b02:	e7f1      	b.n	8002ae8 <__exponent+0x58>

08002b04 <_printf_float>:
 8002b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b08:	b08d      	sub	sp, #52	@ 0x34
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002b10:	4616      	mov	r6, r2
 8002b12:	461f      	mov	r7, r3
 8002b14:	4605      	mov	r5, r0
 8002b16:	f000 fcbb 	bl	8003490 <_localeconv_r>
 8002b1a:	6803      	ldr	r3, [r0, #0]
 8002b1c:	9304      	str	r3, [sp, #16]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fbce 	bl	80002c0 <strlen>
 8002b24:	2300      	movs	r3, #0
 8002b26:	930a      	str	r3, [sp, #40]	@ 0x28
 8002b28:	f8d8 3000 	ldr.w	r3, [r8]
 8002b2c:	9005      	str	r0, [sp, #20]
 8002b2e:	3307      	adds	r3, #7
 8002b30:	f023 0307 	bic.w	r3, r3, #7
 8002b34:	f103 0208 	add.w	r2, r3, #8
 8002b38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002b3c:	f8d4 b000 	ldr.w	fp, [r4]
 8002b40:	f8c8 2000 	str.w	r2, [r8]
 8002b44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002b48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002b4c:	9307      	str	r3, [sp, #28]
 8002b4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8002b52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002b56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b5a:	4b9c      	ldr	r3, [pc, #624]	@ (8002dcc <_printf_float+0x2c8>)
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	f7fe f80c 	bl	8000b7c <__aeabi_dcmpun>
 8002b64:	bb70      	cbnz	r0, 8002bc4 <_printf_float+0xc0>
 8002b66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b6a:	4b98      	ldr	r3, [pc, #608]	@ (8002dcc <_printf_float+0x2c8>)
 8002b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b70:	f7fd ffe6 	bl	8000b40 <__aeabi_dcmple>
 8002b74:	bb30      	cbnz	r0, 8002bc4 <_printf_float+0xc0>
 8002b76:	2200      	movs	r2, #0
 8002b78:	2300      	movs	r3, #0
 8002b7a:	4640      	mov	r0, r8
 8002b7c:	4649      	mov	r1, r9
 8002b7e:	f7fd ffd5 	bl	8000b2c <__aeabi_dcmplt>
 8002b82:	b110      	cbz	r0, 8002b8a <_printf_float+0x86>
 8002b84:	232d      	movs	r3, #45	@ 0x2d
 8002b86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b8a:	4a91      	ldr	r2, [pc, #580]	@ (8002dd0 <_printf_float+0x2cc>)
 8002b8c:	4b91      	ldr	r3, [pc, #580]	@ (8002dd4 <_printf_float+0x2d0>)
 8002b8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002b92:	bf94      	ite	ls
 8002b94:	4690      	movls	r8, r2
 8002b96:	4698      	movhi	r8, r3
 8002b98:	2303      	movs	r3, #3
 8002b9a:	6123      	str	r3, [r4, #16]
 8002b9c:	f02b 0304 	bic.w	r3, fp, #4
 8002ba0:	6023      	str	r3, [r4, #0]
 8002ba2:	f04f 0900 	mov.w	r9, #0
 8002ba6:	9700      	str	r7, [sp, #0]
 8002ba8:	4633      	mov	r3, r6
 8002baa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002bac:	4621      	mov	r1, r4
 8002bae:	4628      	mov	r0, r5
 8002bb0:	f000 f9d2 	bl	8002f58 <_printf_common>
 8002bb4:	3001      	adds	r0, #1
 8002bb6:	f040 808d 	bne.w	8002cd4 <_printf_float+0x1d0>
 8002bba:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbe:	b00d      	add	sp, #52	@ 0x34
 8002bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bc4:	4642      	mov	r2, r8
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	4640      	mov	r0, r8
 8002bca:	4649      	mov	r1, r9
 8002bcc:	f7fd ffd6 	bl	8000b7c <__aeabi_dcmpun>
 8002bd0:	b140      	cbz	r0, 8002be4 <_printf_float+0xe0>
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bfbc      	itt	lt
 8002bd8:	232d      	movlt	r3, #45	@ 0x2d
 8002bda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002bde:	4a7e      	ldr	r2, [pc, #504]	@ (8002dd8 <_printf_float+0x2d4>)
 8002be0:	4b7e      	ldr	r3, [pc, #504]	@ (8002ddc <_printf_float+0x2d8>)
 8002be2:	e7d4      	b.n	8002b8e <_printf_float+0x8a>
 8002be4:	6863      	ldr	r3, [r4, #4]
 8002be6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002bea:	9206      	str	r2, [sp, #24]
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	d13b      	bne.n	8002c68 <_printf_float+0x164>
 8002bf0:	2306      	movs	r3, #6
 8002bf2:	6063      	str	r3, [r4, #4]
 8002bf4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	6022      	str	r2, [r4, #0]
 8002bfc:	9303      	str	r3, [sp, #12]
 8002bfe:	ab0a      	add	r3, sp, #40	@ 0x28
 8002c00:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002c04:	ab09      	add	r3, sp, #36	@ 0x24
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	6861      	ldr	r1, [r4, #4]
 8002c0a:	ec49 8b10 	vmov	d0, r8, r9
 8002c0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002c12:	4628      	mov	r0, r5
 8002c14:	f7ff fed7 	bl	80029c6 <__cvt>
 8002c18:	9b06      	ldr	r3, [sp, #24]
 8002c1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002c1c:	2b47      	cmp	r3, #71	@ 0x47
 8002c1e:	4680      	mov	r8, r0
 8002c20:	d129      	bne.n	8002c76 <_printf_float+0x172>
 8002c22:	1cc8      	adds	r0, r1, #3
 8002c24:	db02      	blt.n	8002c2c <_printf_float+0x128>
 8002c26:	6863      	ldr	r3, [r4, #4]
 8002c28:	4299      	cmp	r1, r3
 8002c2a:	dd41      	ble.n	8002cb0 <_printf_float+0x1ac>
 8002c2c:	f1aa 0a02 	sub.w	sl, sl, #2
 8002c30:	fa5f fa8a 	uxtb.w	sl, sl
 8002c34:	3901      	subs	r1, #1
 8002c36:	4652      	mov	r2, sl
 8002c38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002c3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8002c3e:	f7ff ff27 	bl	8002a90 <__exponent>
 8002c42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002c44:	1813      	adds	r3, r2, r0
 8002c46:	2a01      	cmp	r2, #1
 8002c48:	4681      	mov	r9, r0
 8002c4a:	6123      	str	r3, [r4, #16]
 8002c4c:	dc02      	bgt.n	8002c54 <_printf_float+0x150>
 8002c4e:	6822      	ldr	r2, [r4, #0]
 8002c50:	07d2      	lsls	r2, r2, #31
 8002c52:	d501      	bpl.n	8002c58 <_printf_float+0x154>
 8002c54:	3301      	adds	r3, #1
 8002c56:	6123      	str	r3, [r4, #16]
 8002c58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0a2      	beq.n	8002ba6 <_printf_float+0xa2>
 8002c60:	232d      	movs	r3, #45	@ 0x2d
 8002c62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c66:	e79e      	b.n	8002ba6 <_printf_float+0xa2>
 8002c68:	9a06      	ldr	r2, [sp, #24]
 8002c6a:	2a47      	cmp	r2, #71	@ 0x47
 8002c6c:	d1c2      	bne.n	8002bf4 <_printf_float+0xf0>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1c0      	bne.n	8002bf4 <_printf_float+0xf0>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e7bd      	b.n	8002bf2 <_printf_float+0xee>
 8002c76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002c7a:	d9db      	bls.n	8002c34 <_printf_float+0x130>
 8002c7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002c80:	d118      	bne.n	8002cb4 <_printf_float+0x1b0>
 8002c82:	2900      	cmp	r1, #0
 8002c84:	6863      	ldr	r3, [r4, #4]
 8002c86:	dd0b      	ble.n	8002ca0 <_printf_float+0x19c>
 8002c88:	6121      	str	r1, [r4, #16]
 8002c8a:	b913      	cbnz	r3, 8002c92 <_printf_float+0x18e>
 8002c8c:	6822      	ldr	r2, [r4, #0]
 8002c8e:	07d0      	lsls	r0, r2, #31
 8002c90:	d502      	bpl.n	8002c98 <_printf_float+0x194>
 8002c92:	3301      	adds	r3, #1
 8002c94:	440b      	add	r3, r1
 8002c96:	6123      	str	r3, [r4, #16]
 8002c98:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002c9a:	f04f 0900 	mov.w	r9, #0
 8002c9e:	e7db      	b.n	8002c58 <_printf_float+0x154>
 8002ca0:	b913      	cbnz	r3, 8002ca8 <_printf_float+0x1a4>
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	07d2      	lsls	r2, r2, #31
 8002ca6:	d501      	bpl.n	8002cac <_printf_float+0x1a8>
 8002ca8:	3302      	adds	r3, #2
 8002caa:	e7f4      	b.n	8002c96 <_printf_float+0x192>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e7f2      	b.n	8002c96 <_printf_float+0x192>
 8002cb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002cb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002cb6:	4299      	cmp	r1, r3
 8002cb8:	db05      	blt.n	8002cc6 <_printf_float+0x1c2>
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	6121      	str	r1, [r4, #16]
 8002cbe:	07d8      	lsls	r0, r3, #31
 8002cc0:	d5ea      	bpl.n	8002c98 <_printf_float+0x194>
 8002cc2:	1c4b      	adds	r3, r1, #1
 8002cc4:	e7e7      	b.n	8002c96 <_printf_float+0x192>
 8002cc6:	2900      	cmp	r1, #0
 8002cc8:	bfd4      	ite	le
 8002cca:	f1c1 0202 	rsble	r2, r1, #2
 8002cce:	2201      	movgt	r2, #1
 8002cd0:	4413      	add	r3, r2
 8002cd2:	e7e0      	b.n	8002c96 <_printf_float+0x192>
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	055a      	lsls	r2, r3, #21
 8002cd8:	d407      	bmi.n	8002cea <_printf_float+0x1e6>
 8002cda:	6923      	ldr	r3, [r4, #16]
 8002cdc:	4642      	mov	r2, r8
 8002cde:	4631      	mov	r1, r6
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	47b8      	blx	r7
 8002ce4:	3001      	adds	r0, #1
 8002ce6:	d12b      	bne.n	8002d40 <_printf_float+0x23c>
 8002ce8:	e767      	b.n	8002bba <_printf_float+0xb6>
 8002cea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002cee:	f240 80dd 	bls.w	8002eac <_printf_float+0x3a8>
 8002cf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f7fd ff0d 	bl	8000b18 <__aeabi_dcmpeq>
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	d033      	beq.n	8002d6a <_printf_float+0x266>
 8002d02:	4a37      	ldr	r2, [pc, #220]	@ (8002de0 <_printf_float+0x2dc>)
 8002d04:	2301      	movs	r3, #1
 8002d06:	4631      	mov	r1, r6
 8002d08:	4628      	mov	r0, r5
 8002d0a:	47b8      	blx	r7
 8002d0c:	3001      	adds	r0, #1
 8002d0e:	f43f af54 	beq.w	8002bba <_printf_float+0xb6>
 8002d12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8002d16:	4543      	cmp	r3, r8
 8002d18:	db02      	blt.n	8002d20 <_printf_float+0x21c>
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	07d8      	lsls	r0, r3, #31
 8002d1e:	d50f      	bpl.n	8002d40 <_printf_float+0x23c>
 8002d20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002d24:	4631      	mov	r1, r6
 8002d26:	4628      	mov	r0, r5
 8002d28:	47b8      	blx	r7
 8002d2a:	3001      	adds	r0, #1
 8002d2c:	f43f af45 	beq.w	8002bba <_printf_float+0xb6>
 8002d30:	f04f 0900 	mov.w	r9, #0
 8002d34:	f108 38ff 	add.w	r8, r8, #4294967295
 8002d38:	f104 0a1a 	add.w	sl, r4, #26
 8002d3c:	45c8      	cmp	r8, r9
 8002d3e:	dc09      	bgt.n	8002d54 <_printf_float+0x250>
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	079b      	lsls	r3, r3, #30
 8002d44:	f100 8103 	bmi.w	8002f4e <_printf_float+0x44a>
 8002d48:	68e0      	ldr	r0, [r4, #12]
 8002d4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002d4c:	4298      	cmp	r0, r3
 8002d4e:	bfb8      	it	lt
 8002d50:	4618      	movlt	r0, r3
 8002d52:	e734      	b.n	8002bbe <_printf_float+0xba>
 8002d54:	2301      	movs	r3, #1
 8002d56:	4652      	mov	r2, sl
 8002d58:	4631      	mov	r1, r6
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	47b8      	blx	r7
 8002d5e:	3001      	adds	r0, #1
 8002d60:	f43f af2b 	beq.w	8002bba <_printf_float+0xb6>
 8002d64:	f109 0901 	add.w	r9, r9, #1
 8002d68:	e7e8      	b.n	8002d3c <_printf_float+0x238>
 8002d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	dc39      	bgt.n	8002de4 <_printf_float+0x2e0>
 8002d70:	4a1b      	ldr	r2, [pc, #108]	@ (8002de0 <_printf_float+0x2dc>)
 8002d72:	2301      	movs	r3, #1
 8002d74:	4631      	mov	r1, r6
 8002d76:	4628      	mov	r0, r5
 8002d78:	47b8      	blx	r7
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	f43f af1d 	beq.w	8002bba <_printf_float+0xb6>
 8002d80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002d84:	ea59 0303 	orrs.w	r3, r9, r3
 8002d88:	d102      	bne.n	8002d90 <_printf_float+0x28c>
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	07d9      	lsls	r1, r3, #31
 8002d8e:	d5d7      	bpl.n	8002d40 <_printf_float+0x23c>
 8002d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002d94:	4631      	mov	r1, r6
 8002d96:	4628      	mov	r0, r5
 8002d98:	47b8      	blx	r7
 8002d9a:	3001      	adds	r0, #1
 8002d9c:	f43f af0d 	beq.w	8002bba <_printf_float+0xb6>
 8002da0:	f04f 0a00 	mov.w	sl, #0
 8002da4:	f104 0b1a 	add.w	fp, r4, #26
 8002da8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002daa:	425b      	negs	r3, r3
 8002dac:	4553      	cmp	r3, sl
 8002dae:	dc01      	bgt.n	8002db4 <_printf_float+0x2b0>
 8002db0:	464b      	mov	r3, r9
 8002db2:	e793      	b.n	8002cdc <_printf_float+0x1d8>
 8002db4:	2301      	movs	r3, #1
 8002db6:	465a      	mov	r2, fp
 8002db8:	4631      	mov	r1, r6
 8002dba:	4628      	mov	r0, r5
 8002dbc:	47b8      	blx	r7
 8002dbe:	3001      	adds	r0, #1
 8002dc0:	f43f aefb 	beq.w	8002bba <_printf_float+0xb6>
 8002dc4:	f10a 0a01 	add.w	sl, sl, #1
 8002dc8:	e7ee      	b.n	8002da8 <_printf_float+0x2a4>
 8002dca:	bf00      	nop
 8002dcc:	7fefffff 	.word	0x7fefffff
 8002dd0:	080052f0 	.word	0x080052f0
 8002dd4:	080052f4 	.word	0x080052f4
 8002dd8:	080052f8 	.word	0x080052f8
 8002ddc:	080052fc 	.word	0x080052fc
 8002de0:	08005300 	.word	0x08005300
 8002de4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002de6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002dea:	4553      	cmp	r3, sl
 8002dec:	bfa8      	it	ge
 8002dee:	4653      	movge	r3, sl
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	4699      	mov	r9, r3
 8002df4:	dc36      	bgt.n	8002e64 <_printf_float+0x360>
 8002df6:	f04f 0b00 	mov.w	fp, #0
 8002dfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002dfe:	f104 021a 	add.w	r2, r4, #26
 8002e02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e04:	9306      	str	r3, [sp, #24]
 8002e06:	eba3 0309 	sub.w	r3, r3, r9
 8002e0a:	455b      	cmp	r3, fp
 8002e0c:	dc31      	bgt.n	8002e72 <_printf_float+0x36e>
 8002e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e10:	459a      	cmp	sl, r3
 8002e12:	dc3a      	bgt.n	8002e8a <_printf_float+0x386>
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	07da      	lsls	r2, r3, #31
 8002e18:	d437      	bmi.n	8002e8a <_printf_float+0x386>
 8002e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e1c:	ebaa 0903 	sub.w	r9, sl, r3
 8002e20:	9b06      	ldr	r3, [sp, #24]
 8002e22:	ebaa 0303 	sub.w	r3, sl, r3
 8002e26:	4599      	cmp	r9, r3
 8002e28:	bfa8      	it	ge
 8002e2a:	4699      	movge	r9, r3
 8002e2c:	f1b9 0f00 	cmp.w	r9, #0
 8002e30:	dc33      	bgt.n	8002e9a <_printf_float+0x396>
 8002e32:	f04f 0800 	mov.w	r8, #0
 8002e36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e3a:	f104 0b1a 	add.w	fp, r4, #26
 8002e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e40:	ebaa 0303 	sub.w	r3, sl, r3
 8002e44:	eba3 0309 	sub.w	r3, r3, r9
 8002e48:	4543      	cmp	r3, r8
 8002e4a:	f77f af79 	ble.w	8002d40 <_printf_float+0x23c>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	465a      	mov	r2, fp
 8002e52:	4631      	mov	r1, r6
 8002e54:	4628      	mov	r0, r5
 8002e56:	47b8      	blx	r7
 8002e58:	3001      	adds	r0, #1
 8002e5a:	f43f aeae 	beq.w	8002bba <_printf_float+0xb6>
 8002e5e:	f108 0801 	add.w	r8, r8, #1
 8002e62:	e7ec      	b.n	8002e3e <_printf_float+0x33a>
 8002e64:	4642      	mov	r2, r8
 8002e66:	4631      	mov	r1, r6
 8002e68:	4628      	mov	r0, r5
 8002e6a:	47b8      	blx	r7
 8002e6c:	3001      	adds	r0, #1
 8002e6e:	d1c2      	bne.n	8002df6 <_printf_float+0x2f2>
 8002e70:	e6a3      	b.n	8002bba <_printf_float+0xb6>
 8002e72:	2301      	movs	r3, #1
 8002e74:	4631      	mov	r1, r6
 8002e76:	4628      	mov	r0, r5
 8002e78:	9206      	str	r2, [sp, #24]
 8002e7a:	47b8      	blx	r7
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	f43f ae9c 	beq.w	8002bba <_printf_float+0xb6>
 8002e82:	9a06      	ldr	r2, [sp, #24]
 8002e84:	f10b 0b01 	add.w	fp, fp, #1
 8002e88:	e7bb      	b.n	8002e02 <_printf_float+0x2fe>
 8002e8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002e8e:	4631      	mov	r1, r6
 8002e90:	4628      	mov	r0, r5
 8002e92:	47b8      	blx	r7
 8002e94:	3001      	adds	r0, #1
 8002e96:	d1c0      	bne.n	8002e1a <_printf_float+0x316>
 8002e98:	e68f      	b.n	8002bba <_printf_float+0xb6>
 8002e9a:	9a06      	ldr	r2, [sp, #24]
 8002e9c:	464b      	mov	r3, r9
 8002e9e:	4442      	add	r2, r8
 8002ea0:	4631      	mov	r1, r6
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	47b8      	blx	r7
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	d1c3      	bne.n	8002e32 <_printf_float+0x32e>
 8002eaa:	e686      	b.n	8002bba <_printf_float+0xb6>
 8002eac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002eb0:	f1ba 0f01 	cmp.w	sl, #1
 8002eb4:	dc01      	bgt.n	8002eba <_printf_float+0x3b6>
 8002eb6:	07db      	lsls	r3, r3, #31
 8002eb8:	d536      	bpl.n	8002f28 <_printf_float+0x424>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	4642      	mov	r2, r8
 8002ebe:	4631      	mov	r1, r6
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	47b8      	blx	r7
 8002ec4:	3001      	adds	r0, #1
 8002ec6:	f43f ae78 	beq.w	8002bba <_printf_float+0xb6>
 8002eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ece:	4631      	mov	r1, r6
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	47b8      	blx	r7
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	f43f ae70 	beq.w	8002bba <_printf_float+0xb6>
 8002eda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002ee6:	f7fd fe17 	bl	8000b18 <__aeabi_dcmpeq>
 8002eea:	b9c0      	cbnz	r0, 8002f1e <_printf_float+0x41a>
 8002eec:	4653      	mov	r3, sl
 8002eee:	f108 0201 	add.w	r2, r8, #1
 8002ef2:	4631      	mov	r1, r6
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	47b8      	blx	r7
 8002ef8:	3001      	adds	r0, #1
 8002efa:	d10c      	bne.n	8002f16 <_printf_float+0x412>
 8002efc:	e65d      	b.n	8002bba <_printf_float+0xb6>
 8002efe:	2301      	movs	r3, #1
 8002f00:	465a      	mov	r2, fp
 8002f02:	4631      	mov	r1, r6
 8002f04:	4628      	mov	r0, r5
 8002f06:	47b8      	blx	r7
 8002f08:	3001      	adds	r0, #1
 8002f0a:	f43f ae56 	beq.w	8002bba <_printf_float+0xb6>
 8002f0e:	f108 0801 	add.w	r8, r8, #1
 8002f12:	45d0      	cmp	r8, sl
 8002f14:	dbf3      	blt.n	8002efe <_printf_float+0x3fa>
 8002f16:	464b      	mov	r3, r9
 8002f18:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002f1c:	e6df      	b.n	8002cde <_printf_float+0x1da>
 8002f1e:	f04f 0800 	mov.w	r8, #0
 8002f22:	f104 0b1a 	add.w	fp, r4, #26
 8002f26:	e7f4      	b.n	8002f12 <_printf_float+0x40e>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	4642      	mov	r2, r8
 8002f2c:	e7e1      	b.n	8002ef2 <_printf_float+0x3ee>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	464a      	mov	r2, r9
 8002f32:	4631      	mov	r1, r6
 8002f34:	4628      	mov	r0, r5
 8002f36:	47b8      	blx	r7
 8002f38:	3001      	adds	r0, #1
 8002f3a:	f43f ae3e 	beq.w	8002bba <_printf_float+0xb6>
 8002f3e:	f108 0801 	add.w	r8, r8, #1
 8002f42:	68e3      	ldr	r3, [r4, #12]
 8002f44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002f46:	1a5b      	subs	r3, r3, r1
 8002f48:	4543      	cmp	r3, r8
 8002f4a:	dcf0      	bgt.n	8002f2e <_printf_float+0x42a>
 8002f4c:	e6fc      	b.n	8002d48 <_printf_float+0x244>
 8002f4e:	f04f 0800 	mov.w	r8, #0
 8002f52:	f104 0919 	add.w	r9, r4, #25
 8002f56:	e7f4      	b.n	8002f42 <_printf_float+0x43e>

08002f58 <_printf_common>:
 8002f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f5c:	4616      	mov	r6, r2
 8002f5e:	4698      	mov	r8, r3
 8002f60:	688a      	ldr	r2, [r1, #8]
 8002f62:	690b      	ldr	r3, [r1, #16]
 8002f64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	bfb8      	it	lt
 8002f6c:	4613      	movlt	r3, r2
 8002f6e:	6033      	str	r3, [r6, #0]
 8002f70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f74:	4607      	mov	r7, r0
 8002f76:	460c      	mov	r4, r1
 8002f78:	b10a      	cbz	r2, 8002f7e <_printf_common+0x26>
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	6033      	str	r3, [r6, #0]
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	0699      	lsls	r1, r3, #26
 8002f82:	bf42      	ittt	mi
 8002f84:	6833      	ldrmi	r3, [r6, #0]
 8002f86:	3302      	addmi	r3, #2
 8002f88:	6033      	strmi	r3, [r6, #0]
 8002f8a:	6825      	ldr	r5, [r4, #0]
 8002f8c:	f015 0506 	ands.w	r5, r5, #6
 8002f90:	d106      	bne.n	8002fa0 <_printf_common+0x48>
 8002f92:	f104 0a19 	add.w	sl, r4, #25
 8002f96:	68e3      	ldr	r3, [r4, #12]
 8002f98:	6832      	ldr	r2, [r6, #0]
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	42ab      	cmp	r3, r5
 8002f9e:	dc26      	bgt.n	8002fee <_printf_common+0x96>
 8002fa0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002fa4:	6822      	ldr	r2, [r4, #0]
 8002fa6:	3b00      	subs	r3, #0
 8002fa8:	bf18      	it	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	0692      	lsls	r2, r2, #26
 8002fae:	d42b      	bmi.n	8003008 <_printf_common+0xb0>
 8002fb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	4638      	mov	r0, r7
 8002fb8:	47c8      	blx	r9
 8002fba:	3001      	adds	r0, #1
 8002fbc:	d01e      	beq.n	8002ffc <_printf_common+0xa4>
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	6922      	ldr	r2, [r4, #16]
 8002fc2:	f003 0306 	and.w	r3, r3, #6
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	bf02      	ittt	eq
 8002fca:	68e5      	ldreq	r5, [r4, #12]
 8002fcc:	6833      	ldreq	r3, [r6, #0]
 8002fce:	1aed      	subeq	r5, r5, r3
 8002fd0:	68a3      	ldr	r3, [r4, #8]
 8002fd2:	bf0c      	ite	eq
 8002fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fd8:	2500      	movne	r5, #0
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	bfc4      	itt	gt
 8002fde:	1a9b      	subgt	r3, r3, r2
 8002fe0:	18ed      	addgt	r5, r5, r3
 8002fe2:	2600      	movs	r6, #0
 8002fe4:	341a      	adds	r4, #26
 8002fe6:	42b5      	cmp	r5, r6
 8002fe8:	d11a      	bne.n	8003020 <_printf_common+0xc8>
 8002fea:	2000      	movs	r0, #0
 8002fec:	e008      	b.n	8003000 <_printf_common+0xa8>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	4652      	mov	r2, sl
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	4638      	mov	r0, r7
 8002ff6:	47c8      	blx	r9
 8002ff8:	3001      	adds	r0, #1
 8002ffa:	d103      	bne.n	8003004 <_printf_common+0xac>
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8003000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003004:	3501      	adds	r5, #1
 8003006:	e7c6      	b.n	8002f96 <_printf_common+0x3e>
 8003008:	18e1      	adds	r1, r4, r3
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	2030      	movs	r0, #48	@ 0x30
 800300e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003012:	4422      	add	r2, r4
 8003014:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003018:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800301c:	3302      	adds	r3, #2
 800301e:	e7c7      	b.n	8002fb0 <_printf_common+0x58>
 8003020:	2301      	movs	r3, #1
 8003022:	4622      	mov	r2, r4
 8003024:	4641      	mov	r1, r8
 8003026:	4638      	mov	r0, r7
 8003028:	47c8      	blx	r9
 800302a:	3001      	adds	r0, #1
 800302c:	d0e6      	beq.n	8002ffc <_printf_common+0xa4>
 800302e:	3601      	adds	r6, #1
 8003030:	e7d9      	b.n	8002fe6 <_printf_common+0x8e>
	...

08003034 <_printf_i>:
 8003034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003038:	7e0f      	ldrb	r7, [r1, #24]
 800303a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800303c:	2f78      	cmp	r7, #120	@ 0x78
 800303e:	4691      	mov	r9, r2
 8003040:	4680      	mov	r8, r0
 8003042:	460c      	mov	r4, r1
 8003044:	469a      	mov	sl, r3
 8003046:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800304a:	d807      	bhi.n	800305c <_printf_i+0x28>
 800304c:	2f62      	cmp	r7, #98	@ 0x62
 800304e:	d80a      	bhi.n	8003066 <_printf_i+0x32>
 8003050:	2f00      	cmp	r7, #0
 8003052:	f000 80d2 	beq.w	80031fa <_printf_i+0x1c6>
 8003056:	2f58      	cmp	r7, #88	@ 0x58
 8003058:	f000 80b9 	beq.w	80031ce <_printf_i+0x19a>
 800305c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003060:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003064:	e03a      	b.n	80030dc <_printf_i+0xa8>
 8003066:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800306a:	2b15      	cmp	r3, #21
 800306c:	d8f6      	bhi.n	800305c <_printf_i+0x28>
 800306e:	a101      	add	r1, pc, #4	@ (adr r1, 8003074 <_printf_i+0x40>)
 8003070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003074:	080030cd 	.word	0x080030cd
 8003078:	080030e1 	.word	0x080030e1
 800307c:	0800305d 	.word	0x0800305d
 8003080:	0800305d 	.word	0x0800305d
 8003084:	0800305d 	.word	0x0800305d
 8003088:	0800305d 	.word	0x0800305d
 800308c:	080030e1 	.word	0x080030e1
 8003090:	0800305d 	.word	0x0800305d
 8003094:	0800305d 	.word	0x0800305d
 8003098:	0800305d 	.word	0x0800305d
 800309c:	0800305d 	.word	0x0800305d
 80030a0:	080031e1 	.word	0x080031e1
 80030a4:	0800310b 	.word	0x0800310b
 80030a8:	0800319b 	.word	0x0800319b
 80030ac:	0800305d 	.word	0x0800305d
 80030b0:	0800305d 	.word	0x0800305d
 80030b4:	08003203 	.word	0x08003203
 80030b8:	0800305d 	.word	0x0800305d
 80030bc:	0800310b 	.word	0x0800310b
 80030c0:	0800305d 	.word	0x0800305d
 80030c4:	0800305d 	.word	0x0800305d
 80030c8:	080031a3 	.word	0x080031a3
 80030cc:	6833      	ldr	r3, [r6, #0]
 80030ce:	1d1a      	adds	r2, r3, #4
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6032      	str	r2, [r6, #0]
 80030d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80030dc:	2301      	movs	r3, #1
 80030de:	e09d      	b.n	800321c <_printf_i+0x1e8>
 80030e0:	6833      	ldr	r3, [r6, #0]
 80030e2:	6820      	ldr	r0, [r4, #0]
 80030e4:	1d19      	adds	r1, r3, #4
 80030e6:	6031      	str	r1, [r6, #0]
 80030e8:	0606      	lsls	r6, r0, #24
 80030ea:	d501      	bpl.n	80030f0 <_printf_i+0xbc>
 80030ec:	681d      	ldr	r5, [r3, #0]
 80030ee:	e003      	b.n	80030f8 <_printf_i+0xc4>
 80030f0:	0645      	lsls	r5, r0, #25
 80030f2:	d5fb      	bpl.n	80030ec <_printf_i+0xb8>
 80030f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80030f8:	2d00      	cmp	r5, #0
 80030fa:	da03      	bge.n	8003104 <_printf_i+0xd0>
 80030fc:	232d      	movs	r3, #45	@ 0x2d
 80030fe:	426d      	negs	r5, r5
 8003100:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003104:	4859      	ldr	r0, [pc, #356]	@ (800326c <_printf_i+0x238>)
 8003106:	230a      	movs	r3, #10
 8003108:	e011      	b.n	800312e <_printf_i+0xfa>
 800310a:	6821      	ldr	r1, [r4, #0]
 800310c:	6833      	ldr	r3, [r6, #0]
 800310e:	0608      	lsls	r0, r1, #24
 8003110:	f853 5b04 	ldr.w	r5, [r3], #4
 8003114:	d402      	bmi.n	800311c <_printf_i+0xe8>
 8003116:	0649      	lsls	r1, r1, #25
 8003118:	bf48      	it	mi
 800311a:	b2ad      	uxthmi	r5, r5
 800311c:	2f6f      	cmp	r7, #111	@ 0x6f
 800311e:	4853      	ldr	r0, [pc, #332]	@ (800326c <_printf_i+0x238>)
 8003120:	6033      	str	r3, [r6, #0]
 8003122:	bf14      	ite	ne
 8003124:	230a      	movne	r3, #10
 8003126:	2308      	moveq	r3, #8
 8003128:	2100      	movs	r1, #0
 800312a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800312e:	6866      	ldr	r6, [r4, #4]
 8003130:	60a6      	str	r6, [r4, #8]
 8003132:	2e00      	cmp	r6, #0
 8003134:	bfa2      	ittt	ge
 8003136:	6821      	ldrge	r1, [r4, #0]
 8003138:	f021 0104 	bicge.w	r1, r1, #4
 800313c:	6021      	strge	r1, [r4, #0]
 800313e:	b90d      	cbnz	r5, 8003144 <_printf_i+0x110>
 8003140:	2e00      	cmp	r6, #0
 8003142:	d04b      	beq.n	80031dc <_printf_i+0x1a8>
 8003144:	4616      	mov	r6, r2
 8003146:	fbb5 f1f3 	udiv	r1, r5, r3
 800314a:	fb03 5711 	mls	r7, r3, r1, r5
 800314e:	5dc7      	ldrb	r7, [r0, r7]
 8003150:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003154:	462f      	mov	r7, r5
 8003156:	42bb      	cmp	r3, r7
 8003158:	460d      	mov	r5, r1
 800315a:	d9f4      	bls.n	8003146 <_printf_i+0x112>
 800315c:	2b08      	cmp	r3, #8
 800315e:	d10b      	bne.n	8003178 <_printf_i+0x144>
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	07df      	lsls	r7, r3, #31
 8003164:	d508      	bpl.n	8003178 <_printf_i+0x144>
 8003166:	6923      	ldr	r3, [r4, #16]
 8003168:	6861      	ldr	r1, [r4, #4]
 800316a:	4299      	cmp	r1, r3
 800316c:	bfde      	ittt	le
 800316e:	2330      	movle	r3, #48	@ 0x30
 8003170:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003174:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003178:	1b92      	subs	r2, r2, r6
 800317a:	6122      	str	r2, [r4, #16]
 800317c:	f8cd a000 	str.w	sl, [sp]
 8003180:	464b      	mov	r3, r9
 8003182:	aa03      	add	r2, sp, #12
 8003184:	4621      	mov	r1, r4
 8003186:	4640      	mov	r0, r8
 8003188:	f7ff fee6 	bl	8002f58 <_printf_common>
 800318c:	3001      	adds	r0, #1
 800318e:	d14a      	bne.n	8003226 <_printf_i+0x1f2>
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	b004      	add	sp, #16
 8003196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	f043 0320 	orr.w	r3, r3, #32
 80031a0:	6023      	str	r3, [r4, #0]
 80031a2:	4833      	ldr	r0, [pc, #204]	@ (8003270 <_printf_i+0x23c>)
 80031a4:	2778      	movs	r7, #120	@ 0x78
 80031a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	6831      	ldr	r1, [r6, #0]
 80031ae:	061f      	lsls	r7, r3, #24
 80031b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80031b4:	d402      	bmi.n	80031bc <_printf_i+0x188>
 80031b6:	065f      	lsls	r7, r3, #25
 80031b8:	bf48      	it	mi
 80031ba:	b2ad      	uxthmi	r5, r5
 80031bc:	6031      	str	r1, [r6, #0]
 80031be:	07d9      	lsls	r1, r3, #31
 80031c0:	bf44      	itt	mi
 80031c2:	f043 0320 	orrmi.w	r3, r3, #32
 80031c6:	6023      	strmi	r3, [r4, #0]
 80031c8:	b11d      	cbz	r5, 80031d2 <_printf_i+0x19e>
 80031ca:	2310      	movs	r3, #16
 80031cc:	e7ac      	b.n	8003128 <_printf_i+0xf4>
 80031ce:	4827      	ldr	r0, [pc, #156]	@ (800326c <_printf_i+0x238>)
 80031d0:	e7e9      	b.n	80031a6 <_printf_i+0x172>
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	f023 0320 	bic.w	r3, r3, #32
 80031d8:	6023      	str	r3, [r4, #0]
 80031da:	e7f6      	b.n	80031ca <_printf_i+0x196>
 80031dc:	4616      	mov	r6, r2
 80031de:	e7bd      	b.n	800315c <_printf_i+0x128>
 80031e0:	6833      	ldr	r3, [r6, #0]
 80031e2:	6825      	ldr	r5, [r4, #0]
 80031e4:	6961      	ldr	r1, [r4, #20]
 80031e6:	1d18      	adds	r0, r3, #4
 80031e8:	6030      	str	r0, [r6, #0]
 80031ea:	062e      	lsls	r6, r5, #24
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	d501      	bpl.n	80031f4 <_printf_i+0x1c0>
 80031f0:	6019      	str	r1, [r3, #0]
 80031f2:	e002      	b.n	80031fa <_printf_i+0x1c6>
 80031f4:	0668      	lsls	r0, r5, #25
 80031f6:	d5fb      	bpl.n	80031f0 <_printf_i+0x1bc>
 80031f8:	8019      	strh	r1, [r3, #0]
 80031fa:	2300      	movs	r3, #0
 80031fc:	6123      	str	r3, [r4, #16]
 80031fe:	4616      	mov	r6, r2
 8003200:	e7bc      	b.n	800317c <_printf_i+0x148>
 8003202:	6833      	ldr	r3, [r6, #0]
 8003204:	1d1a      	adds	r2, r3, #4
 8003206:	6032      	str	r2, [r6, #0]
 8003208:	681e      	ldr	r6, [r3, #0]
 800320a:	6862      	ldr	r2, [r4, #4]
 800320c:	2100      	movs	r1, #0
 800320e:	4630      	mov	r0, r6
 8003210:	f7fd f806 	bl	8000220 <memchr>
 8003214:	b108      	cbz	r0, 800321a <_printf_i+0x1e6>
 8003216:	1b80      	subs	r0, r0, r6
 8003218:	6060      	str	r0, [r4, #4]
 800321a:	6863      	ldr	r3, [r4, #4]
 800321c:	6123      	str	r3, [r4, #16]
 800321e:	2300      	movs	r3, #0
 8003220:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003224:	e7aa      	b.n	800317c <_printf_i+0x148>
 8003226:	6923      	ldr	r3, [r4, #16]
 8003228:	4632      	mov	r2, r6
 800322a:	4649      	mov	r1, r9
 800322c:	4640      	mov	r0, r8
 800322e:	47d0      	blx	sl
 8003230:	3001      	adds	r0, #1
 8003232:	d0ad      	beq.n	8003190 <_printf_i+0x15c>
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	079b      	lsls	r3, r3, #30
 8003238:	d413      	bmi.n	8003262 <_printf_i+0x22e>
 800323a:	68e0      	ldr	r0, [r4, #12]
 800323c:	9b03      	ldr	r3, [sp, #12]
 800323e:	4298      	cmp	r0, r3
 8003240:	bfb8      	it	lt
 8003242:	4618      	movlt	r0, r3
 8003244:	e7a6      	b.n	8003194 <_printf_i+0x160>
 8003246:	2301      	movs	r3, #1
 8003248:	4632      	mov	r2, r6
 800324a:	4649      	mov	r1, r9
 800324c:	4640      	mov	r0, r8
 800324e:	47d0      	blx	sl
 8003250:	3001      	adds	r0, #1
 8003252:	d09d      	beq.n	8003190 <_printf_i+0x15c>
 8003254:	3501      	adds	r5, #1
 8003256:	68e3      	ldr	r3, [r4, #12]
 8003258:	9903      	ldr	r1, [sp, #12]
 800325a:	1a5b      	subs	r3, r3, r1
 800325c:	42ab      	cmp	r3, r5
 800325e:	dcf2      	bgt.n	8003246 <_printf_i+0x212>
 8003260:	e7eb      	b.n	800323a <_printf_i+0x206>
 8003262:	2500      	movs	r5, #0
 8003264:	f104 0619 	add.w	r6, r4, #25
 8003268:	e7f5      	b.n	8003256 <_printf_i+0x222>
 800326a:	bf00      	nop
 800326c:	08005302 	.word	0x08005302
 8003270:	08005313 	.word	0x08005313

08003274 <std>:
 8003274:	2300      	movs	r3, #0
 8003276:	b510      	push	{r4, lr}
 8003278:	4604      	mov	r4, r0
 800327a:	e9c0 3300 	strd	r3, r3, [r0]
 800327e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003282:	6083      	str	r3, [r0, #8]
 8003284:	8181      	strh	r1, [r0, #12]
 8003286:	6643      	str	r3, [r0, #100]	@ 0x64
 8003288:	81c2      	strh	r2, [r0, #14]
 800328a:	6183      	str	r3, [r0, #24]
 800328c:	4619      	mov	r1, r3
 800328e:	2208      	movs	r2, #8
 8003290:	305c      	adds	r0, #92	@ 0x5c
 8003292:	f000 f8f4 	bl	800347e <memset>
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <std+0x58>)
 8003298:	6263      	str	r3, [r4, #36]	@ 0x24
 800329a:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <std+0x5c>)
 800329c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800329e:	4b0d      	ldr	r3, [pc, #52]	@ (80032d4 <std+0x60>)
 80032a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80032a2:	4b0d      	ldr	r3, [pc, #52]	@ (80032d8 <std+0x64>)
 80032a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80032a6:	4b0d      	ldr	r3, [pc, #52]	@ (80032dc <std+0x68>)
 80032a8:	6224      	str	r4, [r4, #32]
 80032aa:	429c      	cmp	r4, r3
 80032ac:	d006      	beq.n	80032bc <std+0x48>
 80032ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80032b2:	4294      	cmp	r4, r2
 80032b4:	d002      	beq.n	80032bc <std+0x48>
 80032b6:	33d0      	adds	r3, #208	@ 0xd0
 80032b8:	429c      	cmp	r4, r3
 80032ba:	d105      	bne.n	80032c8 <std+0x54>
 80032bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80032c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032c4:	f000 b958 	b.w	8003578 <__retarget_lock_init_recursive>
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	bf00      	nop
 80032cc:	080033f9 	.word	0x080033f9
 80032d0:	0800341b 	.word	0x0800341b
 80032d4:	08003453 	.word	0x08003453
 80032d8:	08003477 	.word	0x08003477
 80032dc:	20000274 	.word	0x20000274

080032e0 <stdio_exit_handler>:
 80032e0:	4a02      	ldr	r2, [pc, #8]	@ (80032ec <stdio_exit_handler+0xc>)
 80032e2:	4903      	ldr	r1, [pc, #12]	@ (80032f0 <stdio_exit_handler+0x10>)
 80032e4:	4803      	ldr	r0, [pc, #12]	@ (80032f4 <stdio_exit_handler+0x14>)
 80032e6:	f000 b869 	b.w	80033bc <_fwalk_sglue>
 80032ea:	bf00      	nop
 80032ec:	20000008 	.word	0x20000008
 80032f0:	08004c25 	.word	0x08004c25
 80032f4:	20000018 	.word	0x20000018

080032f8 <cleanup_stdio>:
 80032f8:	6841      	ldr	r1, [r0, #4]
 80032fa:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <cleanup_stdio+0x34>)
 80032fc:	4299      	cmp	r1, r3
 80032fe:	b510      	push	{r4, lr}
 8003300:	4604      	mov	r4, r0
 8003302:	d001      	beq.n	8003308 <cleanup_stdio+0x10>
 8003304:	f001 fc8e 	bl	8004c24 <_fflush_r>
 8003308:	68a1      	ldr	r1, [r4, #8]
 800330a:	4b09      	ldr	r3, [pc, #36]	@ (8003330 <cleanup_stdio+0x38>)
 800330c:	4299      	cmp	r1, r3
 800330e:	d002      	beq.n	8003316 <cleanup_stdio+0x1e>
 8003310:	4620      	mov	r0, r4
 8003312:	f001 fc87 	bl	8004c24 <_fflush_r>
 8003316:	68e1      	ldr	r1, [r4, #12]
 8003318:	4b06      	ldr	r3, [pc, #24]	@ (8003334 <cleanup_stdio+0x3c>)
 800331a:	4299      	cmp	r1, r3
 800331c:	d004      	beq.n	8003328 <cleanup_stdio+0x30>
 800331e:	4620      	mov	r0, r4
 8003320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003324:	f001 bc7e 	b.w	8004c24 <_fflush_r>
 8003328:	bd10      	pop	{r4, pc}
 800332a:	bf00      	nop
 800332c:	20000274 	.word	0x20000274
 8003330:	200002dc 	.word	0x200002dc
 8003334:	20000344 	.word	0x20000344

08003338 <global_stdio_init.part.0>:
 8003338:	b510      	push	{r4, lr}
 800333a:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <global_stdio_init.part.0+0x30>)
 800333c:	4c0b      	ldr	r4, [pc, #44]	@ (800336c <global_stdio_init.part.0+0x34>)
 800333e:	4a0c      	ldr	r2, [pc, #48]	@ (8003370 <global_stdio_init.part.0+0x38>)
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	4620      	mov	r0, r4
 8003344:	2200      	movs	r2, #0
 8003346:	2104      	movs	r1, #4
 8003348:	f7ff ff94 	bl	8003274 <std>
 800334c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003350:	2201      	movs	r2, #1
 8003352:	2109      	movs	r1, #9
 8003354:	f7ff ff8e 	bl	8003274 <std>
 8003358:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800335c:	2202      	movs	r2, #2
 800335e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003362:	2112      	movs	r1, #18
 8003364:	f7ff bf86 	b.w	8003274 <std>
 8003368:	200003ac 	.word	0x200003ac
 800336c:	20000274 	.word	0x20000274
 8003370:	080032e1 	.word	0x080032e1

08003374 <__sfp_lock_acquire>:
 8003374:	4801      	ldr	r0, [pc, #4]	@ (800337c <__sfp_lock_acquire+0x8>)
 8003376:	f000 b900 	b.w	800357a <__retarget_lock_acquire_recursive>
 800337a:	bf00      	nop
 800337c:	200003b5 	.word	0x200003b5

08003380 <__sfp_lock_release>:
 8003380:	4801      	ldr	r0, [pc, #4]	@ (8003388 <__sfp_lock_release+0x8>)
 8003382:	f000 b8fb 	b.w	800357c <__retarget_lock_release_recursive>
 8003386:	bf00      	nop
 8003388:	200003b5 	.word	0x200003b5

0800338c <__sinit>:
 800338c:	b510      	push	{r4, lr}
 800338e:	4604      	mov	r4, r0
 8003390:	f7ff fff0 	bl	8003374 <__sfp_lock_acquire>
 8003394:	6a23      	ldr	r3, [r4, #32]
 8003396:	b11b      	cbz	r3, 80033a0 <__sinit+0x14>
 8003398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800339c:	f7ff bff0 	b.w	8003380 <__sfp_lock_release>
 80033a0:	4b04      	ldr	r3, [pc, #16]	@ (80033b4 <__sinit+0x28>)
 80033a2:	6223      	str	r3, [r4, #32]
 80033a4:	4b04      	ldr	r3, [pc, #16]	@ (80033b8 <__sinit+0x2c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f5      	bne.n	8003398 <__sinit+0xc>
 80033ac:	f7ff ffc4 	bl	8003338 <global_stdio_init.part.0>
 80033b0:	e7f2      	b.n	8003398 <__sinit+0xc>
 80033b2:	bf00      	nop
 80033b4:	080032f9 	.word	0x080032f9
 80033b8:	200003ac 	.word	0x200003ac

080033bc <_fwalk_sglue>:
 80033bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033c0:	4607      	mov	r7, r0
 80033c2:	4688      	mov	r8, r1
 80033c4:	4614      	mov	r4, r2
 80033c6:	2600      	movs	r6, #0
 80033c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033cc:	f1b9 0901 	subs.w	r9, r9, #1
 80033d0:	d505      	bpl.n	80033de <_fwalk_sglue+0x22>
 80033d2:	6824      	ldr	r4, [r4, #0]
 80033d4:	2c00      	cmp	r4, #0
 80033d6:	d1f7      	bne.n	80033c8 <_fwalk_sglue+0xc>
 80033d8:	4630      	mov	r0, r6
 80033da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033de:	89ab      	ldrh	r3, [r5, #12]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d907      	bls.n	80033f4 <_fwalk_sglue+0x38>
 80033e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033e8:	3301      	adds	r3, #1
 80033ea:	d003      	beq.n	80033f4 <_fwalk_sglue+0x38>
 80033ec:	4629      	mov	r1, r5
 80033ee:	4638      	mov	r0, r7
 80033f0:	47c0      	blx	r8
 80033f2:	4306      	orrs	r6, r0
 80033f4:	3568      	adds	r5, #104	@ 0x68
 80033f6:	e7e9      	b.n	80033cc <_fwalk_sglue+0x10>

080033f8 <__sread>:
 80033f8:	b510      	push	{r4, lr}
 80033fa:	460c      	mov	r4, r1
 80033fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003400:	f000 f86c 	bl	80034dc <_read_r>
 8003404:	2800      	cmp	r0, #0
 8003406:	bfab      	itete	ge
 8003408:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800340a:	89a3      	ldrhlt	r3, [r4, #12]
 800340c:	181b      	addge	r3, r3, r0
 800340e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003412:	bfac      	ite	ge
 8003414:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003416:	81a3      	strhlt	r3, [r4, #12]
 8003418:	bd10      	pop	{r4, pc}

0800341a <__swrite>:
 800341a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800341e:	461f      	mov	r7, r3
 8003420:	898b      	ldrh	r3, [r1, #12]
 8003422:	05db      	lsls	r3, r3, #23
 8003424:	4605      	mov	r5, r0
 8003426:	460c      	mov	r4, r1
 8003428:	4616      	mov	r6, r2
 800342a:	d505      	bpl.n	8003438 <__swrite+0x1e>
 800342c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003430:	2302      	movs	r3, #2
 8003432:	2200      	movs	r2, #0
 8003434:	f000 f840 	bl	80034b8 <_lseek_r>
 8003438:	89a3      	ldrh	r3, [r4, #12]
 800343a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800343e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003442:	81a3      	strh	r3, [r4, #12]
 8003444:	4632      	mov	r2, r6
 8003446:	463b      	mov	r3, r7
 8003448:	4628      	mov	r0, r5
 800344a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800344e:	f000 b857 	b.w	8003500 <_write_r>

08003452 <__sseek>:
 8003452:	b510      	push	{r4, lr}
 8003454:	460c      	mov	r4, r1
 8003456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800345a:	f000 f82d 	bl	80034b8 <_lseek_r>
 800345e:	1c43      	adds	r3, r0, #1
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	bf15      	itete	ne
 8003464:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003466:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800346a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800346e:	81a3      	strheq	r3, [r4, #12]
 8003470:	bf18      	it	ne
 8003472:	81a3      	strhne	r3, [r4, #12]
 8003474:	bd10      	pop	{r4, pc}

08003476 <__sclose>:
 8003476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800347a:	f000 b80d 	b.w	8003498 <_close_r>

0800347e <memset>:
 800347e:	4402      	add	r2, r0
 8003480:	4603      	mov	r3, r0
 8003482:	4293      	cmp	r3, r2
 8003484:	d100      	bne.n	8003488 <memset+0xa>
 8003486:	4770      	bx	lr
 8003488:	f803 1b01 	strb.w	r1, [r3], #1
 800348c:	e7f9      	b.n	8003482 <memset+0x4>
	...

08003490 <_localeconv_r>:
 8003490:	4800      	ldr	r0, [pc, #0]	@ (8003494 <_localeconv_r+0x4>)
 8003492:	4770      	bx	lr
 8003494:	20000154 	.word	0x20000154

08003498 <_close_r>:
 8003498:	b538      	push	{r3, r4, r5, lr}
 800349a:	4d06      	ldr	r5, [pc, #24]	@ (80034b4 <_close_r+0x1c>)
 800349c:	2300      	movs	r3, #0
 800349e:	4604      	mov	r4, r0
 80034a0:	4608      	mov	r0, r1
 80034a2:	602b      	str	r3, [r5, #0]
 80034a4:	f7fd fd7c 	bl	8000fa0 <_close>
 80034a8:	1c43      	adds	r3, r0, #1
 80034aa:	d102      	bne.n	80034b2 <_close_r+0x1a>
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	b103      	cbz	r3, 80034b2 <_close_r+0x1a>
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
 80034b4:	200003b0 	.word	0x200003b0

080034b8 <_lseek_r>:
 80034b8:	b538      	push	{r3, r4, r5, lr}
 80034ba:	4d07      	ldr	r5, [pc, #28]	@ (80034d8 <_lseek_r+0x20>)
 80034bc:	4604      	mov	r4, r0
 80034be:	4608      	mov	r0, r1
 80034c0:	4611      	mov	r1, r2
 80034c2:	2200      	movs	r2, #0
 80034c4:	602a      	str	r2, [r5, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	f7fd fd91 	bl	8000fee <_lseek>
 80034cc:	1c43      	adds	r3, r0, #1
 80034ce:	d102      	bne.n	80034d6 <_lseek_r+0x1e>
 80034d0:	682b      	ldr	r3, [r5, #0]
 80034d2:	b103      	cbz	r3, 80034d6 <_lseek_r+0x1e>
 80034d4:	6023      	str	r3, [r4, #0]
 80034d6:	bd38      	pop	{r3, r4, r5, pc}
 80034d8:	200003b0 	.word	0x200003b0

080034dc <_read_r>:
 80034dc:	b538      	push	{r3, r4, r5, lr}
 80034de:	4d07      	ldr	r5, [pc, #28]	@ (80034fc <_read_r+0x20>)
 80034e0:	4604      	mov	r4, r0
 80034e2:	4608      	mov	r0, r1
 80034e4:	4611      	mov	r1, r2
 80034e6:	2200      	movs	r2, #0
 80034e8:	602a      	str	r2, [r5, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	f7fd fd1f 	bl	8000f2e <_read>
 80034f0:	1c43      	adds	r3, r0, #1
 80034f2:	d102      	bne.n	80034fa <_read_r+0x1e>
 80034f4:	682b      	ldr	r3, [r5, #0]
 80034f6:	b103      	cbz	r3, 80034fa <_read_r+0x1e>
 80034f8:	6023      	str	r3, [r4, #0]
 80034fa:	bd38      	pop	{r3, r4, r5, pc}
 80034fc:	200003b0 	.word	0x200003b0

08003500 <_write_r>:
 8003500:	b538      	push	{r3, r4, r5, lr}
 8003502:	4d07      	ldr	r5, [pc, #28]	@ (8003520 <_write_r+0x20>)
 8003504:	4604      	mov	r4, r0
 8003506:	4608      	mov	r0, r1
 8003508:	4611      	mov	r1, r2
 800350a:	2200      	movs	r2, #0
 800350c:	602a      	str	r2, [r5, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	f7fd fd2a 	bl	8000f68 <_write>
 8003514:	1c43      	adds	r3, r0, #1
 8003516:	d102      	bne.n	800351e <_write_r+0x1e>
 8003518:	682b      	ldr	r3, [r5, #0]
 800351a:	b103      	cbz	r3, 800351e <_write_r+0x1e>
 800351c:	6023      	str	r3, [r4, #0]
 800351e:	bd38      	pop	{r3, r4, r5, pc}
 8003520:	200003b0 	.word	0x200003b0

08003524 <__errno>:
 8003524:	4b01      	ldr	r3, [pc, #4]	@ (800352c <__errno+0x8>)
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20000014 	.word	0x20000014

08003530 <__libc_init_array>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	4d0d      	ldr	r5, [pc, #52]	@ (8003568 <__libc_init_array+0x38>)
 8003534:	4c0d      	ldr	r4, [pc, #52]	@ (800356c <__libc_init_array+0x3c>)
 8003536:	1b64      	subs	r4, r4, r5
 8003538:	10a4      	asrs	r4, r4, #2
 800353a:	2600      	movs	r6, #0
 800353c:	42a6      	cmp	r6, r4
 800353e:	d109      	bne.n	8003554 <__libc_init_array+0x24>
 8003540:	4d0b      	ldr	r5, [pc, #44]	@ (8003570 <__libc_init_array+0x40>)
 8003542:	4c0c      	ldr	r4, [pc, #48]	@ (8003574 <__libc_init_array+0x44>)
 8003544:	f001 febc 	bl	80052c0 <_init>
 8003548:	1b64      	subs	r4, r4, r5
 800354a:	10a4      	asrs	r4, r4, #2
 800354c:	2600      	movs	r6, #0
 800354e:	42a6      	cmp	r6, r4
 8003550:	d105      	bne.n	800355e <__libc_init_array+0x2e>
 8003552:	bd70      	pop	{r4, r5, r6, pc}
 8003554:	f855 3b04 	ldr.w	r3, [r5], #4
 8003558:	4798      	blx	r3
 800355a:	3601      	adds	r6, #1
 800355c:	e7ee      	b.n	800353c <__libc_init_array+0xc>
 800355e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003562:	4798      	blx	r3
 8003564:	3601      	adds	r6, #1
 8003566:	e7f2      	b.n	800354e <__libc_init_array+0x1e>
 8003568:	08005668 	.word	0x08005668
 800356c:	08005668 	.word	0x08005668
 8003570:	08005668 	.word	0x08005668
 8003574:	0800566c 	.word	0x0800566c

08003578 <__retarget_lock_init_recursive>:
 8003578:	4770      	bx	lr

0800357a <__retarget_lock_acquire_recursive>:
 800357a:	4770      	bx	lr

0800357c <__retarget_lock_release_recursive>:
 800357c:	4770      	bx	lr

0800357e <quorem>:
 800357e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003582:	6903      	ldr	r3, [r0, #16]
 8003584:	690c      	ldr	r4, [r1, #16]
 8003586:	42a3      	cmp	r3, r4
 8003588:	4607      	mov	r7, r0
 800358a:	db7e      	blt.n	800368a <quorem+0x10c>
 800358c:	3c01      	subs	r4, #1
 800358e:	f101 0814 	add.w	r8, r1, #20
 8003592:	00a3      	lsls	r3, r4, #2
 8003594:	f100 0514 	add.w	r5, r0, #20
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80035a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80035a8:	3301      	adds	r3, #1
 80035aa:	429a      	cmp	r2, r3
 80035ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80035b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80035b4:	d32e      	bcc.n	8003614 <quorem+0x96>
 80035b6:	f04f 0a00 	mov.w	sl, #0
 80035ba:	46c4      	mov	ip, r8
 80035bc:	46ae      	mov	lr, r5
 80035be:	46d3      	mov	fp, sl
 80035c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80035c4:	b298      	uxth	r0, r3
 80035c6:	fb06 a000 	mla	r0, r6, r0, sl
 80035ca:	0c02      	lsrs	r2, r0, #16
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	fb06 2303 	mla	r3, r6, r3, r2
 80035d2:	f8de 2000 	ldr.w	r2, [lr]
 80035d6:	b280      	uxth	r0, r0
 80035d8:	b292      	uxth	r2, r2
 80035da:	1a12      	subs	r2, r2, r0
 80035dc:	445a      	add	r2, fp
 80035de:	f8de 0000 	ldr.w	r0, [lr]
 80035e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80035ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80035f0:	b292      	uxth	r2, r2
 80035f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80035f6:	45e1      	cmp	r9, ip
 80035f8:	f84e 2b04 	str.w	r2, [lr], #4
 80035fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003600:	d2de      	bcs.n	80035c0 <quorem+0x42>
 8003602:	9b00      	ldr	r3, [sp, #0]
 8003604:	58eb      	ldr	r3, [r5, r3]
 8003606:	b92b      	cbnz	r3, 8003614 <quorem+0x96>
 8003608:	9b01      	ldr	r3, [sp, #4]
 800360a:	3b04      	subs	r3, #4
 800360c:	429d      	cmp	r5, r3
 800360e:	461a      	mov	r2, r3
 8003610:	d32f      	bcc.n	8003672 <quorem+0xf4>
 8003612:	613c      	str	r4, [r7, #16]
 8003614:	4638      	mov	r0, r7
 8003616:	f001 f979 	bl	800490c <__mcmp>
 800361a:	2800      	cmp	r0, #0
 800361c:	db25      	blt.n	800366a <quorem+0xec>
 800361e:	4629      	mov	r1, r5
 8003620:	2000      	movs	r0, #0
 8003622:	f858 2b04 	ldr.w	r2, [r8], #4
 8003626:	f8d1 c000 	ldr.w	ip, [r1]
 800362a:	fa1f fe82 	uxth.w	lr, r2
 800362e:	fa1f f38c 	uxth.w	r3, ip
 8003632:	eba3 030e 	sub.w	r3, r3, lr
 8003636:	4403      	add	r3, r0
 8003638:	0c12      	lsrs	r2, r2, #16
 800363a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800363e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003642:	b29b      	uxth	r3, r3
 8003644:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003648:	45c1      	cmp	r9, r8
 800364a:	f841 3b04 	str.w	r3, [r1], #4
 800364e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003652:	d2e6      	bcs.n	8003622 <quorem+0xa4>
 8003654:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003658:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800365c:	b922      	cbnz	r2, 8003668 <quorem+0xea>
 800365e:	3b04      	subs	r3, #4
 8003660:	429d      	cmp	r5, r3
 8003662:	461a      	mov	r2, r3
 8003664:	d30b      	bcc.n	800367e <quorem+0x100>
 8003666:	613c      	str	r4, [r7, #16]
 8003668:	3601      	adds	r6, #1
 800366a:	4630      	mov	r0, r6
 800366c:	b003      	add	sp, #12
 800366e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	3b04      	subs	r3, #4
 8003676:	2a00      	cmp	r2, #0
 8003678:	d1cb      	bne.n	8003612 <quorem+0x94>
 800367a:	3c01      	subs	r4, #1
 800367c:	e7c6      	b.n	800360c <quorem+0x8e>
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	3b04      	subs	r3, #4
 8003682:	2a00      	cmp	r2, #0
 8003684:	d1ef      	bne.n	8003666 <quorem+0xe8>
 8003686:	3c01      	subs	r4, #1
 8003688:	e7ea      	b.n	8003660 <quorem+0xe2>
 800368a:	2000      	movs	r0, #0
 800368c:	e7ee      	b.n	800366c <quorem+0xee>
	...

08003690 <_dtoa_r>:
 8003690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003694:	69c7      	ldr	r7, [r0, #28]
 8003696:	b099      	sub	sp, #100	@ 0x64
 8003698:	ed8d 0b02 	vstr	d0, [sp, #8]
 800369c:	ec55 4b10 	vmov	r4, r5, d0
 80036a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80036a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80036a4:	4683      	mov	fp, r0
 80036a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80036a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80036aa:	b97f      	cbnz	r7, 80036cc <_dtoa_r+0x3c>
 80036ac:	2010      	movs	r0, #16
 80036ae:	f000 fdfd 	bl	80042ac <malloc>
 80036b2:	4602      	mov	r2, r0
 80036b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80036b8:	b920      	cbnz	r0, 80036c4 <_dtoa_r+0x34>
 80036ba:	4ba7      	ldr	r3, [pc, #668]	@ (8003958 <_dtoa_r+0x2c8>)
 80036bc:	21ef      	movs	r1, #239	@ 0xef
 80036be:	48a7      	ldr	r0, [pc, #668]	@ (800395c <_dtoa_r+0x2cc>)
 80036c0:	f001 faf6 	bl	8004cb0 <__assert_func>
 80036c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80036c8:	6007      	str	r7, [r0, #0]
 80036ca:	60c7      	str	r7, [r0, #12]
 80036cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	b159      	cbz	r1, 80036ec <_dtoa_r+0x5c>
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	604a      	str	r2, [r1, #4]
 80036d8:	2301      	movs	r3, #1
 80036da:	4093      	lsls	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
 80036de:	4658      	mov	r0, fp
 80036e0:	f000 feda 	bl	8004498 <_Bfree>
 80036e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	1e2b      	subs	r3, r5, #0
 80036ee:	bfb9      	ittee	lt
 80036f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80036f4:	9303      	strlt	r3, [sp, #12]
 80036f6:	2300      	movge	r3, #0
 80036f8:	6033      	strge	r3, [r6, #0]
 80036fa:	9f03      	ldr	r7, [sp, #12]
 80036fc:	4b98      	ldr	r3, [pc, #608]	@ (8003960 <_dtoa_r+0x2d0>)
 80036fe:	bfbc      	itt	lt
 8003700:	2201      	movlt	r2, #1
 8003702:	6032      	strlt	r2, [r6, #0]
 8003704:	43bb      	bics	r3, r7
 8003706:	d112      	bne.n	800372e <_dtoa_r+0x9e>
 8003708:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800370a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003714:	4323      	orrs	r3, r4
 8003716:	f000 854d 	beq.w	80041b4 <_dtoa_r+0xb24>
 800371a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800371c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003974 <_dtoa_r+0x2e4>
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 854f 	beq.w	80041c4 <_dtoa_r+0xb34>
 8003726:	f10a 0303 	add.w	r3, sl, #3
 800372a:	f000 bd49 	b.w	80041c0 <_dtoa_r+0xb30>
 800372e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003732:	2200      	movs	r2, #0
 8003734:	ec51 0b17 	vmov	r0, r1, d7
 8003738:	2300      	movs	r3, #0
 800373a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800373e:	f7fd f9eb 	bl	8000b18 <__aeabi_dcmpeq>
 8003742:	4680      	mov	r8, r0
 8003744:	b158      	cbz	r0, 800375e <_dtoa_r+0xce>
 8003746:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003748:	2301      	movs	r3, #1
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800374e:	b113      	cbz	r3, 8003756 <_dtoa_r+0xc6>
 8003750:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003752:	4b84      	ldr	r3, [pc, #528]	@ (8003964 <_dtoa_r+0x2d4>)
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003978 <_dtoa_r+0x2e8>
 800375a:	f000 bd33 	b.w	80041c4 <_dtoa_r+0xb34>
 800375e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003762:	aa16      	add	r2, sp, #88	@ 0x58
 8003764:	a917      	add	r1, sp, #92	@ 0x5c
 8003766:	4658      	mov	r0, fp
 8003768:	f001 f980 	bl	8004a6c <__d2b>
 800376c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003770:	4681      	mov	r9, r0
 8003772:	2e00      	cmp	r6, #0
 8003774:	d077      	beq.n	8003866 <_dtoa_r+0x1d6>
 8003776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003778:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800377c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003784:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003788:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800378c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003790:	4619      	mov	r1, r3
 8003792:	2200      	movs	r2, #0
 8003794:	4b74      	ldr	r3, [pc, #464]	@ (8003968 <_dtoa_r+0x2d8>)
 8003796:	f7fc fd9f 	bl	80002d8 <__aeabi_dsub>
 800379a:	a369      	add	r3, pc, #420	@ (adr r3, 8003940 <_dtoa_r+0x2b0>)
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	f7fc ff52 	bl	8000648 <__aeabi_dmul>
 80037a4:	a368      	add	r3, pc, #416	@ (adr r3, 8003948 <_dtoa_r+0x2b8>)
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f7fc fd97 	bl	80002dc <__adddf3>
 80037ae:	4604      	mov	r4, r0
 80037b0:	4630      	mov	r0, r6
 80037b2:	460d      	mov	r5, r1
 80037b4:	f7fc fede 	bl	8000574 <__aeabi_i2d>
 80037b8:	a365      	add	r3, pc, #404	@ (adr r3, 8003950 <_dtoa_r+0x2c0>)
 80037ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037be:	f7fc ff43 	bl	8000648 <__aeabi_dmul>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4620      	mov	r0, r4
 80037c8:	4629      	mov	r1, r5
 80037ca:	f7fc fd87 	bl	80002dc <__adddf3>
 80037ce:	4604      	mov	r4, r0
 80037d0:	460d      	mov	r5, r1
 80037d2:	f7fd f9e9 	bl	8000ba8 <__aeabi_d2iz>
 80037d6:	2200      	movs	r2, #0
 80037d8:	4607      	mov	r7, r0
 80037da:	2300      	movs	r3, #0
 80037dc:	4620      	mov	r0, r4
 80037de:	4629      	mov	r1, r5
 80037e0:	f7fd f9a4 	bl	8000b2c <__aeabi_dcmplt>
 80037e4:	b140      	cbz	r0, 80037f8 <_dtoa_r+0x168>
 80037e6:	4638      	mov	r0, r7
 80037e8:	f7fc fec4 	bl	8000574 <__aeabi_i2d>
 80037ec:	4622      	mov	r2, r4
 80037ee:	462b      	mov	r3, r5
 80037f0:	f7fd f992 	bl	8000b18 <__aeabi_dcmpeq>
 80037f4:	b900      	cbnz	r0, 80037f8 <_dtoa_r+0x168>
 80037f6:	3f01      	subs	r7, #1
 80037f8:	2f16      	cmp	r7, #22
 80037fa:	d851      	bhi.n	80038a0 <_dtoa_r+0x210>
 80037fc:	4b5b      	ldr	r3, [pc, #364]	@ (800396c <_dtoa_r+0x2dc>)
 80037fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800380a:	f7fd f98f 	bl	8000b2c <__aeabi_dcmplt>
 800380e:	2800      	cmp	r0, #0
 8003810:	d048      	beq.n	80038a4 <_dtoa_r+0x214>
 8003812:	3f01      	subs	r7, #1
 8003814:	2300      	movs	r3, #0
 8003816:	9312      	str	r3, [sp, #72]	@ 0x48
 8003818:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800381a:	1b9b      	subs	r3, r3, r6
 800381c:	1e5a      	subs	r2, r3, #1
 800381e:	bf44      	itt	mi
 8003820:	f1c3 0801 	rsbmi	r8, r3, #1
 8003824:	2300      	movmi	r3, #0
 8003826:	9208      	str	r2, [sp, #32]
 8003828:	bf54      	ite	pl
 800382a:	f04f 0800 	movpl.w	r8, #0
 800382e:	9308      	strmi	r3, [sp, #32]
 8003830:	2f00      	cmp	r7, #0
 8003832:	db39      	blt.n	80038a8 <_dtoa_r+0x218>
 8003834:	9b08      	ldr	r3, [sp, #32]
 8003836:	970f      	str	r7, [sp, #60]	@ 0x3c
 8003838:	443b      	add	r3, r7
 800383a:	9308      	str	r3, [sp, #32]
 800383c:	2300      	movs	r3, #0
 800383e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003842:	2b09      	cmp	r3, #9
 8003844:	d864      	bhi.n	8003910 <_dtoa_r+0x280>
 8003846:	2b05      	cmp	r3, #5
 8003848:	bfc4      	itt	gt
 800384a:	3b04      	subgt	r3, #4
 800384c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800384e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003850:	f1a3 0302 	sub.w	r3, r3, #2
 8003854:	bfcc      	ite	gt
 8003856:	2400      	movgt	r4, #0
 8003858:	2401      	movle	r4, #1
 800385a:	2b03      	cmp	r3, #3
 800385c:	d863      	bhi.n	8003926 <_dtoa_r+0x296>
 800385e:	e8df f003 	tbb	[pc, r3]
 8003862:	372a      	.short	0x372a
 8003864:	5535      	.short	0x5535
 8003866:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800386a:	441e      	add	r6, r3
 800386c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003870:	2b20      	cmp	r3, #32
 8003872:	bfc1      	itttt	gt
 8003874:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003878:	409f      	lslgt	r7, r3
 800387a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800387e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003882:	bfd6      	itet	le
 8003884:	f1c3 0320 	rsble	r3, r3, #32
 8003888:	ea47 0003 	orrgt.w	r0, r7, r3
 800388c:	fa04 f003 	lslle.w	r0, r4, r3
 8003890:	f7fc fe60 	bl	8000554 <__aeabi_ui2d>
 8003894:	2201      	movs	r2, #1
 8003896:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800389a:	3e01      	subs	r6, #1
 800389c:	9214      	str	r2, [sp, #80]	@ 0x50
 800389e:	e777      	b.n	8003790 <_dtoa_r+0x100>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e7b8      	b.n	8003816 <_dtoa_r+0x186>
 80038a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80038a6:	e7b7      	b.n	8003818 <_dtoa_r+0x188>
 80038a8:	427b      	negs	r3, r7
 80038aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80038ac:	2300      	movs	r3, #0
 80038ae:	eba8 0807 	sub.w	r8, r8, r7
 80038b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80038b4:	e7c4      	b.n	8003840 <_dtoa_r+0x1b0>
 80038b6:	2300      	movs	r3, #0
 80038b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80038ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80038bc:	2b00      	cmp	r3, #0
 80038be:	dc35      	bgt.n	800392c <_dtoa_r+0x29c>
 80038c0:	2301      	movs	r3, #1
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	9307      	str	r3, [sp, #28]
 80038c6:	461a      	mov	r2, r3
 80038c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80038ca:	e00b      	b.n	80038e4 <_dtoa_r+0x254>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e7f3      	b.n	80038b8 <_dtoa_r+0x228>
 80038d0:	2300      	movs	r3, #0
 80038d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80038d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	3301      	adds	r3, #1
 80038dc:	2b01      	cmp	r3, #1
 80038de:	9307      	str	r3, [sp, #28]
 80038e0:	bfb8      	it	lt
 80038e2:	2301      	movlt	r3, #1
 80038e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80038e8:	2100      	movs	r1, #0
 80038ea:	2204      	movs	r2, #4
 80038ec:	f102 0514 	add.w	r5, r2, #20
 80038f0:	429d      	cmp	r5, r3
 80038f2:	d91f      	bls.n	8003934 <_dtoa_r+0x2a4>
 80038f4:	6041      	str	r1, [r0, #4]
 80038f6:	4658      	mov	r0, fp
 80038f8:	f000 fd8e 	bl	8004418 <_Balloc>
 80038fc:	4682      	mov	sl, r0
 80038fe:	2800      	cmp	r0, #0
 8003900:	d13c      	bne.n	800397c <_dtoa_r+0x2ec>
 8003902:	4b1b      	ldr	r3, [pc, #108]	@ (8003970 <_dtoa_r+0x2e0>)
 8003904:	4602      	mov	r2, r0
 8003906:	f240 11af 	movw	r1, #431	@ 0x1af
 800390a:	e6d8      	b.n	80036be <_dtoa_r+0x2e>
 800390c:	2301      	movs	r3, #1
 800390e:	e7e0      	b.n	80038d2 <_dtoa_r+0x242>
 8003910:	2401      	movs	r4, #1
 8003912:	2300      	movs	r3, #0
 8003914:	9309      	str	r3, [sp, #36]	@ 0x24
 8003916:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003918:	f04f 33ff 	mov.w	r3, #4294967295
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	9307      	str	r3, [sp, #28]
 8003920:	2200      	movs	r2, #0
 8003922:	2312      	movs	r3, #18
 8003924:	e7d0      	b.n	80038c8 <_dtoa_r+0x238>
 8003926:	2301      	movs	r3, #1
 8003928:	930b      	str	r3, [sp, #44]	@ 0x2c
 800392a:	e7f5      	b.n	8003918 <_dtoa_r+0x288>
 800392c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	9307      	str	r3, [sp, #28]
 8003932:	e7d7      	b.n	80038e4 <_dtoa_r+0x254>
 8003934:	3101      	adds	r1, #1
 8003936:	0052      	lsls	r2, r2, #1
 8003938:	e7d8      	b.n	80038ec <_dtoa_r+0x25c>
 800393a:	bf00      	nop
 800393c:	f3af 8000 	nop.w
 8003940:	636f4361 	.word	0x636f4361
 8003944:	3fd287a7 	.word	0x3fd287a7
 8003948:	8b60c8b3 	.word	0x8b60c8b3
 800394c:	3fc68a28 	.word	0x3fc68a28
 8003950:	509f79fb 	.word	0x509f79fb
 8003954:	3fd34413 	.word	0x3fd34413
 8003958:	08005331 	.word	0x08005331
 800395c:	08005348 	.word	0x08005348
 8003960:	7ff00000 	.word	0x7ff00000
 8003964:	08005301 	.word	0x08005301
 8003968:	3ff80000 	.word	0x3ff80000
 800396c:	08005440 	.word	0x08005440
 8003970:	080053a0 	.word	0x080053a0
 8003974:	0800532d 	.word	0x0800532d
 8003978:	08005300 	.word	0x08005300
 800397c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003980:	6018      	str	r0, [r3, #0]
 8003982:	9b07      	ldr	r3, [sp, #28]
 8003984:	2b0e      	cmp	r3, #14
 8003986:	f200 80a4 	bhi.w	8003ad2 <_dtoa_r+0x442>
 800398a:	2c00      	cmp	r4, #0
 800398c:	f000 80a1 	beq.w	8003ad2 <_dtoa_r+0x442>
 8003990:	2f00      	cmp	r7, #0
 8003992:	dd33      	ble.n	80039fc <_dtoa_r+0x36c>
 8003994:	4bad      	ldr	r3, [pc, #692]	@ (8003c4c <_dtoa_r+0x5bc>)
 8003996:	f007 020f 	and.w	r2, r7, #15
 800399a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800399e:	ed93 7b00 	vldr	d7, [r3]
 80039a2:	05f8      	lsls	r0, r7, #23
 80039a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80039a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80039ac:	d516      	bpl.n	80039dc <_dtoa_r+0x34c>
 80039ae:	4ba8      	ldr	r3, [pc, #672]	@ (8003c50 <_dtoa_r+0x5c0>)
 80039b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80039b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80039b8:	f7fc ff70 	bl	800089c <__aeabi_ddiv>
 80039bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039c0:	f004 040f 	and.w	r4, r4, #15
 80039c4:	2603      	movs	r6, #3
 80039c6:	4da2      	ldr	r5, [pc, #648]	@ (8003c50 <_dtoa_r+0x5c0>)
 80039c8:	b954      	cbnz	r4, 80039e0 <_dtoa_r+0x350>
 80039ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039d2:	f7fc ff63 	bl	800089c <__aeabi_ddiv>
 80039d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039da:	e028      	b.n	8003a2e <_dtoa_r+0x39e>
 80039dc:	2602      	movs	r6, #2
 80039de:	e7f2      	b.n	80039c6 <_dtoa_r+0x336>
 80039e0:	07e1      	lsls	r1, r4, #31
 80039e2:	d508      	bpl.n	80039f6 <_dtoa_r+0x366>
 80039e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80039e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80039ec:	f7fc fe2c 	bl	8000648 <__aeabi_dmul>
 80039f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80039f4:	3601      	adds	r6, #1
 80039f6:	1064      	asrs	r4, r4, #1
 80039f8:	3508      	adds	r5, #8
 80039fa:	e7e5      	b.n	80039c8 <_dtoa_r+0x338>
 80039fc:	f000 80d2 	beq.w	8003ba4 <_dtoa_r+0x514>
 8003a00:	427c      	negs	r4, r7
 8003a02:	4b92      	ldr	r3, [pc, #584]	@ (8003c4c <_dtoa_r+0x5bc>)
 8003a04:	4d92      	ldr	r5, [pc, #584]	@ (8003c50 <_dtoa_r+0x5c0>)
 8003a06:	f004 020f 	and.w	r2, r4, #15
 8003a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003a16:	f7fc fe17 	bl	8000648 <__aeabi_dmul>
 8003a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a1e:	1124      	asrs	r4, r4, #4
 8003a20:	2300      	movs	r3, #0
 8003a22:	2602      	movs	r6, #2
 8003a24:	2c00      	cmp	r4, #0
 8003a26:	f040 80b2 	bne.w	8003b8e <_dtoa_r+0x4fe>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1d3      	bne.n	80039d6 <_dtoa_r+0x346>
 8003a2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003a30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80b7 	beq.w	8003ba8 <_dtoa_r+0x518>
 8003a3a:	4b86      	ldr	r3, [pc, #536]	@ (8003c54 <_dtoa_r+0x5c4>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	4620      	mov	r0, r4
 8003a40:	4629      	mov	r1, r5
 8003a42:	f7fd f873 	bl	8000b2c <__aeabi_dcmplt>
 8003a46:	2800      	cmp	r0, #0
 8003a48:	f000 80ae 	beq.w	8003ba8 <_dtoa_r+0x518>
 8003a4c:	9b07      	ldr	r3, [sp, #28]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80aa 	beq.w	8003ba8 <_dtoa_r+0x518>
 8003a54:	9b00      	ldr	r3, [sp, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	dd37      	ble.n	8003aca <_dtoa_r+0x43a>
 8003a5a:	1e7b      	subs	r3, r7, #1
 8003a5c:	9304      	str	r3, [sp, #16]
 8003a5e:	4620      	mov	r0, r4
 8003a60:	4b7d      	ldr	r3, [pc, #500]	@ (8003c58 <_dtoa_r+0x5c8>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	4629      	mov	r1, r5
 8003a66:	f7fc fdef 	bl	8000648 <__aeabi_dmul>
 8003a6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a6e:	9c00      	ldr	r4, [sp, #0]
 8003a70:	3601      	adds	r6, #1
 8003a72:	4630      	mov	r0, r6
 8003a74:	f7fc fd7e 	bl	8000574 <__aeabi_i2d>
 8003a78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a7c:	f7fc fde4 	bl	8000648 <__aeabi_dmul>
 8003a80:	4b76      	ldr	r3, [pc, #472]	@ (8003c5c <_dtoa_r+0x5cc>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	f7fc fc2a 	bl	80002dc <__adddf3>
 8003a88:	4605      	mov	r5, r0
 8003a8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003a8e:	2c00      	cmp	r4, #0
 8003a90:	f040 808d 	bne.w	8003bae <_dtoa_r+0x51e>
 8003a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a98:	4b71      	ldr	r3, [pc, #452]	@ (8003c60 <_dtoa_r+0x5d0>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f7fc fc1c 	bl	80002d8 <__aeabi_dsub>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003aa8:	462a      	mov	r2, r5
 8003aaa:	4633      	mov	r3, r6
 8003aac:	f7fd f85c 	bl	8000b68 <__aeabi_dcmpgt>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	f040 828b 	bne.w	8003fcc <_dtoa_r+0x93c>
 8003ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003aba:	462a      	mov	r2, r5
 8003abc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003ac0:	f7fd f834 	bl	8000b2c <__aeabi_dcmplt>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	f040 8128 	bne.w	8003d1a <_dtoa_r+0x68a>
 8003aca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003ace:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003ad2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f2c0 815a 	blt.w	8003d8e <_dtoa_r+0x6fe>
 8003ada:	2f0e      	cmp	r7, #14
 8003adc:	f300 8157 	bgt.w	8003d8e <_dtoa_r+0x6fe>
 8003ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8003c4c <_dtoa_r+0x5bc>)
 8003ae2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003ae6:	ed93 7b00 	vldr	d7, [r3]
 8003aea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	ed8d 7b00 	vstr	d7, [sp]
 8003af2:	da03      	bge.n	8003afc <_dtoa_r+0x46c>
 8003af4:	9b07      	ldr	r3, [sp, #28]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f340 8101 	ble.w	8003cfe <_dtoa_r+0x66e>
 8003afc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003b00:	4656      	mov	r6, sl
 8003b02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b06:	4620      	mov	r0, r4
 8003b08:	4629      	mov	r1, r5
 8003b0a:	f7fc fec7 	bl	800089c <__aeabi_ddiv>
 8003b0e:	f7fd f84b 	bl	8000ba8 <__aeabi_d2iz>
 8003b12:	4680      	mov	r8, r0
 8003b14:	f7fc fd2e 	bl	8000574 <__aeabi_i2d>
 8003b18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b1c:	f7fc fd94 	bl	8000648 <__aeabi_dmul>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4620      	mov	r0, r4
 8003b26:	4629      	mov	r1, r5
 8003b28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003b2c:	f7fc fbd4 	bl	80002d8 <__aeabi_dsub>
 8003b30:	f806 4b01 	strb.w	r4, [r6], #1
 8003b34:	9d07      	ldr	r5, [sp, #28]
 8003b36:	eba6 040a 	sub.w	r4, r6, sl
 8003b3a:	42a5      	cmp	r5, r4
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	f040 8117 	bne.w	8003d72 <_dtoa_r+0x6e2>
 8003b44:	f7fc fbca 	bl	80002dc <__adddf3>
 8003b48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	460d      	mov	r5, r1
 8003b50:	f7fd f80a 	bl	8000b68 <__aeabi_dcmpgt>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	f040 80f9 	bne.w	8003d4c <_dtoa_r+0x6bc>
 8003b5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b5e:	4620      	mov	r0, r4
 8003b60:	4629      	mov	r1, r5
 8003b62:	f7fc ffd9 	bl	8000b18 <__aeabi_dcmpeq>
 8003b66:	b118      	cbz	r0, 8003b70 <_dtoa_r+0x4e0>
 8003b68:	f018 0f01 	tst.w	r8, #1
 8003b6c:	f040 80ee 	bne.w	8003d4c <_dtoa_r+0x6bc>
 8003b70:	4649      	mov	r1, r9
 8003b72:	4658      	mov	r0, fp
 8003b74:	f000 fc90 	bl	8004498 <_Bfree>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	7033      	strb	r3, [r6, #0]
 8003b7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003b7e:	3701      	adds	r7, #1
 8003b80:	601f      	str	r7, [r3, #0]
 8003b82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 831d 	beq.w	80041c4 <_dtoa_r+0xb34>
 8003b8a:	601e      	str	r6, [r3, #0]
 8003b8c:	e31a      	b.n	80041c4 <_dtoa_r+0xb34>
 8003b8e:	07e2      	lsls	r2, r4, #31
 8003b90:	d505      	bpl.n	8003b9e <_dtoa_r+0x50e>
 8003b92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003b96:	f7fc fd57 	bl	8000648 <__aeabi_dmul>
 8003b9a:	3601      	adds	r6, #1
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	1064      	asrs	r4, r4, #1
 8003ba0:	3508      	adds	r5, #8
 8003ba2:	e73f      	b.n	8003a24 <_dtoa_r+0x394>
 8003ba4:	2602      	movs	r6, #2
 8003ba6:	e742      	b.n	8003a2e <_dtoa_r+0x39e>
 8003ba8:	9c07      	ldr	r4, [sp, #28]
 8003baa:	9704      	str	r7, [sp, #16]
 8003bac:	e761      	b.n	8003a72 <_dtoa_r+0x3e2>
 8003bae:	4b27      	ldr	r3, [pc, #156]	@ (8003c4c <_dtoa_r+0x5bc>)
 8003bb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003bb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003bb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003bba:	4454      	add	r4, sl
 8003bbc:	2900      	cmp	r1, #0
 8003bbe:	d053      	beq.n	8003c68 <_dtoa_r+0x5d8>
 8003bc0:	4928      	ldr	r1, [pc, #160]	@ (8003c64 <_dtoa_r+0x5d4>)
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f7fc fe6a 	bl	800089c <__aeabi_ddiv>
 8003bc8:	4633      	mov	r3, r6
 8003bca:	462a      	mov	r2, r5
 8003bcc:	f7fc fb84 	bl	80002d8 <__aeabi_dsub>
 8003bd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003bd4:	4656      	mov	r6, sl
 8003bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bda:	f7fc ffe5 	bl	8000ba8 <__aeabi_d2iz>
 8003bde:	4605      	mov	r5, r0
 8003be0:	f7fc fcc8 	bl	8000574 <__aeabi_i2d>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bec:	f7fc fb74 	bl	80002d8 <__aeabi_dsub>
 8003bf0:	3530      	adds	r5, #48	@ 0x30
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bfa:	f806 5b01 	strb.w	r5, [r6], #1
 8003bfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003c02:	f7fc ff93 	bl	8000b2c <__aeabi_dcmplt>
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d171      	bne.n	8003cee <_dtoa_r+0x65e>
 8003c0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c0e:	4911      	ldr	r1, [pc, #68]	@ (8003c54 <_dtoa_r+0x5c4>)
 8003c10:	2000      	movs	r0, #0
 8003c12:	f7fc fb61 	bl	80002d8 <__aeabi_dsub>
 8003c16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003c1a:	f7fc ff87 	bl	8000b2c <__aeabi_dcmplt>
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	f040 8095 	bne.w	8003d4e <_dtoa_r+0x6be>
 8003c24:	42a6      	cmp	r6, r4
 8003c26:	f43f af50 	beq.w	8003aca <_dtoa_r+0x43a>
 8003c2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c58 <_dtoa_r+0x5c8>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	f7fc fd09 	bl	8000648 <__aeabi_dmul>
 8003c36:	4b08      	ldr	r3, [pc, #32]	@ (8003c58 <_dtoa_r+0x5c8>)
 8003c38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c42:	f7fc fd01 	bl	8000648 <__aeabi_dmul>
 8003c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c4a:	e7c4      	b.n	8003bd6 <_dtoa_r+0x546>
 8003c4c:	08005440 	.word	0x08005440
 8003c50:	08005418 	.word	0x08005418
 8003c54:	3ff00000 	.word	0x3ff00000
 8003c58:	40240000 	.word	0x40240000
 8003c5c:	401c0000 	.word	0x401c0000
 8003c60:	40140000 	.word	0x40140000
 8003c64:	3fe00000 	.word	0x3fe00000
 8003c68:	4631      	mov	r1, r6
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f7fc fcec 	bl	8000648 <__aeabi_dmul>
 8003c70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003c74:	9415      	str	r4, [sp, #84]	@ 0x54
 8003c76:	4656      	mov	r6, sl
 8003c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c7c:	f7fc ff94 	bl	8000ba8 <__aeabi_d2iz>
 8003c80:	4605      	mov	r5, r0
 8003c82:	f7fc fc77 	bl	8000574 <__aeabi_i2d>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c8e:	f7fc fb23 	bl	80002d8 <__aeabi_dsub>
 8003c92:	3530      	adds	r5, #48	@ 0x30
 8003c94:	f806 5b01 	strb.w	r5, [r6], #1
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	42a6      	cmp	r6, r4
 8003c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	d124      	bne.n	8003cf2 <_dtoa_r+0x662>
 8003ca8:	4bac      	ldr	r3, [pc, #688]	@ (8003f5c <_dtoa_r+0x8cc>)
 8003caa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003cae:	f7fc fb15 	bl	80002dc <__adddf3>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cba:	f7fc ff55 	bl	8000b68 <__aeabi_dcmpgt>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d145      	bne.n	8003d4e <_dtoa_r+0x6be>
 8003cc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003cc6:	49a5      	ldr	r1, [pc, #660]	@ (8003f5c <_dtoa_r+0x8cc>)
 8003cc8:	2000      	movs	r0, #0
 8003cca:	f7fc fb05 	bl	80002d8 <__aeabi_dsub>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cd6:	f7fc ff29 	bl	8000b2c <__aeabi_dcmplt>
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	f43f aef5 	beq.w	8003aca <_dtoa_r+0x43a>
 8003ce0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8003ce2:	1e73      	subs	r3, r6, #1
 8003ce4:	9315      	str	r3, [sp, #84]	@ 0x54
 8003ce6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003cea:	2b30      	cmp	r3, #48	@ 0x30
 8003cec:	d0f8      	beq.n	8003ce0 <_dtoa_r+0x650>
 8003cee:	9f04      	ldr	r7, [sp, #16]
 8003cf0:	e73e      	b.n	8003b70 <_dtoa_r+0x4e0>
 8003cf2:	4b9b      	ldr	r3, [pc, #620]	@ (8003f60 <_dtoa_r+0x8d0>)
 8003cf4:	f7fc fca8 	bl	8000648 <__aeabi_dmul>
 8003cf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cfc:	e7bc      	b.n	8003c78 <_dtoa_r+0x5e8>
 8003cfe:	d10c      	bne.n	8003d1a <_dtoa_r+0x68a>
 8003d00:	4b98      	ldr	r3, [pc, #608]	@ (8003f64 <_dtoa_r+0x8d4>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d08:	f7fc fc9e 	bl	8000648 <__aeabi_dmul>
 8003d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d10:	f7fc ff20 	bl	8000b54 <__aeabi_dcmpge>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	f000 8157 	beq.w	8003fc8 <_dtoa_r+0x938>
 8003d1a:	2400      	movs	r4, #0
 8003d1c:	4625      	mov	r5, r4
 8003d1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d20:	43db      	mvns	r3, r3
 8003d22:	9304      	str	r3, [sp, #16]
 8003d24:	4656      	mov	r6, sl
 8003d26:	2700      	movs	r7, #0
 8003d28:	4621      	mov	r1, r4
 8003d2a:	4658      	mov	r0, fp
 8003d2c:	f000 fbb4 	bl	8004498 <_Bfree>
 8003d30:	2d00      	cmp	r5, #0
 8003d32:	d0dc      	beq.n	8003cee <_dtoa_r+0x65e>
 8003d34:	b12f      	cbz	r7, 8003d42 <_dtoa_r+0x6b2>
 8003d36:	42af      	cmp	r7, r5
 8003d38:	d003      	beq.n	8003d42 <_dtoa_r+0x6b2>
 8003d3a:	4639      	mov	r1, r7
 8003d3c:	4658      	mov	r0, fp
 8003d3e:	f000 fbab 	bl	8004498 <_Bfree>
 8003d42:	4629      	mov	r1, r5
 8003d44:	4658      	mov	r0, fp
 8003d46:	f000 fba7 	bl	8004498 <_Bfree>
 8003d4a:	e7d0      	b.n	8003cee <_dtoa_r+0x65e>
 8003d4c:	9704      	str	r7, [sp, #16]
 8003d4e:	4633      	mov	r3, r6
 8003d50:	461e      	mov	r6, r3
 8003d52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003d56:	2a39      	cmp	r2, #57	@ 0x39
 8003d58:	d107      	bne.n	8003d6a <_dtoa_r+0x6da>
 8003d5a:	459a      	cmp	sl, r3
 8003d5c:	d1f8      	bne.n	8003d50 <_dtoa_r+0x6c0>
 8003d5e:	9a04      	ldr	r2, [sp, #16]
 8003d60:	3201      	adds	r2, #1
 8003d62:	9204      	str	r2, [sp, #16]
 8003d64:	2230      	movs	r2, #48	@ 0x30
 8003d66:	f88a 2000 	strb.w	r2, [sl]
 8003d6a:	781a      	ldrb	r2, [r3, #0]
 8003d6c:	3201      	adds	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	e7bd      	b.n	8003cee <_dtoa_r+0x65e>
 8003d72:	4b7b      	ldr	r3, [pc, #492]	@ (8003f60 <_dtoa_r+0x8d0>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	f7fc fc67 	bl	8000648 <__aeabi_dmul>
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	4604      	mov	r4, r0
 8003d80:	460d      	mov	r5, r1
 8003d82:	f7fc fec9 	bl	8000b18 <__aeabi_dcmpeq>
 8003d86:	2800      	cmp	r0, #0
 8003d88:	f43f aebb 	beq.w	8003b02 <_dtoa_r+0x472>
 8003d8c:	e6f0      	b.n	8003b70 <_dtoa_r+0x4e0>
 8003d8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003d90:	2a00      	cmp	r2, #0
 8003d92:	f000 80db 	beq.w	8003f4c <_dtoa_r+0x8bc>
 8003d96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d98:	2a01      	cmp	r2, #1
 8003d9a:	f300 80bf 	bgt.w	8003f1c <_dtoa_r+0x88c>
 8003d9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003da0:	2a00      	cmp	r2, #0
 8003da2:	f000 80b7 	beq.w	8003f14 <_dtoa_r+0x884>
 8003da6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003daa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003dac:	4646      	mov	r6, r8
 8003dae:	9a08      	ldr	r2, [sp, #32]
 8003db0:	2101      	movs	r1, #1
 8003db2:	441a      	add	r2, r3
 8003db4:	4658      	mov	r0, fp
 8003db6:	4498      	add	r8, r3
 8003db8:	9208      	str	r2, [sp, #32]
 8003dba:	f000 fc21 	bl	8004600 <__i2b>
 8003dbe:	4605      	mov	r5, r0
 8003dc0:	b15e      	cbz	r6, 8003dda <_dtoa_r+0x74a>
 8003dc2:	9b08      	ldr	r3, [sp, #32]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	dd08      	ble.n	8003dda <_dtoa_r+0x74a>
 8003dc8:	42b3      	cmp	r3, r6
 8003dca:	9a08      	ldr	r2, [sp, #32]
 8003dcc:	bfa8      	it	ge
 8003dce:	4633      	movge	r3, r6
 8003dd0:	eba8 0803 	sub.w	r8, r8, r3
 8003dd4:	1af6      	subs	r6, r6, r3
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	9308      	str	r3, [sp, #32]
 8003dda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ddc:	b1f3      	cbz	r3, 8003e1c <_dtoa_r+0x78c>
 8003dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80b7 	beq.w	8003f54 <_dtoa_r+0x8c4>
 8003de6:	b18c      	cbz	r4, 8003e0c <_dtoa_r+0x77c>
 8003de8:	4629      	mov	r1, r5
 8003dea:	4622      	mov	r2, r4
 8003dec:	4658      	mov	r0, fp
 8003dee:	f000 fcc7 	bl	8004780 <__pow5mult>
 8003df2:	464a      	mov	r2, r9
 8003df4:	4601      	mov	r1, r0
 8003df6:	4605      	mov	r5, r0
 8003df8:	4658      	mov	r0, fp
 8003dfa:	f000 fc17 	bl	800462c <__multiply>
 8003dfe:	4649      	mov	r1, r9
 8003e00:	9004      	str	r0, [sp, #16]
 8003e02:	4658      	mov	r0, fp
 8003e04:	f000 fb48 	bl	8004498 <_Bfree>
 8003e08:	9b04      	ldr	r3, [sp, #16]
 8003e0a:	4699      	mov	r9, r3
 8003e0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e0e:	1b1a      	subs	r2, r3, r4
 8003e10:	d004      	beq.n	8003e1c <_dtoa_r+0x78c>
 8003e12:	4649      	mov	r1, r9
 8003e14:	4658      	mov	r0, fp
 8003e16:	f000 fcb3 	bl	8004780 <__pow5mult>
 8003e1a:	4681      	mov	r9, r0
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	4658      	mov	r0, fp
 8003e20:	f000 fbee 	bl	8004600 <__i2b>
 8003e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003e26:	4604      	mov	r4, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 81cf 	beq.w	80041cc <_dtoa_r+0xb3c>
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4601      	mov	r1, r0
 8003e32:	4658      	mov	r0, fp
 8003e34:	f000 fca4 	bl	8004780 <__pow5mult>
 8003e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	f300 8095 	bgt.w	8003f6c <_dtoa_r+0x8dc>
 8003e42:	9b02      	ldr	r3, [sp, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f040 8087 	bne.w	8003f58 <_dtoa_r+0x8c8>
 8003e4a:	9b03      	ldr	r3, [sp, #12]
 8003e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f040 8089 	bne.w	8003f68 <_dtoa_r+0x8d8>
 8003e56:	9b03      	ldr	r3, [sp, #12]
 8003e58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e5c:	0d1b      	lsrs	r3, r3, #20
 8003e5e:	051b      	lsls	r3, r3, #20
 8003e60:	b12b      	cbz	r3, 8003e6e <_dtoa_r+0x7de>
 8003e62:	9b08      	ldr	r3, [sp, #32]
 8003e64:	3301      	adds	r3, #1
 8003e66:	9308      	str	r3, [sp, #32]
 8003e68:	f108 0801 	add.w	r8, r8, #1
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 81b0 	beq.w	80041d8 <_dtoa_r+0xb48>
 8003e78:	6923      	ldr	r3, [r4, #16]
 8003e7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003e7e:	6918      	ldr	r0, [r3, #16]
 8003e80:	f000 fb72 	bl	8004568 <__hi0bits>
 8003e84:	f1c0 0020 	rsb	r0, r0, #32
 8003e88:	9b08      	ldr	r3, [sp, #32]
 8003e8a:	4418      	add	r0, r3
 8003e8c:	f010 001f 	ands.w	r0, r0, #31
 8003e90:	d077      	beq.n	8003f82 <_dtoa_r+0x8f2>
 8003e92:	f1c0 0320 	rsb	r3, r0, #32
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	dd6b      	ble.n	8003f72 <_dtoa_r+0x8e2>
 8003e9a:	9b08      	ldr	r3, [sp, #32]
 8003e9c:	f1c0 001c 	rsb	r0, r0, #28
 8003ea0:	4403      	add	r3, r0
 8003ea2:	4480      	add	r8, r0
 8003ea4:	4406      	add	r6, r0
 8003ea6:	9308      	str	r3, [sp, #32]
 8003ea8:	f1b8 0f00 	cmp.w	r8, #0
 8003eac:	dd05      	ble.n	8003eba <_dtoa_r+0x82a>
 8003eae:	4649      	mov	r1, r9
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	4658      	mov	r0, fp
 8003eb4:	f000 fcbe 	bl	8004834 <__lshift>
 8003eb8:	4681      	mov	r9, r0
 8003eba:	9b08      	ldr	r3, [sp, #32]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dd05      	ble.n	8003ecc <_dtoa_r+0x83c>
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4658      	mov	r0, fp
 8003ec6:	f000 fcb5 	bl	8004834 <__lshift>
 8003eca:	4604      	mov	r4, r0
 8003ecc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d059      	beq.n	8003f86 <_dtoa_r+0x8f6>
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	4648      	mov	r0, r9
 8003ed6:	f000 fd19 	bl	800490c <__mcmp>
 8003eda:	2800      	cmp	r0, #0
 8003edc:	da53      	bge.n	8003f86 <_dtoa_r+0x8f6>
 8003ede:	1e7b      	subs	r3, r7, #1
 8003ee0:	9304      	str	r3, [sp, #16]
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	220a      	movs	r2, #10
 8003ee8:	4658      	mov	r0, fp
 8003eea:	f000 faf7 	bl	80044dc <__multadd>
 8003eee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ef0:	4681      	mov	r9, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8172 	beq.w	80041dc <_dtoa_r+0xb4c>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	4629      	mov	r1, r5
 8003efc:	220a      	movs	r2, #10
 8003efe:	4658      	mov	r0, fp
 8003f00:	f000 faec 	bl	80044dc <__multadd>
 8003f04:	9b00      	ldr	r3, [sp, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	4605      	mov	r5, r0
 8003f0a:	dc67      	bgt.n	8003fdc <_dtoa_r+0x94c>
 8003f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	dc41      	bgt.n	8003f96 <_dtoa_r+0x906>
 8003f12:	e063      	b.n	8003fdc <_dtoa_r+0x94c>
 8003f14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003f16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003f1a:	e746      	b.n	8003daa <_dtoa_r+0x71a>
 8003f1c:	9b07      	ldr	r3, [sp, #28]
 8003f1e:	1e5c      	subs	r4, r3, #1
 8003f20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f22:	42a3      	cmp	r3, r4
 8003f24:	bfbf      	itttt	lt
 8003f26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8003f28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8003f2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8003f2c:	1ae3      	sublt	r3, r4, r3
 8003f2e:	bfb4      	ite	lt
 8003f30:	18d2      	addlt	r2, r2, r3
 8003f32:	1b1c      	subge	r4, r3, r4
 8003f34:	9b07      	ldr	r3, [sp, #28]
 8003f36:	bfbc      	itt	lt
 8003f38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8003f3a:	2400      	movlt	r4, #0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bfb5      	itete	lt
 8003f40:	eba8 0603 	sublt.w	r6, r8, r3
 8003f44:	9b07      	ldrge	r3, [sp, #28]
 8003f46:	2300      	movlt	r3, #0
 8003f48:	4646      	movge	r6, r8
 8003f4a:	e730      	b.n	8003dae <_dtoa_r+0x71e>
 8003f4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003f4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003f50:	4646      	mov	r6, r8
 8003f52:	e735      	b.n	8003dc0 <_dtoa_r+0x730>
 8003f54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f56:	e75c      	b.n	8003e12 <_dtoa_r+0x782>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e788      	b.n	8003e6e <_dtoa_r+0x7de>
 8003f5c:	3fe00000 	.word	0x3fe00000
 8003f60:	40240000 	.word	0x40240000
 8003f64:	40140000 	.word	0x40140000
 8003f68:	9b02      	ldr	r3, [sp, #8]
 8003f6a:	e780      	b.n	8003e6e <_dtoa_r+0x7de>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f70:	e782      	b.n	8003e78 <_dtoa_r+0x7e8>
 8003f72:	d099      	beq.n	8003ea8 <_dtoa_r+0x818>
 8003f74:	9a08      	ldr	r2, [sp, #32]
 8003f76:	331c      	adds	r3, #28
 8003f78:	441a      	add	r2, r3
 8003f7a:	4498      	add	r8, r3
 8003f7c:	441e      	add	r6, r3
 8003f7e:	9208      	str	r2, [sp, #32]
 8003f80:	e792      	b.n	8003ea8 <_dtoa_r+0x818>
 8003f82:	4603      	mov	r3, r0
 8003f84:	e7f6      	b.n	8003f74 <_dtoa_r+0x8e4>
 8003f86:	9b07      	ldr	r3, [sp, #28]
 8003f88:	9704      	str	r7, [sp, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	dc20      	bgt.n	8003fd0 <_dtoa_r+0x940>
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	dd1e      	ble.n	8003fd4 <_dtoa_r+0x944>
 8003f96:	9b00      	ldr	r3, [sp, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f47f aec0 	bne.w	8003d1e <_dtoa_r+0x68e>
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	2205      	movs	r2, #5
 8003fa2:	4658      	mov	r0, fp
 8003fa4:	f000 fa9a 	bl	80044dc <__multadd>
 8003fa8:	4601      	mov	r1, r0
 8003faa:	4604      	mov	r4, r0
 8003fac:	4648      	mov	r0, r9
 8003fae:	f000 fcad 	bl	800490c <__mcmp>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	f77f aeb3 	ble.w	8003d1e <_dtoa_r+0x68e>
 8003fb8:	4656      	mov	r6, sl
 8003fba:	2331      	movs	r3, #49	@ 0x31
 8003fbc:	f806 3b01 	strb.w	r3, [r6], #1
 8003fc0:	9b04      	ldr	r3, [sp, #16]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	9304      	str	r3, [sp, #16]
 8003fc6:	e6ae      	b.n	8003d26 <_dtoa_r+0x696>
 8003fc8:	9c07      	ldr	r4, [sp, #28]
 8003fca:	9704      	str	r7, [sp, #16]
 8003fcc:	4625      	mov	r5, r4
 8003fce:	e7f3      	b.n	8003fb8 <_dtoa_r+0x928>
 8003fd0:	9b07      	ldr	r3, [sp, #28]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8104 	beq.w	80041e4 <_dtoa_r+0xb54>
 8003fdc:	2e00      	cmp	r6, #0
 8003fde:	dd05      	ble.n	8003fec <_dtoa_r+0x95c>
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	4632      	mov	r2, r6
 8003fe4:	4658      	mov	r0, fp
 8003fe6:	f000 fc25 	bl	8004834 <__lshift>
 8003fea:	4605      	mov	r5, r0
 8003fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d05a      	beq.n	80040a8 <_dtoa_r+0xa18>
 8003ff2:	6869      	ldr	r1, [r5, #4]
 8003ff4:	4658      	mov	r0, fp
 8003ff6:	f000 fa0f 	bl	8004418 <_Balloc>
 8003ffa:	4606      	mov	r6, r0
 8003ffc:	b928      	cbnz	r0, 800400a <_dtoa_r+0x97a>
 8003ffe:	4b84      	ldr	r3, [pc, #528]	@ (8004210 <_dtoa_r+0xb80>)
 8004000:	4602      	mov	r2, r0
 8004002:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004006:	f7ff bb5a 	b.w	80036be <_dtoa_r+0x2e>
 800400a:	692a      	ldr	r2, [r5, #16]
 800400c:	3202      	adds	r2, #2
 800400e:	0092      	lsls	r2, r2, #2
 8004010:	f105 010c 	add.w	r1, r5, #12
 8004014:	300c      	adds	r0, #12
 8004016:	f000 fe3d 	bl	8004c94 <memcpy>
 800401a:	2201      	movs	r2, #1
 800401c:	4631      	mov	r1, r6
 800401e:	4658      	mov	r0, fp
 8004020:	f000 fc08 	bl	8004834 <__lshift>
 8004024:	f10a 0301 	add.w	r3, sl, #1
 8004028:	9307      	str	r3, [sp, #28]
 800402a:	9b00      	ldr	r3, [sp, #0]
 800402c:	4453      	add	r3, sl
 800402e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004030:	9b02      	ldr	r3, [sp, #8]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	462f      	mov	r7, r5
 8004038:	930a      	str	r3, [sp, #40]	@ 0x28
 800403a:	4605      	mov	r5, r0
 800403c:	9b07      	ldr	r3, [sp, #28]
 800403e:	4621      	mov	r1, r4
 8004040:	3b01      	subs	r3, #1
 8004042:	4648      	mov	r0, r9
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	f7ff fa9a 	bl	800357e <quorem>
 800404a:	4639      	mov	r1, r7
 800404c:	9002      	str	r0, [sp, #8]
 800404e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004052:	4648      	mov	r0, r9
 8004054:	f000 fc5a 	bl	800490c <__mcmp>
 8004058:	462a      	mov	r2, r5
 800405a:	9008      	str	r0, [sp, #32]
 800405c:	4621      	mov	r1, r4
 800405e:	4658      	mov	r0, fp
 8004060:	f000 fc70 	bl	8004944 <__mdiff>
 8004064:	68c2      	ldr	r2, [r0, #12]
 8004066:	4606      	mov	r6, r0
 8004068:	bb02      	cbnz	r2, 80040ac <_dtoa_r+0xa1c>
 800406a:	4601      	mov	r1, r0
 800406c:	4648      	mov	r0, r9
 800406e:	f000 fc4d 	bl	800490c <__mcmp>
 8004072:	4602      	mov	r2, r0
 8004074:	4631      	mov	r1, r6
 8004076:	4658      	mov	r0, fp
 8004078:	920e      	str	r2, [sp, #56]	@ 0x38
 800407a:	f000 fa0d 	bl	8004498 <_Bfree>
 800407e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004080:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004082:	9e07      	ldr	r6, [sp, #28]
 8004084:	ea43 0102 	orr.w	r1, r3, r2
 8004088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800408a:	4319      	orrs	r1, r3
 800408c:	d110      	bne.n	80040b0 <_dtoa_r+0xa20>
 800408e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004092:	d029      	beq.n	80040e8 <_dtoa_r+0xa58>
 8004094:	9b08      	ldr	r3, [sp, #32]
 8004096:	2b00      	cmp	r3, #0
 8004098:	dd02      	ble.n	80040a0 <_dtoa_r+0xa10>
 800409a:	9b02      	ldr	r3, [sp, #8]
 800409c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80040a0:	9b00      	ldr	r3, [sp, #0]
 80040a2:	f883 8000 	strb.w	r8, [r3]
 80040a6:	e63f      	b.n	8003d28 <_dtoa_r+0x698>
 80040a8:	4628      	mov	r0, r5
 80040aa:	e7bb      	b.n	8004024 <_dtoa_r+0x994>
 80040ac:	2201      	movs	r2, #1
 80040ae:	e7e1      	b.n	8004074 <_dtoa_r+0x9e4>
 80040b0:	9b08      	ldr	r3, [sp, #32]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	db04      	blt.n	80040c0 <_dtoa_r+0xa30>
 80040b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80040b8:	430b      	orrs	r3, r1
 80040ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80040bc:	430b      	orrs	r3, r1
 80040be:	d120      	bne.n	8004102 <_dtoa_r+0xa72>
 80040c0:	2a00      	cmp	r2, #0
 80040c2:	dded      	ble.n	80040a0 <_dtoa_r+0xa10>
 80040c4:	4649      	mov	r1, r9
 80040c6:	2201      	movs	r2, #1
 80040c8:	4658      	mov	r0, fp
 80040ca:	f000 fbb3 	bl	8004834 <__lshift>
 80040ce:	4621      	mov	r1, r4
 80040d0:	4681      	mov	r9, r0
 80040d2:	f000 fc1b 	bl	800490c <__mcmp>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	dc03      	bgt.n	80040e2 <_dtoa_r+0xa52>
 80040da:	d1e1      	bne.n	80040a0 <_dtoa_r+0xa10>
 80040dc:	f018 0f01 	tst.w	r8, #1
 80040e0:	d0de      	beq.n	80040a0 <_dtoa_r+0xa10>
 80040e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80040e6:	d1d8      	bne.n	800409a <_dtoa_r+0xa0a>
 80040e8:	9a00      	ldr	r2, [sp, #0]
 80040ea:	2339      	movs	r3, #57	@ 0x39
 80040ec:	7013      	strb	r3, [r2, #0]
 80040ee:	4633      	mov	r3, r6
 80040f0:	461e      	mov	r6, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80040f8:	2a39      	cmp	r2, #57	@ 0x39
 80040fa:	d052      	beq.n	80041a2 <_dtoa_r+0xb12>
 80040fc:	3201      	adds	r2, #1
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	e612      	b.n	8003d28 <_dtoa_r+0x698>
 8004102:	2a00      	cmp	r2, #0
 8004104:	dd07      	ble.n	8004116 <_dtoa_r+0xa86>
 8004106:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800410a:	d0ed      	beq.n	80040e8 <_dtoa_r+0xa58>
 800410c:	9a00      	ldr	r2, [sp, #0]
 800410e:	f108 0301 	add.w	r3, r8, #1
 8004112:	7013      	strb	r3, [r2, #0]
 8004114:	e608      	b.n	8003d28 <_dtoa_r+0x698>
 8004116:	9b07      	ldr	r3, [sp, #28]
 8004118:	9a07      	ldr	r2, [sp, #28]
 800411a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800411e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004120:	4293      	cmp	r3, r2
 8004122:	d028      	beq.n	8004176 <_dtoa_r+0xae6>
 8004124:	4649      	mov	r1, r9
 8004126:	2300      	movs	r3, #0
 8004128:	220a      	movs	r2, #10
 800412a:	4658      	mov	r0, fp
 800412c:	f000 f9d6 	bl	80044dc <__multadd>
 8004130:	42af      	cmp	r7, r5
 8004132:	4681      	mov	r9, r0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	f04f 020a 	mov.w	r2, #10
 800413c:	4639      	mov	r1, r7
 800413e:	4658      	mov	r0, fp
 8004140:	d107      	bne.n	8004152 <_dtoa_r+0xac2>
 8004142:	f000 f9cb 	bl	80044dc <__multadd>
 8004146:	4607      	mov	r7, r0
 8004148:	4605      	mov	r5, r0
 800414a:	9b07      	ldr	r3, [sp, #28]
 800414c:	3301      	adds	r3, #1
 800414e:	9307      	str	r3, [sp, #28]
 8004150:	e774      	b.n	800403c <_dtoa_r+0x9ac>
 8004152:	f000 f9c3 	bl	80044dc <__multadd>
 8004156:	4629      	mov	r1, r5
 8004158:	4607      	mov	r7, r0
 800415a:	2300      	movs	r3, #0
 800415c:	220a      	movs	r2, #10
 800415e:	4658      	mov	r0, fp
 8004160:	f000 f9bc 	bl	80044dc <__multadd>
 8004164:	4605      	mov	r5, r0
 8004166:	e7f0      	b.n	800414a <_dtoa_r+0xaba>
 8004168:	9b00      	ldr	r3, [sp, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	bfcc      	ite	gt
 800416e:	461e      	movgt	r6, r3
 8004170:	2601      	movle	r6, #1
 8004172:	4456      	add	r6, sl
 8004174:	2700      	movs	r7, #0
 8004176:	4649      	mov	r1, r9
 8004178:	2201      	movs	r2, #1
 800417a:	4658      	mov	r0, fp
 800417c:	f000 fb5a 	bl	8004834 <__lshift>
 8004180:	4621      	mov	r1, r4
 8004182:	4681      	mov	r9, r0
 8004184:	f000 fbc2 	bl	800490c <__mcmp>
 8004188:	2800      	cmp	r0, #0
 800418a:	dcb0      	bgt.n	80040ee <_dtoa_r+0xa5e>
 800418c:	d102      	bne.n	8004194 <_dtoa_r+0xb04>
 800418e:	f018 0f01 	tst.w	r8, #1
 8004192:	d1ac      	bne.n	80040ee <_dtoa_r+0xa5e>
 8004194:	4633      	mov	r3, r6
 8004196:	461e      	mov	r6, r3
 8004198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800419c:	2a30      	cmp	r2, #48	@ 0x30
 800419e:	d0fa      	beq.n	8004196 <_dtoa_r+0xb06>
 80041a0:	e5c2      	b.n	8003d28 <_dtoa_r+0x698>
 80041a2:	459a      	cmp	sl, r3
 80041a4:	d1a4      	bne.n	80040f0 <_dtoa_r+0xa60>
 80041a6:	9b04      	ldr	r3, [sp, #16]
 80041a8:	3301      	adds	r3, #1
 80041aa:	9304      	str	r3, [sp, #16]
 80041ac:	2331      	movs	r3, #49	@ 0x31
 80041ae:	f88a 3000 	strb.w	r3, [sl]
 80041b2:	e5b9      	b.n	8003d28 <_dtoa_r+0x698>
 80041b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80041b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004214 <_dtoa_r+0xb84>
 80041ba:	b11b      	cbz	r3, 80041c4 <_dtoa_r+0xb34>
 80041bc:	f10a 0308 	add.w	r3, sl, #8
 80041c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	4650      	mov	r0, sl
 80041c6:	b019      	add	sp, #100	@ 0x64
 80041c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	f77f ae37 	ble.w	8003e42 <_dtoa_r+0x7b2>
 80041d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80041d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80041d8:	2001      	movs	r0, #1
 80041da:	e655      	b.n	8003e88 <_dtoa_r+0x7f8>
 80041dc:	9b00      	ldr	r3, [sp, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f77f aed6 	ble.w	8003f90 <_dtoa_r+0x900>
 80041e4:	4656      	mov	r6, sl
 80041e6:	4621      	mov	r1, r4
 80041e8:	4648      	mov	r0, r9
 80041ea:	f7ff f9c8 	bl	800357e <quorem>
 80041ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80041f2:	f806 8b01 	strb.w	r8, [r6], #1
 80041f6:	9b00      	ldr	r3, [sp, #0]
 80041f8:	eba6 020a 	sub.w	r2, r6, sl
 80041fc:	4293      	cmp	r3, r2
 80041fe:	ddb3      	ble.n	8004168 <_dtoa_r+0xad8>
 8004200:	4649      	mov	r1, r9
 8004202:	2300      	movs	r3, #0
 8004204:	220a      	movs	r2, #10
 8004206:	4658      	mov	r0, fp
 8004208:	f000 f968 	bl	80044dc <__multadd>
 800420c:	4681      	mov	r9, r0
 800420e:	e7ea      	b.n	80041e6 <_dtoa_r+0xb56>
 8004210:	080053a0 	.word	0x080053a0
 8004214:	08005324 	.word	0x08005324

08004218 <_free_r>:
 8004218:	b538      	push	{r3, r4, r5, lr}
 800421a:	4605      	mov	r5, r0
 800421c:	2900      	cmp	r1, #0
 800421e:	d041      	beq.n	80042a4 <_free_r+0x8c>
 8004220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004224:	1f0c      	subs	r4, r1, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	bfb8      	it	lt
 800422a:	18e4      	addlt	r4, r4, r3
 800422c:	f000 f8e8 	bl	8004400 <__malloc_lock>
 8004230:	4a1d      	ldr	r2, [pc, #116]	@ (80042a8 <_free_r+0x90>)
 8004232:	6813      	ldr	r3, [r2, #0]
 8004234:	b933      	cbnz	r3, 8004244 <_free_r+0x2c>
 8004236:	6063      	str	r3, [r4, #4]
 8004238:	6014      	str	r4, [r2, #0]
 800423a:	4628      	mov	r0, r5
 800423c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004240:	f000 b8e4 	b.w	800440c <__malloc_unlock>
 8004244:	42a3      	cmp	r3, r4
 8004246:	d908      	bls.n	800425a <_free_r+0x42>
 8004248:	6820      	ldr	r0, [r4, #0]
 800424a:	1821      	adds	r1, r4, r0
 800424c:	428b      	cmp	r3, r1
 800424e:	bf01      	itttt	eq
 8004250:	6819      	ldreq	r1, [r3, #0]
 8004252:	685b      	ldreq	r3, [r3, #4]
 8004254:	1809      	addeq	r1, r1, r0
 8004256:	6021      	streq	r1, [r4, #0]
 8004258:	e7ed      	b.n	8004236 <_free_r+0x1e>
 800425a:	461a      	mov	r2, r3
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	b10b      	cbz	r3, 8004264 <_free_r+0x4c>
 8004260:	42a3      	cmp	r3, r4
 8004262:	d9fa      	bls.n	800425a <_free_r+0x42>
 8004264:	6811      	ldr	r1, [r2, #0]
 8004266:	1850      	adds	r0, r2, r1
 8004268:	42a0      	cmp	r0, r4
 800426a:	d10b      	bne.n	8004284 <_free_r+0x6c>
 800426c:	6820      	ldr	r0, [r4, #0]
 800426e:	4401      	add	r1, r0
 8004270:	1850      	adds	r0, r2, r1
 8004272:	4283      	cmp	r3, r0
 8004274:	6011      	str	r1, [r2, #0]
 8004276:	d1e0      	bne.n	800423a <_free_r+0x22>
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	6053      	str	r3, [r2, #4]
 800427e:	4408      	add	r0, r1
 8004280:	6010      	str	r0, [r2, #0]
 8004282:	e7da      	b.n	800423a <_free_r+0x22>
 8004284:	d902      	bls.n	800428c <_free_r+0x74>
 8004286:	230c      	movs	r3, #12
 8004288:	602b      	str	r3, [r5, #0]
 800428a:	e7d6      	b.n	800423a <_free_r+0x22>
 800428c:	6820      	ldr	r0, [r4, #0]
 800428e:	1821      	adds	r1, r4, r0
 8004290:	428b      	cmp	r3, r1
 8004292:	bf04      	itt	eq
 8004294:	6819      	ldreq	r1, [r3, #0]
 8004296:	685b      	ldreq	r3, [r3, #4]
 8004298:	6063      	str	r3, [r4, #4]
 800429a:	bf04      	itt	eq
 800429c:	1809      	addeq	r1, r1, r0
 800429e:	6021      	streq	r1, [r4, #0]
 80042a0:	6054      	str	r4, [r2, #4]
 80042a2:	e7ca      	b.n	800423a <_free_r+0x22>
 80042a4:	bd38      	pop	{r3, r4, r5, pc}
 80042a6:	bf00      	nop
 80042a8:	200003bc 	.word	0x200003bc

080042ac <malloc>:
 80042ac:	4b02      	ldr	r3, [pc, #8]	@ (80042b8 <malloc+0xc>)
 80042ae:	4601      	mov	r1, r0
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	f000 b825 	b.w	8004300 <_malloc_r>
 80042b6:	bf00      	nop
 80042b8:	20000014 	.word	0x20000014

080042bc <sbrk_aligned>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	4e0f      	ldr	r6, [pc, #60]	@ (80042fc <sbrk_aligned+0x40>)
 80042c0:	460c      	mov	r4, r1
 80042c2:	6831      	ldr	r1, [r6, #0]
 80042c4:	4605      	mov	r5, r0
 80042c6:	b911      	cbnz	r1, 80042ce <sbrk_aligned+0x12>
 80042c8:	f000 fcd4 	bl	8004c74 <_sbrk_r>
 80042cc:	6030      	str	r0, [r6, #0]
 80042ce:	4621      	mov	r1, r4
 80042d0:	4628      	mov	r0, r5
 80042d2:	f000 fccf 	bl	8004c74 <_sbrk_r>
 80042d6:	1c43      	adds	r3, r0, #1
 80042d8:	d103      	bne.n	80042e2 <sbrk_aligned+0x26>
 80042da:	f04f 34ff 	mov.w	r4, #4294967295
 80042de:	4620      	mov	r0, r4
 80042e0:	bd70      	pop	{r4, r5, r6, pc}
 80042e2:	1cc4      	adds	r4, r0, #3
 80042e4:	f024 0403 	bic.w	r4, r4, #3
 80042e8:	42a0      	cmp	r0, r4
 80042ea:	d0f8      	beq.n	80042de <sbrk_aligned+0x22>
 80042ec:	1a21      	subs	r1, r4, r0
 80042ee:	4628      	mov	r0, r5
 80042f0:	f000 fcc0 	bl	8004c74 <_sbrk_r>
 80042f4:	3001      	adds	r0, #1
 80042f6:	d1f2      	bne.n	80042de <sbrk_aligned+0x22>
 80042f8:	e7ef      	b.n	80042da <sbrk_aligned+0x1e>
 80042fa:	bf00      	nop
 80042fc:	200003b8 	.word	0x200003b8

08004300 <_malloc_r>:
 8004300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004304:	1ccd      	adds	r5, r1, #3
 8004306:	f025 0503 	bic.w	r5, r5, #3
 800430a:	3508      	adds	r5, #8
 800430c:	2d0c      	cmp	r5, #12
 800430e:	bf38      	it	cc
 8004310:	250c      	movcc	r5, #12
 8004312:	2d00      	cmp	r5, #0
 8004314:	4606      	mov	r6, r0
 8004316:	db01      	blt.n	800431c <_malloc_r+0x1c>
 8004318:	42a9      	cmp	r1, r5
 800431a:	d904      	bls.n	8004326 <_malloc_r+0x26>
 800431c:	230c      	movs	r3, #12
 800431e:	6033      	str	r3, [r6, #0]
 8004320:	2000      	movs	r0, #0
 8004322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004326:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043fc <_malloc_r+0xfc>
 800432a:	f000 f869 	bl	8004400 <__malloc_lock>
 800432e:	f8d8 3000 	ldr.w	r3, [r8]
 8004332:	461c      	mov	r4, r3
 8004334:	bb44      	cbnz	r4, 8004388 <_malloc_r+0x88>
 8004336:	4629      	mov	r1, r5
 8004338:	4630      	mov	r0, r6
 800433a:	f7ff ffbf 	bl	80042bc <sbrk_aligned>
 800433e:	1c43      	adds	r3, r0, #1
 8004340:	4604      	mov	r4, r0
 8004342:	d158      	bne.n	80043f6 <_malloc_r+0xf6>
 8004344:	f8d8 4000 	ldr.w	r4, [r8]
 8004348:	4627      	mov	r7, r4
 800434a:	2f00      	cmp	r7, #0
 800434c:	d143      	bne.n	80043d6 <_malloc_r+0xd6>
 800434e:	2c00      	cmp	r4, #0
 8004350:	d04b      	beq.n	80043ea <_malloc_r+0xea>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	4639      	mov	r1, r7
 8004356:	4630      	mov	r0, r6
 8004358:	eb04 0903 	add.w	r9, r4, r3
 800435c:	f000 fc8a 	bl	8004c74 <_sbrk_r>
 8004360:	4581      	cmp	r9, r0
 8004362:	d142      	bne.n	80043ea <_malloc_r+0xea>
 8004364:	6821      	ldr	r1, [r4, #0]
 8004366:	1a6d      	subs	r5, r5, r1
 8004368:	4629      	mov	r1, r5
 800436a:	4630      	mov	r0, r6
 800436c:	f7ff ffa6 	bl	80042bc <sbrk_aligned>
 8004370:	3001      	adds	r0, #1
 8004372:	d03a      	beq.n	80043ea <_malloc_r+0xea>
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	442b      	add	r3, r5
 8004378:	6023      	str	r3, [r4, #0]
 800437a:	f8d8 3000 	ldr.w	r3, [r8]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	bb62      	cbnz	r2, 80043dc <_malloc_r+0xdc>
 8004382:	f8c8 7000 	str.w	r7, [r8]
 8004386:	e00f      	b.n	80043a8 <_malloc_r+0xa8>
 8004388:	6822      	ldr	r2, [r4, #0]
 800438a:	1b52      	subs	r2, r2, r5
 800438c:	d420      	bmi.n	80043d0 <_malloc_r+0xd0>
 800438e:	2a0b      	cmp	r2, #11
 8004390:	d917      	bls.n	80043c2 <_malloc_r+0xc2>
 8004392:	1961      	adds	r1, r4, r5
 8004394:	42a3      	cmp	r3, r4
 8004396:	6025      	str	r5, [r4, #0]
 8004398:	bf18      	it	ne
 800439a:	6059      	strne	r1, [r3, #4]
 800439c:	6863      	ldr	r3, [r4, #4]
 800439e:	bf08      	it	eq
 80043a0:	f8c8 1000 	streq.w	r1, [r8]
 80043a4:	5162      	str	r2, [r4, r5]
 80043a6:	604b      	str	r3, [r1, #4]
 80043a8:	4630      	mov	r0, r6
 80043aa:	f000 f82f 	bl	800440c <__malloc_unlock>
 80043ae:	f104 000b 	add.w	r0, r4, #11
 80043b2:	1d23      	adds	r3, r4, #4
 80043b4:	f020 0007 	bic.w	r0, r0, #7
 80043b8:	1ac2      	subs	r2, r0, r3
 80043ba:	bf1c      	itt	ne
 80043bc:	1a1b      	subne	r3, r3, r0
 80043be:	50a3      	strne	r3, [r4, r2]
 80043c0:	e7af      	b.n	8004322 <_malloc_r+0x22>
 80043c2:	6862      	ldr	r2, [r4, #4]
 80043c4:	42a3      	cmp	r3, r4
 80043c6:	bf0c      	ite	eq
 80043c8:	f8c8 2000 	streq.w	r2, [r8]
 80043cc:	605a      	strne	r2, [r3, #4]
 80043ce:	e7eb      	b.n	80043a8 <_malloc_r+0xa8>
 80043d0:	4623      	mov	r3, r4
 80043d2:	6864      	ldr	r4, [r4, #4]
 80043d4:	e7ae      	b.n	8004334 <_malloc_r+0x34>
 80043d6:	463c      	mov	r4, r7
 80043d8:	687f      	ldr	r7, [r7, #4]
 80043da:	e7b6      	b.n	800434a <_malloc_r+0x4a>
 80043dc:	461a      	mov	r2, r3
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	42a3      	cmp	r3, r4
 80043e2:	d1fb      	bne.n	80043dc <_malloc_r+0xdc>
 80043e4:	2300      	movs	r3, #0
 80043e6:	6053      	str	r3, [r2, #4]
 80043e8:	e7de      	b.n	80043a8 <_malloc_r+0xa8>
 80043ea:	230c      	movs	r3, #12
 80043ec:	6033      	str	r3, [r6, #0]
 80043ee:	4630      	mov	r0, r6
 80043f0:	f000 f80c 	bl	800440c <__malloc_unlock>
 80043f4:	e794      	b.n	8004320 <_malloc_r+0x20>
 80043f6:	6005      	str	r5, [r0, #0]
 80043f8:	e7d6      	b.n	80043a8 <_malloc_r+0xa8>
 80043fa:	bf00      	nop
 80043fc:	200003bc 	.word	0x200003bc

08004400 <__malloc_lock>:
 8004400:	4801      	ldr	r0, [pc, #4]	@ (8004408 <__malloc_lock+0x8>)
 8004402:	f7ff b8ba 	b.w	800357a <__retarget_lock_acquire_recursive>
 8004406:	bf00      	nop
 8004408:	200003b4 	.word	0x200003b4

0800440c <__malloc_unlock>:
 800440c:	4801      	ldr	r0, [pc, #4]	@ (8004414 <__malloc_unlock+0x8>)
 800440e:	f7ff b8b5 	b.w	800357c <__retarget_lock_release_recursive>
 8004412:	bf00      	nop
 8004414:	200003b4 	.word	0x200003b4

08004418 <_Balloc>:
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	69c6      	ldr	r6, [r0, #28]
 800441c:	4604      	mov	r4, r0
 800441e:	460d      	mov	r5, r1
 8004420:	b976      	cbnz	r6, 8004440 <_Balloc+0x28>
 8004422:	2010      	movs	r0, #16
 8004424:	f7ff ff42 	bl	80042ac <malloc>
 8004428:	4602      	mov	r2, r0
 800442a:	61e0      	str	r0, [r4, #28]
 800442c:	b920      	cbnz	r0, 8004438 <_Balloc+0x20>
 800442e:	4b18      	ldr	r3, [pc, #96]	@ (8004490 <_Balloc+0x78>)
 8004430:	4818      	ldr	r0, [pc, #96]	@ (8004494 <_Balloc+0x7c>)
 8004432:	216b      	movs	r1, #107	@ 0x6b
 8004434:	f000 fc3c 	bl	8004cb0 <__assert_func>
 8004438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800443c:	6006      	str	r6, [r0, #0]
 800443e:	60c6      	str	r6, [r0, #12]
 8004440:	69e6      	ldr	r6, [r4, #28]
 8004442:	68f3      	ldr	r3, [r6, #12]
 8004444:	b183      	cbz	r3, 8004468 <_Balloc+0x50>
 8004446:	69e3      	ldr	r3, [r4, #28]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800444e:	b9b8      	cbnz	r0, 8004480 <_Balloc+0x68>
 8004450:	2101      	movs	r1, #1
 8004452:	fa01 f605 	lsl.w	r6, r1, r5
 8004456:	1d72      	adds	r2, r6, #5
 8004458:	0092      	lsls	r2, r2, #2
 800445a:	4620      	mov	r0, r4
 800445c:	f000 fc46 	bl	8004cec <_calloc_r>
 8004460:	b160      	cbz	r0, 800447c <_Balloc+0x64>
 8004462:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004466:	e00e      	b.n	8004486 <_Balloc+0x6e>
 8004468:	2221      	movs	r2, #33	@ 0x21
 800446a:	2104      	movs	r1, #4
 800446c:	4620      	mov	r0, r4
 800446e:	f000 fc3d 	bl	8004cec <_calloc_r>
 8004472:	69e3      	ldr	r3, [r4, #28]
 8004474:	60f0      	str	r0, [r6, #12]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e4      	bne.n	8004446 <_Balloc+0x2e>
 800447c:	2000      	movs	r0, #0
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	6802      	ldr	r2, [r0, #0]
 8004482:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004486:	2300      	movs	r3, #0
 8004488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800448c:	e7f7      	b.n	800447e <_Balloc+0x66>
 800448e:	bf00      	nop
 8004490:	08005331 	.word	0x08005331
 8004494:	080053b1 	.word	0x080053b1

08004498 <_Bfree>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	69c6      	ldr	r6, [r0, #28]
 800449c:	4605      	mov	r5, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	b976      	cbnz	r6, 80044c0 <_Bfree+0x28>
 80044a2:	2010      	movs	r0, #16
 80044a4:	f7ff ff02 	bl	80042ac <malloc>
 80044a8:	4602      	mov	r2, r0
 80044aa:	61e8      	str	r0, [r5, #28]
 80044ac:	b920      	cbnz	r0, 80044b8 <_Bfree+0x20>
 80044ae:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <_Bfree+0x3c>)
 80044b0:	4809      	ldr	r0, [pc, #36]	@ (80044d8 <_Bfree+0x40>)
 80044b2:	218f      	movs	r1, #143	@ 0x8f
 80044b4:	f000 fbfc 	bl	8004cb0 <__assert_func>
 80044b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80044bc:	6006      	str	r6, [r0, #0]
 80044be:	60c6      	str	r6, [r0, #12]
 80044c0:	b13c      	cbz	r4, 80044d2 <_Bfree+0x3a>
 80044c2:	69eb      	ldr	r3, [r5, #28]
 80044c4:	6862      	ldr	r2, [r4, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80044cc:	6021      	str	r1, [r4, #0]
 80044ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80044d2:	bd70      	pop	{r4, r5, r6, pc}
 80044d4:	08005331 	.word	0x08005331
 80044d8:	080053b1 	.word	0x080053b1

080044dc <__multadd>:
 80044dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e0:	690d      	ldr	r5, [r1, #16]
 80044e2:	4607      	mov	r7, r0
 80044e4:	460c      	mov	r4, r1
 80044e6:	461e      	mov	r6, r3
 80044e8:	f101 0c14 	add.w	ip, r1, #20
 80044ec:	2000      	movs	r0, #0
 80044ee:	f8dc 3000 	ldr.w	r3, [ip]
 80044f2:	b299      	uxth	r1, r3
 80044f4:	fb02 6101 	mla	r1, r2, r1, r6
 80044f8:	0c1e      	lsrs	r6, r3, #16
 80044fa:	0c0b      	lsrs	r3, r1, #16
 80044fc:	fb02 3306 	mla	r3, r2, r6, r3
 8004500:	b289      	uxth	r1, r1
 8004502:	3001      	adds	r0, #1
 8004504:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004508:	4285      	cmp	r5, r0
 800450a:	f84c 1b04 	str.w	r1, [ip], #4
 800450e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004512:	dcec      	bgt.n	80044ee <__multadd+0x12>
 8004514:	b30e      	cbz	r6, 800455a <__multadd+0x7e>
 8004516:	68a3      	ldr	r3, [r4, #8]
 8004518:	42ab      	cmp	r3, r5
 800451a:	dc19      	bgt.n	8004550 <__multadd+0x74>
 800451c:	6861      	ldr	r1, [r4, #4]
 800451e:	4638      	mov	r0, r7
 8004520:	3101      	adds	r1, #1
 8004522:	f7ff ff79 	bl	8004418 <_Balloc>
 8004526:	4680      	mov	r8, r0
 8004528:	b928      	cbnz	r0, 8004536 <__multadd+0x5a>
 800452a:	4602      	mov	r2, r0
 800452c:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <__multadd+0x84>)
 800452e:	480d      	ldr	r0, [pc, #52]	@ (8004564 <__multadd+0x88>)
 8004530:	21ba      	movs	r1, #186	@ 0xba
 8004532:	f000 fbbd 	bl	8004cb0 <__assert_func>
 8004536:	6922      	ldr	r2, [r4, #16]
 8004538:	3202      	adds	r2, #2
 800453a:	f104 010c 	add.w	r1, r4, #12
 800453e:	0092      	lsls	r2, r2, #2
 8004540:	300c      	adds	r0, #12
 8004542:	f000 fba7 	bl	8004c94 <memcpy>
 8004546:	4621      	mov	r1, r4
 8004548:	4638      	mov	r0, r7
 800454a:	f7ff ffa5 	bl	8004498 <_Bfree>
 800454e:	4644      	mov	r4, r8
 8004550:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004554:	3501      	adds	r5, #1
 8004556:	615e      	str	r6, [r3, #20]
 8004558:	6125      	str	r5, [r4, #16]
 800455a:	4620      	mov	r0, r4
 800455c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004560:	080053a0 	.word	0x080053a0
 8004564:	080053b1 	.word	0x080053b1

08004568 <__hi0bits>:
 8004568:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800456c:	4603      	mov	r3, r0
 800456e:	bf36      	itet	cc
 8004570:	0403      	lslcc	r3, r0, #16
 8004572:	2000      	movcs	r0, #0
 8004574:	2010      	movcc	r0, #16
 8004576:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800457a:	bf3c      	itt	cc
 800457c:	021b      	lslcc	r3, r3, #8
 800457e:	3008      	addcc	r0, #8
 8004580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004584:	bf3c      	itt	cc
 8004586:	011b      	lslcc	r3, r3, #4
 8004588:	3004      	addcc	r0, #4
 800458a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800458e:	bf3c      	itt	cc
 8004590:	009b      	lslcc	r3, r3, #2
 8004592:	3002      	addcc	r0, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	db05      	blt.n	80045a4 <__hi0bits+0x3c>
 8004598:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800459c:	f100 0001 	add.w	r0, r0, #1
 80045a0:	bf08      	it	eq
 80045a2:	2020      	moveq	r0, #32
 80045a4:	4770      	bx	lr

080045a6 <__lo0bits>:
 80045a6:	6803      	ldr	r3, [r0, #0]
 80045a8:	4602      	mov	r2, r0
 80045aa:	f013 0007 	ands.w	r0, r3, #7
 80045ae:	d00b      	beq.n	80045c8 <__lo0bits+0x22>
 80045b0:	07d9      	lsls	r1, r3, #31
 80045b2:	d421      	bmi.n	80045f8 <__lo0bits+0x52>
 80045b4:	0798      	lsls	r0, r3, #30
 80045b6:	bf49      	itett	mi
 80045b8:	085b      	lsrmi	r3, r3, #1
 80045ba:	089b      	lsrpl	r3, r3, #2
 80045bc:	2001      	movmi	r0, #1
 80045be:	6013      	strmi	r3, [r2, #0]
 80045c0:	bf5c      	itt	pl
 80045c2:	6013      	strpl	r3, [r2, #0]
 80045c4:	2002      	movpl	r0, #2
 80045c6:	4770      	bx	lr
 80045c8:	b299      	uxth	r1, r3
 80045ca:	b909      	cbnz	r1, 80045d0 <__lo0bits+0x2a>
 80045cc:	0c1b      	lsrs	r3, r3, #16
 80045ce:	2010      	movs	r0, #16
 80045d0:	b2d9      	uxtb	r1, r3
 80045d2:	b909      	cbnz	r1, 80045d8 <__lo0bits+0x32>
 80045d4:	3008      	adds	r0, #8
 80045d6:	0a1b      	lsrs	r3, r3, #8
 80045d8:	0719      	lsls	r1, r3, #28
 80045da:	bf04      	itt	eq
 80045dc:	091b      	lsreq	r3, r3, #4
 80045de:	3004      	addeq	r0, #4
 80045e0:	0799      	lsls	r1, r3, #30
 80045e2:	bf04      	itt	eq
 80045e4:	089b      	lsreq	r3, r3, #2
 80045e6:	3002      	addeq	r0, #2
 80045e8:	07d9      	lsls	r1, r3, #31
 80045ea:	d403      	bmi.n	80045f4 <__lo0bits+0x4e>
 80045ec:	085b      	lsrs	r3, r3, #1
 80045ee:	f100 0001 	add.w	r0, r0, #1
 80045f2:	d003      	beq.n	80045fc <__lo0bits+0x56>
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	4770      	bx	lr
 80045f8:	2000      	movs	r0, #0
 80045fa:	4770      	bx	lr
 80045fc:	2020      	movs	r0, #32
 80045fe:	4770      	bx	lr

08004600 <__i2b>:
 8004600:	b510      	push	{r4, lr}
 8004602:	460c      	mov	r4, r1
 8004604:	2101      	movs	r1, #1
 8004606:	f7ff ff07 	bl	8004418 <_Balloc>
 800460a:	4602      	mov	r2, r0
 800460c:	b928      	cbnz	r0, 800461a <__i2b+0x1a>
 800460e:	4b05      	ldr	r3, [pc, #20]	@ (8004624 <__i2b+0x24>)
 8004610:	4805      	ldr	r0, [pc, #20]	@ (8004628 <__i2b+0x28>)
 8004612:	f240 1145 	movw	r1, #325	@ 0x145
 8004616:	f000 fb4b 	bl	8004cb0 <__assert_func>
 800461a:	2301      	movs	r3, #1
 800461c:	6144      	str	r4, [r0, #20]
 800461e:	6103      	str	r3, [r0, #16]
 8004620:	bd10      	pop	{r4, pc}
 8004622:	bf00      	nop
 8004624:	080053a0 	.word	0x080053a0
 8004628:	080053b1 	.word	0x080053b1

0800462c <__multiply>:
 800462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004630:	4614      	mov	r4, r2
 8004632:	690a      	ldr	r2, [r1, #16]
 8004634:	6923      	ldr	r3, [r4, #16]
 8004636:	429a      	cmp	r2, r3
 8004638:	bfa8      	it	ge
 800463a:	4623      	movge	r3, r4
 800463c:	460f      	mov	r7, r1
 800463e:	bfa4      	itt	ge
 8004640:	460c      	movge	r4, r1
 8004642:	461f      	movge	r7, r3
 8004644:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004648:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800464c:	68a3      	ldr	r3, [r4, #8]
 800464e:	6861      	ldr	r1, [r4, #4]
 8004650:	eb0a 0609 	add.w	r6, sl, r9
 8004654:	42b3      	cmp	r3, r6
 8004656:	b085      	sub	sp, #20
 8004658:	bfb8      	it	lt
 800465a:	3101      	addlt	r1, #1
 800465c:	f7ff fedc 	bl	8004418 <_Balloc>
 8004660:	b930      	cbnz	r0, 8004670 <__multiply+0x44>
 8004662:	4602      	mov	r2, r0
 8004664:	4b44      	ldr	r3, [pc, #272]	@ (8004778 <__multiply+0x14c>)
 8004666:	4845      	ldr	r0, [pc, #276]	@ (800477c <__multiply+0x150>)
 8004668:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800466c:	f000 fb20 	bl	8004cb0 <__assert_func>
 8004670:	f100 0514 	add.w	r5, r0, #20
 8004674:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004678:	462b      	mov	r3, r5
 800467a:	2200      	movs	r2, #0
 800467c:	4543      	cmp	r3, r8
 800467e:	d321      	bcc.n	80046c4 <__multiply+0x98>
 8004680:	f107 0114 	add.w	r1, r7, #20
 8004684:	f104 0214 	add.w	r2, r4, #20
 8004688:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800468c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004690:	9302      	str	r3, [sp, #8]
 8004692:	1b13      	subs	r3, r2, r4
 8004694:	3b15      	subs	r3, #21
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	3304      	adds	r3, #4
 800469c:	f104 0715 	add.w	r7, r4, #21
 80046a0:	42ba      	cmp	r2, r7
 80046a2:	bf38      	it	cc
 80046a4:	2304      	movcc	r3, #4
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	9b02      	ldr	r3, [sp, #8]
 80046aa:	9103      	str	r1, [sp, #12]
 80046ac:	428b      	cmp	r3, r1
 80046ae:	d80c      	bhi.n	80046ca <__multiply+0x9e>
 80046b0:	2e00      	cmp	r6, #0
 80046b2:	dd03      	ble.n	80046bc <__multiply+0x90>
 80046b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <__multiply+0x148>
 80046bc:	6106      	str	r6, [r0, #16]
 80046be:	b005      	add	sp, #20
 80046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c4:	f843 2b04 	str.w	r2, [r3], #4
 80046c8:	e7d8      	b.n	800467c <__multiply+0x50>
 80046ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80046ce:	f1ba 0f00 	cmp.w	sl, #0
 80046d2:	d024      	beq.n	800471e <__multiply+0xf2>
 80046d4:	f104 0e14 	add.w	lr, r4, #20
 80046d8:	46a9      	mov	r9, r5
 80046da:	f04f 0c00 	mov.w	ip, #0
 80046de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80046e2:	f8d9 3000 	ldr.w	r3, [r9]
 80046e6:	fa1f fb87 	uxth.w	fp, r7
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80046f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80046f4:	f8d9 7000 	ldr.w	r7, [r9]
 80046f8:	4463      	add	r3, ip
 80046fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80046fe:	fb0a c70b 	mla	r7, sl, fp, ip
 8004702:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004706:	b29b      	uxth	r3, r3
 8004708:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800470c:	4572      	cmp	r2, lr
 800470e:	f849 3b04 	str.w	r3, [r9], #4
 8004712:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004716:	d8e2      	bhi.n	80046de <__multiply+0xb2>
 8004718:	9b01      	ldr	r3, [sp, #4]
 800471a:	f845 c003 	str.w	ip, [r5, r3]
 800471e:	9b03      	ldr	r3, [sp, #12]
 8004720:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004724:	3104      	adds	r1, #4
 8004726:	f1b9 0f00 	cmp.w	r9, #0
 800472a:	d021      	beq.n	8004770 <__multiply+0x144>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	f104 0c14 	add.w	ip, r4, #20
 8004732:	46ae      	mov	lr, r5
 8004734:	f04f 0a00 	mov.w	sl, #0
 8004738:	f8bc b000 	ldrh.w	fp, [ip]
 800473c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004740:	fb09 770b 	mla	r7, r9, fp, r7
 8004744:	4457      	add	r7, sl
 8004746:	b29b      	uxth	r3, r3
 8004748:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800474c:	f84e 3b04 	str.w	r3, [lr], #4
 8004750:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004758:	f8be 3000 	ldrh.w	r3, [lr]
 800475c:	fb09 330a 	mla	r3, r9, sl, r3
 8004760:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004764:	4562      	cmp	r2, ip
 8004766:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800476a:	d8e5      	bhi.n	8004738 <__multiply+0x10c>
 800476c:	9f01      	ldr	r7, [sp, #4]
 800476e:	51eb      	str	r3, [r5, r7]
 8004770:	3504      	adds	r5, #4
 8004772:	e799      	b.n	80046a8 <__multiply+0x7c>
 8004774:	3e01      	subs	r6, #1
 8004776:	e79b      	b.n	80046b0 <__multiply+0x84>
 8004778:	080053a0 	.word	0x080053a0
 800477c:	080053b1 	.word	0x080053b1

08004780 <__pow5mult>:
 8004780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004784:	4615      	mov	r5, r2
 8004786:	f012 0203 	ands.w	r2, r2, #3
 800478a:	4607      	mov	r7, r0
 800478c:	460e      	mov	r6, r1
 800478e:	d007      	beq.n	80047a0 <__pow5mult+0x20>
 8004790:	4c25      	ldr	r4, [pc, #148]	@ (8004828 <__pow5mult+0xa8>)
 8004792:	3a01      	subs	r2, #1
 8004794:	2300      	movs	r3, #0
 8004796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800479a:	f7ff fe9f 	bl	80044dc <__multadd>
 800479e:	4606      	mov	r6, r0
 80047a0:	10ad      	asrs	r5, r5, #2
 80047a2:	d03d      	beq.n	8004820 <__pow5mult+0xa0>
 80047a4:	69fc      	ldr	r4, [r7, #28]
 80047a6:	b97c      	cbnz	r4, 80047c8 <__pow5mult+0x48>
 80047a8:	2010      	movs	r0, #16
 80047aa:	f7ff fd7f 	bl	80042ac <malloc>
 80047ae:	4602      	mov	r2, r0
 80047b0:	61f8      	str	r0, [r7, #28]
 80047b2:	b928      	cbnz	r0, 80047c0 <__pow5mult+0x40>
 80047b4:	4b1d      	ldr	r3, [pc, #116]	@ (800482c <__pow5mult+0xac>)
 80047b6:	481e      	ldr	r0, [pc, #120]	@ (8004830 <__pow5mult+0xb0>)
 80047b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80047bc:	f000 fa78 	bl	8004cb0 <__assert_func>
 80047c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80047c4:	6004      	str	r4, [r0, #0]
 80047c6:	60c4      	str	r4, [r0, #12]
 80047c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80047cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80047d0:	b94c      	cbnz	r4, 80047e6 <__pow5mult+0x66>
 80047d2:	f240 2171 	movw	r1, #625	@ 0x271
 80047d6:	4638      	mov	r0, r7
 80047d8:	f7ff ff12 	bl	8004600 <__i2b>
 80047dc:	2300      	movs	r3, #0
 80047de:	f8c8 0008 	str.w	r0, [r8, #8]
 80047e2:	4604      	mov	r4, r0
 80047e4:	6003      	str	r3, [r0, #0]
 80047e6:	f04f 0900 	mov.w	r9, #0
 80047ea:	07eb      	lsls	r3, r5, #31
 80047ec:	d50a      	bpl.n	8004804 <__pow5mult+0x84>
 80047ee:	4631      	mov	r1, r6
 80047f0:	4622      	mov	r2, r4
 80047f2:	4638      	mov	r0, r7
 80047f4:	f7ff ff1a 	bl	800462c <__multiply>
 80047f8:	4631      	mov	r1, r6
 80047fa:	4680      	mov	r8, r0
 80047fc:	4638      	mov	r0, r7
 80047fe:	f7ff fe4b 	bl	8004498 <_Bfree>
 8004802:	4646      	mov	r6, r8
 8004804:	106d      	asrs	r5, r5, #1
 8004806:	d00b      	beq.n	8004820 <__pow5mult+0xa0>
 8004808:	6820      	ldr	r0, [r4, #0]
 800480a:	b938      	cbnz	r0, 800481c <__pow5mult+0x9c>
 800480c:	4622      	mov	r2, r4
 800480e:	4621      	mov	r1, r4
 8004810:	4638      	mov	r0, r7
 8004812:	f7ff ff0b 	bl	800462c <__multiply>
 8004816:	6020      	str	r0, [r4, #0]
 8004818:	f8c0 9000 	str.w	r9, [r0]
 800481c:	4604      	mov	r4, r0
 800481e:	e7e4      	b.n	80047ea <__pow5mult+0x6a>
 8004820:	4630      	mov	r0, r6
 8004822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004826:	bf00      	nop
 8004828:	0800540c 	.word	0x0800540c
 800482c:	08005331 	.word	0x08005331
 8004830:	080053b1 	.word	0x080053b1

08004834 <__lshift>:
 8004834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004838:	460c      	mov	r4, r1
 800483a:	6849      	ldr	r1, [r1, #4]
 800483c:	6923      	ldr	r3, [r4, #16]
 800483e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004842:	68a3      	ldr	r3, [r4, #8]
 8004844:	4607      	mov	r7, r0
 8004846:	4691      	mov	r9, r2
 8004848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800484c:	f108 0601 	add.w	r6, r8, #1
 8004850:	42b3      	cmp	r3, r6
 8004852:	db0b      	blt.n	800486c <__lshift+0x38>
 8004854:	4638      	mov	r0, r7
 8004856:	f7ff fddf 	bl	8004418 <_Balloc>
 800485a:	4605      	mov	r5, r0
 800485c:	b948      	cbnz	r0, 8004872 <__lshift+0x3e>
 800485e:	4602      	mov	r2, r0
 8004860:	4b28      	ldr	r3, [pc, #160]	@ (8004904 <__lshift+0xd0>)
 8004862:	4829      	ldr	r0, [pc, #164]	@ (8004908 <__lshift+0xd4>)
 8004864:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004868:	f000 fa22 	bl	8004cb0 <__assert_func>
 800486c:	3101      	adds	r1, #1
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	e7ee      	b.n	8004850 <__lshift+0x1c>
 8004872:	2300      	movs	r3, #0
 8004874:	f100 0114 	add.w	r1, r0, #20
 8004878:	f100 0210 	add.w	r2, r0, #16
 800487c:	4618      	mov	r0, r3
 800487e:	4553      	cmp	r3, sl
 8004880:	db33      	blt.n	80048ea <__lshift+0xb6>
 8004882:	6920      	ldr	r0, [r4, #16]
 8004884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004888:	f104 0314 	add.w	r3, r4, #20
 800488c:	f019 091f 	ands.w	r9, r9, #31
 8004890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004898:	d02b      	beq.n	80048f2 <__lshift+0xbe>
 800489a:	f1c9 0e20 	rsb	lr, r9, #32
 800489e:	468a      	mov	sl, r1
 80048a0:	2200      	movs	r2, #0
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	fa00 f009 	lsl.w	r0, r0, r9
 80048a8:	4310      	orrs	r0, r2
 80048aa:	f84a 0b04 	str.w	r0, [sl], #4
 80048ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80048b2:	459c      	cmp	ip, r3
 80048b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80048b8:	d8f3      	bhi.n	80048a2 <__lshift+0x6e>
 80048ba:	ebac 0304 	sub.w	r3, ip, r4
 80048be:	3b15      	subs	r3, #21
 80048c0:	f023 0303 	bic.w	r3, r3, #3
 80048c4:	3304      	adds	r3, #4
 80048c6:	f104 0015 	add.w	r0, r4, #21
 80048ca:	4584      	cmp	ip, r0
 80048cc:	bf38      	it	cc
 80048ce:	2304      	movcc	r3, #4
 80048d0:	50ca      	str	r2, [r1, r3]
 80048d2:	b10a      	cbz	r2, 80048d8 <__lshift+0xa4>
 80048d4:	f108 0602 	add.w	r6, r8, #2
 80048d8:	3e01      	subs	r6, #1
 80048da:	4638      	mov	r0, r7
 80048dc:	612e      	str	r6, [r5, #16]
 80048de:	4621      	mov	r1, r4
 80048e0:	f7ff fdda 	bl	8004498 <_Bfree>
 80048e4:	4628      	mov	r0, r5
 80048e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80048ee:	3301      	adds	r3, #1
 80048f0:	e7c5      	b.n	800487e <__lshift+0x4a>
 80048f2:	3904      	subs	r1, #4
 80048f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80048fc:	459c      	cmp	ip, r3
 80048fe:	d8f9      	bhi.n	80048f4 <__lshift+0xc0>
 8004900:	e7ea      	b.n	80048d8 <__lshift+0xa4>
 8004902:	bf00      	nop
 8004904:	080053a0 	.word	0x080053a0
 8004908:	080053b1 	.word	0x080053b1

0800490c <__mcmp>:
 800490c:	690a      	ldr	r2, [r1, #16]
 800490e:	4603      	mov	r3, r0
 8004910:	6900      	ldr	r0, [r0, #16]
 8004912:	1a80      	subs	r0, r0, r2
 8004914:	b530      	push	{r4, r5, lr}
 8004916:	d10e      	bne.n	8004936 <__mcmp+0x2a>
 8004918:	3314      	adds	r3, #20
 800491a:	3114      	adds	r1, #20
 800491c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800492c:	4295      	cmp	r5, r2
 800492e:	d003      	beq.n	8004938 <__mcmp+0x2c>
 8004930:	d205      	bcs.n	800493e <__mcmp+0x32>
 8004932:	f04f 30ff 	mov.w	r0, #4294967295
 8004936:	bd30      	pop	{r4, r5, pc}
 8004938:	42a3      	cmp	r3, r4
 800493a:	d3f3      	bcc.n	8004924 <__mcmp+0x18>
 800493c:	e7fb      	b.n	8004936 <__mcmp+0x2a>
 800493e:	2001      	movs	r0, #1
 8004940:	e7f9      	b.n	8004936 <__mcmp+0x2a>
	...

08004944 <__mdiff>:
 8004944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004948:	4689      	mov	r9, r1
 800494a:	4606      	mov	r6, r0
 800494c:	4611      	mov	r1, r2
 800494e:	4648      	mov	r0, r9
 8004950:	4614      	mov	r4, r2
 8004952:	f7ff ffdb 	bl	800490c <__mcmp>
 8004956:	1e05      	subs	r5, r0, #0
 8004958:	d112      	bne.n	8004980 <__mdiff+0x3c>
 800495a:	4629      	mov	r1, r5
 800495c:	4630      	mov	r0, r6
 800495e:	f7ff fd5b 	bl	8004418 <_Balloc>
 8004962:	4602      	mov	r2, r0
 8004964:	b928      	cbnz	r0, 8004972 <__mdiff+0x2e>
 8004966:	4b3f      	ldr	r3, [pc, #252]	@ (8004a64 <__mdiff+0x120>)
 8004968:	f240 2137 	movw	r1, #567	@ 0x237
 800496c:	483e      	ldr	r0, [pc, #248]	@ (8004a68 <__mdiff+0x124>)
 800496e:	f000 f99f 	bl	8004cb0 <__assert_func>
 8004972:	2301      	movs	r3, #1
 8004974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004978:	4610      	mov	r0, r2
 800497a:	b003      	add	sp, #12
 800497c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004980:	bfbc      	itt	lt
 8004982:	464b      	movlt	r3, r9
 8004984:	46a1      	movlt	r9, r4
 8004986:	4630      	mov	r0, r6
 8004988:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800498c:	bfba      	itte	lt
 800498e:	461c      	movlt	r4, r3
 8004990:	2501      	movlt	r5, #1
 8004992:	2500      	movge	r5, #0
 8004994:	f7ff fd40 	bl	8004418 <_Balloc>
 8004998:	4602      	mov	r2, r0
 800499a:	b918      	cbnz	r0, 80049a4 <__mdiff+0x60>
 800499c:	4b31      	ldr	r3, [pc, #196]	@ (8004a64 <__mdiff+0x120>)
 800499e:	f240 2145 	movw	r1, #581	@ 0x245
 80049a2:	e7e3      	b.n	800496c <__mdiff+0x28>
 80049a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80049a8:	6926      	ldr	r6, [r4, #16]
 80049aa:	60c5      	str	r5, [r0, #12]
 80049ac:	f109 0310 	add.w	r3, r9, #16
 80049b0:	f109 0514 	add.w	r5, r9, #20
 80049b4:	f104 0e14 	add.w	lr, r4, #20
 80049b8:	f100 0b14 	add.w	fp, r0, #20
 80049bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80049c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80049c4:	9301      	str	r3, [sp, #4]
 80049c6:	46d9      	mov	r9, fp
 80049c8:	f04f 0c00 	mov.w	ip, #0
 80049cc:	9b01      	ldr	r3, [sp, #4]
 80049ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80049d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	fa1f f38a 	uxth.w	r3, sl
 80049dc:	4619      	mov	r1, r3
 80049de:	b283      	uxth	r3, r0
 80049e0:	1acb      	subs	r3, r1, r3
 80049e2:	0c00      	lsrs	r0, r0, #16
 80049e4:	4463      	add	r3, ip
 80049e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80049ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80049f4:	4576      	cmp	r6, lr
 80049f6:	f849 3b04 	str.w	r3, [r9], #4
 80049fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80049fe:	d8e5      	bhi.n	80049cc <__mdiff+0x88>
 8004a00:	1b33      	subs	r3, r6, r4
 8004a02:	3b15      	subs	r3, #21
 8004a04:	f023 0303 	bic.w	r3, r3, #3
 8004a08:	3415      	adds	r4, #21
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	42a6      	cmp	r6, r4
 8004a0e:	bf38      	it	cc
 8004a10:	2304      	movcc	r3, #4
 8004a12:	441d      	add	r5, r3
 8004a14:	445b      	add	r3, fp
 8004a16:	461e      	mov	r6, r3
 8004a18:	462c      	mov	r4, r5
 8004a1a:	4544      	cmp	r4, r8
 8004a1c:	d30e      	bcc.n	8004a3c <__mdiff+0xf8>
 8004a1e:	f108 0103 	add.w	r1, r8, #3
 8004a22:	1b49      	subs	r1, r1, r5
 8004a24:	f021 0103 	bic.w	r1, r1, #3
 8004a28:	3d03      	subs	r5, #3
 8004a2a:	45a8      	cmp	r8, r5
 8004a2c:	bf38      	it	cc
 8004a2e:	2100      	movcc	r1, #0
 8004a30:	440b      	add	r3, r1
 8004a32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004a36:	b191      	cbz	r1, 8004a5e <__mdiff+0x11a>
 8004a38:	6117      	str	r7, [r2, #16]
 8004a3a:	e79d      	b.n	8004978 <__mdiff+0x34>
 8004a3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004a40:	46e6      	mov	lr, ip
 8004a42:	0c08      	lsrs	r0, r1, #16
 8004a44:	fa1c fc81 	uxtah	ip, ip, r1
 8004a48:	4471      	add	r1, lr
 8004a4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004a4e:	b289      	uxth	r1, r1
 8004a50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004a54:	f846 1b04 	str.w	r1, [r6], #4
 8004a58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004a5c:	e7dd      	b.n	8004a1a <__mdiff+0xd6>
 8004a5e:	3f01      	subs	r7, #1
 8004a60:	e7e7      	b.n	8004a32 <__mdiff+0xee>
 8004a62:	bf00      	nop
 8004a64:	080053a0 	.word	0x080053a0
 8004a68:	080053b1 	.word	0x080053b1

08004a6c <__d2b>:
 8004a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004a70:	460f      	mov	r7, r1
 8004a72:	2101      	movs	r1, #1
 8004a74:	ec59 8b10 	vmov	r8, r9, d0
 8004a78:	4616      	mov	r6, r2
 8004a7a:	f7ff fccd 	bl	8004418 <_Balloc>
 8004a7e:	4604      	mov	r4, r0
 8004a80:	b930      	cbnz	r0, 8004a90 <__d2b+0x24>
 8004a82:	4602      	mov	r2, r0
 8004a84:	4b23      	ldr	r3, [pc, #140]	@ (8004b14 <__d2b+0xa8>)
 8004a86:	4824      	ldr	r0, [pc, #144]	@ (8004b18 <__d2b+0xac>)
 8004a88:	f240 310f 	movw	r1, #783	@ 0x30f
 8004a8c:	f000 f910 	bl	8004cb0 <__assert_func>
 8004a90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004a94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a98:	b10d      	cbz	r5, 8004a9e <__d2b+0x32>
 8004a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	f1b8 0300 	subs.w	r3, r8, #0
 8004aa4:	d023      	beq.n	8004aee <__d2b+0x82>
 8004aa6:	4668      	mov	r0, sp
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	f7ff fd7c 	bl	80045a6 <__lo0bits>
 8004aae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004ab2:	b1d0      	cbz	r0, 8004aea <__d2b+0x7e>
 8004ab4:	f1c0 0320 	rsb	r3, r0, #32
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	430b      	orrs	r3, r1
 8004abe:	40c2      	lsrs	r2, r0
 8004ac0:	6163      	str	r3, [r4, #20]
 8004ac2:	9201      	str	r2, [sp, #4]
 8004ac4:	9b01      	ldr	r3, [sp, #4]
 8004ac6:	61a3      	str	r3, [r4, #24]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf0c      	ite	eq
 8004acc:	2201      	moveq	r2, #1
 8004ace:	2202      	movne	r2, #2
 8004ad0:	6122      	str	r2, [r4, #16]
 8004ad2:	b1a5      	cbz	r5, 8004afe <__d2b+0x92>
 8004ad4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004ad8:	4405      	add	r5, r0
 8004ada:	603d      	str	r5, [r7, #0]
 8004adc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004ae0:	6030      	str	r0, [r6, #0]
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	b003      	add	sp, #12
 8004ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004aea:	6161      	str	r1, [r4, #20]
 8004aec:	e7ea      	b.n	8004ac4 <__d2b+0x58>
 8004aee:	a801      	add	r0, sp, #4
 8004af0:	f7ff fd59 	bl	80045a6 <__lo0bits>
 8004af4:	9b01      	ldr	r3, [sp, #4]
 8004af6:	6163      	str	r3, [r4, #20]
 8004af8:	3020      	adds	r0, #32
 8004afa:	2201      	movs	r2, #1
 8004afc:	e7e8      	b.n	8004ad0 <__d2b+0x64>
 8004afe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004b02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004b06:	6038      	str	r0, [r7, #0]
 8004b08:	6918      	ldr	r0, [r3, #16]
 8004b0a:	f7ff fd2d 	bl	8004568 <__hi0bits>
 8004b0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004b12:	e7e5      	b.n	8004ae0 <__d2b+0x74>
 8004b14:	080053a0 	.word	0x080053a0
 8004b18:	080053b1 	.word	0x080053b1

08004b1c <__sflush_r>:
 8004b1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b24:	0716      	lsls	r6, r2, #28
 8004b26:	4605      	mov	r5, r0
 8004b28:	460c      	mov	r4, r1
 8004b2a:	d454      	bmi.n	8004bd6 <__sflush_r+0xba>
 8004b2c:	684b      	ldr	r3, [r1, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	dc02      	bgt.n	8004b38 <__sflush_r+0x1c>
 8004b32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	dd48      	ble.n	8004bca <__sflush_r+0xae>
 8004b38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b3a:	2e00      	cmp	r6, #0
 8004b3c:	d045      	beq.n	8004bca <__sflush_r+0xae>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b44:	682f      	ldr	r7, [r5, #0]
 8004b46:	6a21      	ldr	r1, [r4, #32]
 8004b48:	602b      	str	r3, [r5, #0]
 8004b4a:	d030      	beq.n	8004bae <__sflush_r+0x92>
 8004b4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b4e:	89a3      	ldrh	r3, [r4, #12]
 8004b50:	0759      	lsls	r1, r3, #29
 8004b52:	d505      	bpl.n	8004b60 <__sflush_r+0x44>
 8004b54:	6863      	ldr	r3, [r4, #4]
 8004b56:	1ad2      	subs	r2, r2, r3
 8004b58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b5a:	b10b      	cbz	r3, 8004b60 <__sflush_r+0x44>
 8004b5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b5e:	1ad2      	subs	r2, r2, r3
 8004b60:	2300      	movs	r3, #0
 8004b62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b64:	6a21      	ldr	r1, [r4, #32]
 8004b66:	4628      	mov	r0, r5
 8004b68:	47b0      	blx	r6
 8004b6a:	1c43      	adds	r3, r0, #1
 8004b6c:	89a3      	ldrh	r3, [r4, #12]
 8004b6e:	d106      	bne.n	8004b7e <__sflush_r+0x62>
 8004b70:	6829      	ldr	r1, [r5, #0]
 8004b72:	291d      	cmp	r1, #29
 8004b74:	d82b      	bhi.n	8004bce <__sflush_r+0xb2>
 8004b76:	4a2a      	ldr	r2, [pc, #168]	@ (8004c20 <__sflush_r+0x104>)
 8004b78:	410a      	asrs	r2, r1
 8004b7a:	07d6      	lsls	r6, r2, #31
 8004b7c:	d427      	bmi.n	8004bce <__sflush_r+0xb2>
 8004b7e:	2200      	movs	r2, #0
 8004b80:	6062      	str	r2, [r4, #4]
 8004b82:	04d9      	lsls	r1, r3, #19
 8004b84:	6922      	ldr	r2, [r4, #16]
 8004b86:	6022      	str	r2, [r4, #0]
 8004b88:	d504      	bpl.n	8004b94 <__sflush_r+0x78>
 8004b8a:	1c42      	adds	r2, r0, #1
 8004b8c:	d101      	bne.n	8004b92 <__sflush_r+0x76>
 8004b8e:	682b      	ldr	r3, [r5, #0]
 8004b90:	b903      	cbnz	r3, 8004b94 <__sflush_r+0x78>
 8004b92:	6560      	str	r0, [r4, #84]	@ 0x54
 8004b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b96:	602f      	str	r7, [r5, #0]
 8004b98:	b1b9      	cbz	r1, 8004bca <__sflush_r+0xae>
 8004b9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b9e:	4299      	cmp	r1, r3
 8004ba0:	d002      	beq.n	8004ba8 <__sflush_r+0x8c>
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f7ff fb38 	bl	8004218 <_free_r>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bac:	e00d      	b.n	8004bca <__sflush_r+0xae>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	47b0      	blx	r6
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	1c50      	adds	r0, r2, #1
 8004bb8:	d1c9      	bne.n	8004b4e <__sflush_r+0x32>
 8004bba:	682b      	ldr	r3, [r5, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0c6      	beq.n	8004b4e <__sflush_r+0x32>
 8004bc0:	2b1d      	cmp	r3, #29
 8004bc2:	d001      	beq.n	8004bc8 <__sflush_r+0xac>
 8004bc4:	2b16      	cmp	r3, #22
 8004bc6:	d11e      	bne.n	8004c06 <__sflush_r+0xea>
 8004bc8:	602f      	str	r7, [r5, #0]
 8004bca:	2000      	movs	r0, #0
 8004bcc:	e022      	b.n	8004c14 <__sflush_r+0xf8>
 8004bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bd2:	b21b      	sxth	r3, r3
 8004bd4:	e01b      	b.n	8004c0e <__sflush_r+0xf2>
 8004bd6:	690f      	ldr	r7, [r1, #16]
 8004bd8:	2f00      	cmp	r7, #0
 8004bda:	d0f6      	beq.n	8004bca <__sflush_r+0xae>
 8004bdc:	0793      	lsls	r3, r2, #30
 8004bde:	680e      	ldr	r6, [r1, #0]
 8004be0:	bf08      	it	eq
 8004be2:	694b      	ldreq	r3, [r1, #20]
 8004be4:	600f      	str	r7, [r1, #0]
 8004be6:	bf18      	it	ne
 8004be8:	2300      	movne	r3, #0
 8004bea:	eba6 0807 	sub.w	r8, r6, r7
 8004bee:	608b      	str	r3, [r1, #8]
 8004bf0:	f1b8 0f00 	cmp.w	r8, #0
 8004bf4:	dde9      	ble.n	8004bca <__sflush_r+0xae>
 8004bf6:	6a21      	ldr	r1, [r4, #32]
 8004bf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004bfa:	4643      	mov	r3, r8
 8004bfc:	463a      	mov	r2, r7
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b0      	blx	r6
 8004c02:	2800      	cmp	r0, #0
 8004c04:	dc08      	bgt.n	8004c18 <__sflush_r+0xfc>
 8004c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295
 8004c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c18:	4407      	add	r7, r0
 8004c1a:	eba8 0800 	sub.w	r8, r8, r0
 8004c1e:	e7e7      	b.n	8004bf0 <__sflush_r+0xd4>
 8004c20:	dfbffffe 	.word	0xdfbffffe

08004c24 <_fflush_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	690b      	ldr	r3, [r1, #16]
 8004c28:	4605      	mov	r5, r0
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	b913      	cbnz	r3, 8004c34 <_fflush_r+0x10>
 8004c2e:	2500      	movs	r5, #0
 8004c30:	4628      	mov	r0, r5
 8004c32:	bd38      	pop	{r3, r4, r5, pc}
 8004c34:	b118      	cbz	r0, 8004c3e <_fflush_r+0x1a>
 8004c36:	6a03      	ldr	r3, [r0, #32]
 8004c38:	b90b      	cbnz	r3, 8004c3e <_fflush_r+0x1a>
 8004c3a:	f7fe fba7 	bl	800338c <__sinit>
 8004c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f3      	beq.n	8004c2e <_fflush_r+0xa>
 8004c46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c48:	07d0      	lsls	r0, r2, #31
 8004c4a:	d404      	bmi.n	8004c56 <_fflush_r+0x32>
 8004c4c:	0599      	lsls	r1, r3, #22
 8004c4e:	d402      	bmi.n	8004c56 <_fflush_r+0x32>
 8004c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c52:	f7fe fc92 	bl	800357a <__retarget_lock_acquire_recursive>
 8004c56:	4628      	mov	r0, r5
 8004c58:	4621      	mov	r1, r4
 8004c5a:	f7ff ff5f 	bl	8004b1c <__sflush_r>
 8004c5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c60:	07da      	lsls	r2, r3, #31
 8004c62:	4605      	mov	r5, r0
 8004c64:	d4e4      	bmi.n	8004c30 <_fflush_r+0xc>
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	059b      	lsls	r3, r3, #22
 8004c6a:	d4e1      	bmi.n	8004c30 <_fflush_r+0xc>
 8004c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c6e:	f7fe fc85 	bl	800357c <__retarget_lock_release_recursive>
 8004c72:	e7dd      	b.n	8004c30 <_fflush_r+0xc>

08004c74 <_sbrk_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4d06      	ldr	r5, [pc, #24]	@ (8004c90 <_sbrk_r+0x1c>)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	4608      	mov	r0, r1
 8004c7e:	602b      	str	r3, [r5, #0]
 8004c80:	f7fc f9c2 	bl	8001008 <_sbrk>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_sbrk_r+0x1a>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_sbrk_r+0x1a>
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	200003b0 	.word	0x200003b0

08004c94 <memcpy>:
 8004c94:	440a      	add	r2, r1
 8004c96:	4291      	cmp	r1, r2
 8004c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c9c:	d100      	bne.n	8004ca0 <memcpy+0xc>
 8004c9e:	4770      	bx	lr
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004caa:	4291      	cmp	r1, r2
 8004cac:	d1f9      	bne.n	8004ca2 <memcpy+0xe>
 8004cae:	bd10      	pop	{r4, pc}

08004cb0 <__assert_func>:
 8004cb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004cb2:	4614      	mov	r4, r2
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	4b09      	ldr	r3, [pc, #36]	@ (8004cdc <__assert_func+0x2c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4605      	mov	r5, r0
 8004cbc:	68d8      	ldr	r0, [r3, #12]
 8004cbe:	b954      	cbnz	r4, 8004cd6 <__assert_func+0x26>
 8004cc0:	4b07      	ldr	r3, [pc, #28]	@ (8004ce0 <__assert_func+0x30>)
 8004cc2:	461c      	mov	r4, r3
 8004cc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004cc8:	9100      	str	r1, [sp, #0]
 8004cca:	462b      	mov	r3, r5
 8004ccc:	4905      	ldr	r1, [pc, #20]	@ (8004ce4 <__assert_func+0x34>)
 8004cce:	f000 f841 	bl	8004d54 <fiprintf>
 8004cd2:	f000 f851 	bl	8004d78 <abort>
 8004cd6:	4b04      	ldr	r3, [pc, #16]	@ (8004ce8 <__assert_func+0x38>)
 8004cd8:	e7f4      	b.n	8004cc4 <__assert_func+0x14>
 8004cda:	bf00      	nop
 8004cdc:	20000014 	.word	0x20000014
 8004ce0:	0800554d 	.word	0x0800554d
 8004ce4:	0800551f 	.word	0x0800551f
 8004ce8:	08005512 	.word	0x08005512

08004cec <_calloc_r>:
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	fba1 5402 	umull	r5, r4, r1, r2
 8004cf2:	b93c      	cbnz	r4, 8004d04 <_calloc_r+0x18>
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	f7ff fb03 	bl	8004300 <_malloc_r>
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	b928      	cbnz	r0, 8004d0a <_calloc_r+0x1e>
 8004cfe:	2600      	movs	r6, #0
 8004d00:	4630      	mov	r0, r6
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
 8004d04:	220c      	movs	r2, #12
 8004d06:	6002      	str	r2, [r0, #0]
 8004d08:	e7f9      	b.n	8004cfe <_calloc_r+0x12>
 8004d0a:	462a      	mov	r2, r5
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	f7fe fbb6 	bl	800347e <memset>
 8004d12:	e7f5      	b.n	8004d00 <_calloc_r+0x14>

08004d14 <__ascii_mbtowc>:
 8004d14:	b082      	sub	sp, #8
 8004d16:	b901      	cbnz	r1, 8004d1a <__ascii_mbtowc+0x6>
 8004d18:	a901      	add	r1, sp, #4
 8004d1a:	b142      	cbz	r2, 8004d2e <__ascii_mbtowc+0x1a>
 8004d1c:	b14b      	cbz	r3, 8004d32 <__ascii_mbtowc+0x1e>
 8004d1e:	7813      	ldrb	r3, [r2, #0]
 8004d20:	600b      	str	r3, [r1, #0]
 8004d22:	7812      	ldrb	r2, [r2, #0]
 8004d24:	1e10      	subs	r0, r2, #0
 8004d26:	bf18      	it	ne
 8004d28:	2001      	movne	r0, #1
 8004d2a:	b002      	add	sp, #8
 8004d2c:	4770      	bx	lr
 8004d2e:	4610      	mov	r0, r2
 8004d30:	e7fb      	b.n	8004d2a <__ascii_mbtowc+0x16>
 8004d32:	f06f 0001 	mvn.w	r0, #1
 8004d36:	e7f8      	b.n	8004d2a <__ascii_mbtowc+0x16>

08004d38 <__ascii_wctomb>:
 8004d38:	4603      	mov	r3, r0
 8004d3a:	4608      	mov	r0, r1
 8004d3c:	b141      	cbz	r1, 8004d50 <__ascii_wctomb+0x18>
 8004d3e:	2aff      	cmp	r2, #255	@ 0xff
 8004d40:	d904      	bls.n	8004d4c <__ascii_wctomb+0x14>
 8004d42:	228a      	movs	r2, #138	@ 0x8a
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4a:	4770      	bx	lr
 8004d4c:	700a      	strb	r2, [r1, #0]
 8004d4e:	2001      	movs	r0, #1
 8004d50:	4770      	bx	lr
	...

08004d54 <fiprintf>:
 8004d54:	b40e      	push	{r1, r2, r3}
 8004d56:	b503      	push	{r0, r1, lr}
 8004d58:	4601      	mov	r1, r0
 8004d5a:	ab03      	add	r3, sp, #12
 8004d5c:	4805      	ldr	r0, [pc, #20]	@ (8004d74 <fiprintf+0x20>)
 8004d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d62:	6800      	ldr	r0, [r0, #0]
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	f000 f837 	bl	8004dd8 <_vfiprintf_r>
 8004d6a:	b002      	add	sp, #8
 8004d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d70:	b003      	add	sp, #12
 8004d72:	4770      	bx	lr
 8004d74:	20000014 	.word	0x20000014

08004d78 <abort>:
 8004d78:	b508      	push	{r3, lr}
 8004d7a:	2006      	movs	r0, #6
 8004d7c:	f000 fa00 	bl	8005180 <raise>
 8004d80:	2001      	movs	r0, #1
 8004d82:	f7fc f8c9 	bl	8000f18 <_exit>

08004d86 <__sfputc_r>:
 8004d86:	6893      	ldr	r3, [r2, #8]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	b410      	push	{r4}
 8004d8e:	6093      	str	r3, [r2, #8]
 8004d90:	da08      	bge.n	8004da4 <__sfputc_r+0x1e>
 8004d92:	6994      	ldr	r4, [r2, #24]
 8004d94:	42a3      	cmp	r3, r4
 8004d96:	db01      	blt.n	8004d9c <__sfputc_r+0x16>
 8004d98:	290a      	cmp	r1, #10
 8004d9a:	d103      	bne.n	8004da4 <__sfputc_r+0x1e>
 8004d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004da0:	f000 b932 	b.w	8005008 <__swbuf_r>
 8004da4:	6813      	ldr	r3, [r2, #0]
 8004da6:	1c58      	adds	r0, r3, #1
 8004da8:	6010      	str	r0, [r2, #0]
 8004daa:	7019      	strb	r1, [r3, #0]
 8004dac:	4608      	mov	r0, r1
 8004dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <__sfputs_r>:
 8004db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db6:	4606      	mov	r6, r0
 8004db8:	460f      	mov	r7, r1
 8004dba:	4614      	mov	r4, r2
 8004dbc:	18d5      	adds	r5, r2, r3
 8004dbe:	42ac      	cmp	r4, r5
 8004dc0:	d101      	bne.n	8004dc6 <__sfputs_r+0x12>
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	e007      	b.n	8004dd6 <__sfputs_r+0x22>
 8004dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dca:	463a      	mov	r2, r7
 8004dcc:	4630      	mov	r0, r6
 8004dce:	f7ff ffda 	bl	8004d86 <__sfputc_r>
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	d1f3      	bne.n	8004dbe <__sfputs_r+0xa>
 8004dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004dd8 <_vfiprintf_r>:
 8004dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ddc:	460d      	mov	r5, r1
 8004dde:	b09d      	sub	sp, #116	@ 0x74
 8004de0:	4614      	mov	r4, r2
 8004de2:	4698      	mov	r8, r3
 8004de4:	4606      	mov	r6, r0
 8004de6:	b118      	cbz	r0, 8004df0 <_vfiprintf_r+0x18>
 8004de8:	6a03      	ldr	r3, [r0, #32]
 8004dea:	b90b      	cbnz	r3, 8004df0 <_vfiprintf_r+0x18>
 8004dec:	f7fe face 	bl	800338c <__sinit>
 8004df0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004df2:	07d9      	lsls	r1, r3, #31
 8004df4:	d405      	bmi.n	8004e02 <_vfiprintf_r+0x2a>
 8004df6:	89ab      	ldrh	r3, [r5, #12]
 8004df8:	059a      	lsls	r2, r3, #22
 8004dfa:	d402      	bmi.n	8004e02 <_vfiprintf_r+0x2a>
 8004dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dfe:	f7fe fbbc 	bl	800357a <__retarget_lock_acquire_recursive>
 8004e02:	89ab      	ldrh	r3, [r5, #12]
 8004e04:	071b      	lsls	r3, r3, #28
 8004e06:	d501      	bpl.n	8004e0c <_vfiprintf_r+0x34>
 8004e08:	692b      	ldr	r3, [r5, #16]
 8004e0a:	b99b      	cbnz	r3, 8004e34 <_vfiprintf_r+0x5c>
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	4630      	mov	r0, r6
 8004e10:	f000 f938 	bl	8005084 <__swsetup_r>
 8004e14:	b170      	cbz	r0, 8004e34 <_vfiprintf_r+0x5c>
 8004e16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e18:	07dc      	lsls	r4, r3, #31
 8004e1a:	d504      	bpl.n	8004e26 <_vfiprintf_r+0x4e>
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e20:	b01d      	add	sp, #116	@ 0x74
 8004e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e26:	89ab      	ldrh	r3, [r5, #12]
 8004e28:	0598      	lsls	r0, r3, #22
 8004e2a:	d4f7      	bmi.n	8004e1c <_vfiprintf_r+0x44>
 8004e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e2e:	f7fe fba5 	bl	800357c <__retarget_lock_release_recursive>
 8004e32:	e7f3      	b.n	8004e1c <_vfiprintf_r+0x44>
 8004e34:	2300      	movs	r3, #0
 8004e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e38:	2320      	movs	r3, #32
 8004e3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e42:	2330      	movs	r3, #48	@ 0x30
 8004e44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004ff4 <_vfiprintf_r+0x21c>
 8004e48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e4c:	f04f 0901 	mov.w	r9, #1
 8004e50:	4623      	mov	r3, r4
 8004e52:	469a      	mov	sl, r3
 8004e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e58:	b10a      	cbz	r2, 8004e5e <_vfiprintf_r+0x86>
 8004e5a:	2a25      	cmp	r2, #37	@ 0x25
 8004e5c:	d1f9      	bne.n	8004e52 <_vfiprintf_r+0x7a>
 8004e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8004e62:	d00b      	beq.n	8004e7c <_vfiprintf_r+0xa4>
 8004e64:	465b      	mov	r3, fp
 8004e66:	4622      	mov	r2, r4
 8004e68:	4629      	mov	r1, r5
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	f7ff ffa2 	bl	8004db4 <__sfputs_r>
 8004e70:	3001      	adds	r0, #1
 8004e72:	f000 80a7 	beq.w	8004fc4 <_vfiprintf_r+0x1ec>
 8004e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e78:	445a      	add	r2, fp
 8004e7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 809f 	beq.w	8004fc4 <_vfiprintf_r+0x1ec>
 8004e86:	2300      	movs	r3, #0
 8004e88:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e90:	f10a 0a01 	add.w	sl, sl, #1
 8004e94:	9304      	str	r3, [sp, #16]
 8004e96:	9307      	str	r3, [sp, #28]
 8004e98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e9e:	4654      	mov	r4, sl
 8004ea0:	2205      	movs	r2, #5
 8004ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea6:	4853      	ldr	r0, [pc, #332]	@ (8004ff4 <_vfiprintf_r+0x21c>)
 8004ea8:	f7fb f9ba 	bl	8000220 <memchr>
 8004eac:	9a04      	ldr	r2, [sp, #16]
 8004eae:	b9d8      	cbnz	r0, 8004ee8 <_vfiprintf_r+0x110>
 8004eb0:	06d1      	lsls	r1, r2, #27
 8004eb2:	bf44      	itt	mi
 8004eb4:	2320      	movmi	r3, #32
 8004eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004eba:	0713      	lsls	r3, r2, #28
 8004ebc:	bf44      	itt	mi
 8004ebe:	232b      	movmi	r3, #43	@ 0x2b
 8004ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eca:	d015      	beq.n	8004ef8 <_vfiprintf_r+0x120>
 8004ecc:	9a07      	ldr	r2, [sp, #28]
 8004ece:	4654      	mov	r4, sl
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	f04f 0c0a 	mov.w	ip, #10
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004edc:	3b30      	subs	r3, #48	@ 0x30
 8004ede:	2b09      	cmp	r3, #9
 8004ee0:	d94b      	bls.n	8004f7a <_vfiprintf_r+0x1a2>
 8004ee2:	b1b0      	cbz	r0, 8004f12 <_vfiprintf_r+0x13a>
 8004ee4:	9207      	str	r2, [sp, #28]
 8004ee6:	e014      	b.n	8004f12 <_vfiprintf_r+0x13a>
 8004ee8:	eba0 0308 	sub.w	r3, r0, r8
 8004eec:	fa09 f303 	lsl.w	r3, r9, r3
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	9304      	str	r3, [sp, #16]
 8004ef4:	46a2      	mov	sl, r4
 8004ef6:	e7d2      	b.n	8004e9e <_vfiprintf_r+0xc6>
 8004ef8:	9b03      	ldr	r3, [sp, #12]
 8004efa:	1d19      	adds	r1, r3, #4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	9103      	str	r1, [sp, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bfbb      	ittet	lt
 8004f04:	425b      	neglt	r3, r3
 8004f06:	f042 0202 	orrlt.w	r2, r2, #2
 8004f0a:	9307      	strge	r3, [sp, #28]
 8004f0c:	9307      	strlt	r3, [sp, #28]
 8004f0e:	bfb8      	it	lt
 8004f10:	9204      	strlt	r2, [sp, #16]
 8004f12:	7823      	ldrb	r3, [r4, #0]
 8004f14:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f16:	d10a      	bne.n	8004f2e <_vfiprintf_r+0x156>
 8004f18:	7863      	ldrb	r3, [r4, #1]
 8004f1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f1c:	d132      	bne.n	8004f84 <_vfiprintf_r+0x1ac>
 8004f1e:	9b03      	ldr	r3, [sp, #12]
 8004f20:	1d1a      	adds	r2, r3, #4
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	9203      	str	r2, [sp, #12]
 8004f26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f2a:	3402      	adds	r4, #2
 8004f2c:	9305      	str	r3, [sp, #20]
 8004f2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005004 <_vfiprintf_r+0x22c>
 8004f32:	7821      	ldrb	r1, [r4, #0]
 8004f34:	2203      	movs	r2, #3
 8004f36:	4650      	mov	r0, sl
 8004f38:	f7fb f972 	bl	8000220 <memchr>
 8004f3c:	b138      	cbz	r0, 8004f4e <_vfiprintf_r+0x176>
 8004f3e:	9b04      	ldr	r3, [sp, #16]
 8004f40:	eba0 000a 	sub.w	r0, r0, sl
 8004f44:	2240      	movs	r2, #64	@ 0x40
 8004f46:	4082      	lsls	r2, r0
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	3401      	adds	r4, #1
 8004f4c:	9304      	str	r3, [sp, #16]
 8004f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f52:	4829      	ldr	r0, [pc, #164]	@ (8004ff8 <_vfiprintf_r+0x220>)
 8004f54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f58:	2206      	movs	r2, #6
 8004f5a:	f7fb f961 	bl	8000220 <memchr>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	d03f      	beq.n	8004fe2 <_vfiprintf_r+0x20a>
 8004f62:	4b26      	ldr	r3, [pc, #152]	@ (8004ffc <_vfiprintf_r+0x224>)
 8004f64:	bb1b      	cbnz	r3, 8004fae <_vfiprintf_r+0x1d6>
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	3307      	adds	r3, #7
 8004f6a:	f023 0307 	bic.w	r3, r3, #7
 8004f6e:	3308      	adds	r3, #8
 8004f70:	9303      	str	r3, [sp, #12]
 8004f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f74:	443b      	add	r3, r7
 8004f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f78:	e76a      	b.n	8004e50 <_vfiprintf_r+0x78>
 8004f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f7e:	460c      	mov	r4, r1
 8004f80:	2001      	movs	r0, #1
 8004f82:	e7a8      	b.n	8004ed6 <_vfiprintf_r+0xfe>
 8004f84:	2300      	movs	r3, #0
 8004f86:	3401      	adds	r4, #1
 8004f88:	9305      	str	r3, [sp, #20]
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f04f 0c0a 	mov.w	ip, #10
 8004f90:	4620      	mov	r0, r4
 8004f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f96:	3a30      	subs	r2, #48	@ 0x30
 8004f98:	2a09      	cmp	r2, #9
 8004f9a:	d903      	bls.n	8004fa4 <_vfiprintf_r+0x1cc>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0c6      	beq.n	8004f2e <_vfiprintf_r+0x156>
 8004fa0:	9105      	str	r1, [sp, #20]
 8004fa2:	e7c4      	b.n	8004f2e <_vfiprintf_r+0x156>
 8004fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fa8:	4604      	mov	r4, r0
 8004faa:	2301      	movs	r3, #1
 8004fac:	e7f0      	b.n	8004f90 <_vfiprintf_r+0x1b8>
 8004fae:	ab03      	add	r3, sp, #12
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	462a      	mov	r2, r5
 8004fb4:	4b12      	ldr	r3, [pc, #72]	@ (8005000 <_vfiprintf_r+0x228>)
 8004fb6:	a904      	add	r1, sp, #16
 8004fb8:	4630      	mov	r0, r6
 8004fba:	f7fd fda3 	bl	8002b04 <_printf_float>
 8004fbe:	4607      	mov	r7, r0
 8004fc0:	1c78      	adds	r0, r7, #1
 8004fc2:	d1d6      	bne.n	8004f72 <_vfiprintf_r+0x19a>
 8004fc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fc6:	07d9      	lsls	r1, r3, #31
 8004fc8:	d405      	bmi.n	8004fd6 <_vfiprintf_r+0x1fe>
 8004fca:	89ab      	ldrh	r3, [r5, #12]
 8004fcc:	059a      	lsls	r2, r3, #22
 8004fce:	d402      	bmi.n	8004fd6 <_vfiprintf_r+0x1fe>
 8004fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fd2:	f7fe fad3 	bl	800357c <__retarget_lock_release_recursive>
 8004fd6:	89ab      	ldrh	r3, [r5, #12]
 8004fd8:	065b      	lsls	r3, r3, #25
 8004fda:	f53f af1f 	bmi.w	8004e1c <_vfiprintf_r+0x44>
 8004fde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fe0:	e71e      	b.n	8004e20 <_vfiprintf_r+0x48>
 8004fe2:	ab03      	add	r3, sp, #12
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	462a      	mov	r2, r5
 8004fe8:	4b05      	ldr	r3, [pc, #20]	@ (8005000 <_vfiprintf_r+0x228>)
 8004fea:	a904      	add	r1, sp, #16
 8004fec:	4630      	mov	r0, r6
 8004fee:	f7fe f821 	bl	8003034 <_printf_i>
 8004ff2:	e7e4      	b.n	8004fbe <_vfiprintf_r+0x1e6>
 8004ff4:	0800564f 	.word	0x0800564f
 8004ff8:	08005659 	.word	0x08005659
 8004ffc:	08002b05 	.word	0x08002b05
 8005000:	08004db5 	.word	0x08004db5
 8005004:	08005655 	.word	0x08005655

08005008 <__swbuf_r>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	460e      	mov	r6, r1
 800500c:	4614      	mov	r4, r2
 800500e:	4605      	mov	r5, r0
 8005010:	b118      	cbz	r0, 800501a <__swbuf_r+0x12>
 8005012:	6a03      	ldr	r3, [r0, #32]
 8005014:	b90b      	cbnz	r3, 800501a <__swbuf_r+0x12>
 8005016:	f7fe f9b9 	bl	800338c <__sinit>
 800501a:	69a3      	ldr	r3, [r4, #24]
 800501c:	60a3      	str	r3, [r4, #8]
 800501e:	89a3      	ldrh	r3, [r4, #12]
 8005020:	071a      	lsls	r2, r3, #28
 8005022:	d501      	bpl.n	8005028 <__swbuf_r+0x20>
 8005024:	6923      	ldr	r3, [r4, #16]
 8005026:	b943      	cbnz	r3, 800503a <__swbuf_r+0x32>
 8005028:	4621      	mov	r1, r4
 800502a:	4628      	mov	r0, r5
 800502c:	f000 f82a 	bl	8005084 <__swsetup_r>
 8005030:	b118      	cbz	r0, 800503a <__swbuf_r+0x32>
 8005032:	f04f 37ff 	mov.w	r7, #4294967295
 8005036:	4638      	mov	r0, r7
 8005038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	6922      	ldr	r2, [r4, #16]
 800503e:	1a98      	subs	r0, r3, r2
 8005040:	6963      	ldr	r3, [r4, #20]
 8005042:	b2f6      	uxtb	r6, r6
 8005044:	4283      	cmp	r3, r0
 8005046:	4637      	mov	r7, r6
 8005048:	dc05      	bgt.n	8005056 <__swbuf_r+0x4e>
 800504a:	4621      	mov	r1, r4
 800504c:	4628      	mov	r0, r5
 800504e:	f7ff fde9 	bl	8004c24 <_fflush_r>
 8005052:	2800      	cmp	r0, #0
 8005054:	d1ed      	bne.n	8005032 <__swbuf_r+0x2a>
 8005056:	68a3      	ldr	r3, [r4, #8]
 8005058:	3b01      	subs	r3, #1
 800505a:	60a3      	str	r3, [r4, #8]
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	6022      	str	r2, [r4, #0]
 8005062:	701e      	strb	r6, [r3, #0]
 8005064:	6962      	ldr	r2, [r4, #20]
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	429a      	cmp	r2, r3
 800506a:	d004      	beq.n	8005076 <__swbuf_r+0x6e>
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	07db      	lsls	r3, r3, #31
 8005070:	d5e1      	bpl.n	8005036 <__swbuf_r+0x2e>
 8005072:	2e0a      	cmp	r6, #10
 8005074:	d1df      	bne.n	8005036 <__swbuf_r+0x2e>
 8005076:	4621      	mov	r1, r4
 8005078:	4628      	mov	r0, r5
 800507a:	f7ff fdd3 	bl	8004c24 <_fflush_r>
 800507e:	2800      	cmp	r0, #0
 8005080:	d0d9      	beq.n	8005036 <__swbuf_r+0x2e>
 8005082:	e7d6      	b.n	8005032 <__swbuf_r+0x2a>

08005084 <__swsetup_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	4b29      	ldr	r3, [pc, #164]	@ (800512c <__swsetup_r+0xa8>)
 8005088:	4605      	mov	r5, r0
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	460c      	mov	r4, r1
 800508e:	b118      	cbz	r0, 8005098 <__swsetup_r+0x14>
 8005090:	6a03      	ldr	r3, [r0, #32]
 8005092:	b90b      	cbnz	r3, 8005098 <__swsetup_r+0x14>
 8005094:	f7fe f97a 	bl	800338c <__sinit>
 8005098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800509c:	0719      	lsls	r1, r3, #28
 800509e:	d422      	bmi.n	80050e6 <__swsetup_r+0x62>
 80050a0:	06da      	lsls	r2, r3, #27
 80050a2:	d407      	bmi.n	80050b4 <__swsetup_r+0x30>
 80050a4:	2209      	movs	r2, #9
 80050a6:	602a      	str	r2, [r5, #0]
 80050a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050ac:	81a3      	strh	r3, [r4, #12]
 80050ae:	f04f 30ff 	mov.w	r0, #4294967295
 80050b2:	e033      	b.n	800511c <__swsetup_r+0x98>
 80050b4:	0758      	lsls	r0, r3, #29
 80050b6:	d512      	bpl.n	80050de <__swsetup_r+0x5a>
 80050b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050ba:	b141      	cbz	r1, 80050ce <__swsetup_r+0x4a>
 80050bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050c0:	4299      	cmp	r1, r3
 80050c2:	d002      	beq.n	80050ca <__swsetup_r+0x46>
 80050c4:	4628      	mov	r0, r5
 80050c6:	f7ff f8a7 	bl	8004218 <_free_r>
 80050ca:	2300      	movs	r3, #0
 80050cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80050d4:	81a3      	strh	r3, [r4, #12]
 80050d6:	2300      	movs	r3, #0
 80050d8:	6063      	str	r3, [r4, #4]
 80050da:	6923      	ldr	r3, [r4, #16]
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	f043 0308 	orr.w	r3, r3, #8
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	b94b      	cbnz	r3, 80050fe <__swsetup_r+0x7a>
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050f4:	d003      	beq.n	80050fe <__swsetup_r+0x7a>
 80050f6:	4621      	mov	r1, r4
 80050f8:	4628      	mov	r0, r5
 80050fa:	f000 f883 	bl	8005204 <__smakebuf_r>
 80050fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005102:	f013 0201 	ands.w	r2, r3, #1
 8005106:	d00a      	beq.n	800511e <__swsetup_r+0x9a>
 8005108:	2200      	movs	r2, #0
 800510a:	60a2      	str	r2, [r4, #8]
 800510c:	6962      	ldr	r2, [r4, #20]
 800510e:	4252      	negs	r2, r2
 8005110:	61a2      	str	r2, [r4, #24]
 8005112:	6922      	ldr	r2, [r4, #16]
 8005114:	b942      	cbnz	r2, 8005128 <__swsetup_r+0xa4>
 8005116:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800511a:	d1c5      	bne.n	80050a8 <__swsetup_r+0x24>
 800511c:	bd38      	pop	{r3, r4, r5, pc}
 800511e:	0799      	lsls	r1, r3, #30
 8005120:	bf58      	it	pl
 8005122:	6962      	ldrpl	r2, [r4, #20]
 8005124:	60a2      	str	r2, [r4, #8]
 8005126:	e7f4      	b.n	8005112 <__swsetup_r+0x8e>
 8005128:	2000      	movs	r0, #0
 800512a:	e7f7      	b.n	800511c <__swsetup_r+0x98>
 800512c:	20000014 	.word	0x20000014

08005130 <_raise_r>:
 8005130:	291f      	cmp	r1, #31
 8005132:	b538      	push	{r3, r4, r5, lr}
 8005134:	4605      	mov	r5, r0
 8005136:	460c      	mov	r4, r1
 8005138:	d904      	bls.n	8005144 <_raise_r+0x14>
 800513a:	2316      	movs	r3, #22
 800513c:	6003      	str	r3, [r0, #0]
 800513e:	f04f 30ff 	mov.w	r0, #4294967295
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005146:	b112      	cbz	r2, 800514e <_raise_r+0x1e>
 8005148:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800514c:	b94b      	cbnz	r3, 8005162 <_raise_r+0x32>
 800514e:	4628      	mov	r0, r5
 8005150:	f000 f830 	bl	80051b4 <_getpid_r>
 8005154:	4622      	mov	r2, r4
 8005156:	4601      	mov	r1, r0
 8005158:	4628      	mov	r0, r5
 800515a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800515e:	f000 b817 	b.w	8005190 <_kill_r>
 8005162:	2b01      	cmp	r3, #1
 8005164:	d00a      	beq.n	800517c <_raise_r+0x4c>
 8005166:	1c59      	adds	r1, r3, #1
 8005168:	d103      	bne.n	8005172 <_raise_r+0x42>
 800516a:	2316      	movs	r3, #22
 800516c:	6003      	str	r3, [r0, #0]
 800516e:	2001      	movs	r0, #1
 8005170:	e7e7      	b.n	8005142 <_raise_r+0x12>
 8005172:	2100      	movs	r1, #0
 8005174:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005178:	4620      	mov	r0, r4
 800517a:	4798      	blx	r3
 800517c:	2000      	movs	r0, #0
 800517e:	e7e0      	b.n	8005142 <_raise_r+0x12>

08005180 <raise>:
 8005180:	4b02      	ldr	r3, [pc, #8]	@ (800518c <raise+0xc>)
 8005182:	4601      	mov	r1, r0
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	f7ff bfd3 	b.w	8005130 <_raise_r>
 800518a:	bf00      	nop
 800518c:	20000014 	.word	0x20000014

08005190 <_kill_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	4d07      	ldr	r5, [pc, #28]	@ (80051b0 <_kill_r+0x20>)
 8005194:	2300      	movs	r3, #0
 8005196:	4604      	mov	r4, r0
 8005198:	4608      	mov	r0, r1
 800519a:	4611      	mov	r1, r2
 800519c:	602b      	str	r3, [r5, #0]
 800519e:	f7fb feab 	bl	8000ef8 <_kill>
 80051a2:	1c43      	adds	r3, r0, #1
 80051a4:	d102      	bne.n	80051ac <_kill_r+0x1c>
 80051a6:	682b      	ldr	r3, [r5, #0]
 80051a8:	b103      	cbz	r3, 80051ac <_kill_r+0x1c>
 80051aa:	6023      	str	r3, [r4, #0]
 80051ac:	bd38      	pop	{r3, r4, r5, pc}
 80051ae:	bf00      	nop
 80051b0:	200003b0 	.word	0x200003b0

080051b4 <_getpid_r>:
 80051b4:	f7fb be98 	b.w	8000ee8 <_getpid>

080051b8 <__swhatbuf_r>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	460c      	mov	r4, r1
 80051bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c0:	2900      	cmp	r1, #0
 80051c2:	b096      	sub	sp, #88	@ 0x58
 80051c4:	4615      	mov	r5, r2
 80051c6:	461e      	mov	r6, r3
 80051c8:	da0d      	bge.n	80051e6 <__swhatbuf_r+0x2e>
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80051d0:	f04f 0100 	mov.w	r1, #0
 80051d4:	bf14      	ite	ne
 80051d6:	2340      	movne	r3, #64	@ 0x40
 80051d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80051dc:	2000      	movs	r0, #0
 80051de:	6031      	str	r1, [r6, #0]
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	b016      	add	sp, #88	@ 0x58
 80051e4:	bd70      	pop	{r4, r5, r6, pc}
 80051e6:	466a      	mov	r2, sp
 80051e8:	f000 f848 	bl	800527c <_fstat_r>
 80051ec:	2800      	cmp	r0, #0
 80051ee:	dbec      	blt.n	80051ca <__swhatbuf_r+0x12>
 80051f0:	9901      	ldr	r1, [sp, #4]
 80051f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80051f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80051fa:	4259      	negs	r1, r3
 80051fc:	4159      	adcs	r1, r3
 80051fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005202:	e7eb      	b.n	80051dc <__swhatbuf_r+0x24>

08005204 <__smakebuf_r>:
 8005204:	898b      	ldrh	r3, [r1, #12]
 8005206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005208:	079d      	lsls	r5, r3, #30
 800520a:	4606      	mov	r6, r0
 800520c:	460c      	mov	r4, r1
 800520e:	d507      	bpl.n	8005220 <__smakebuf_r+0x1c>
 8005210:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	6123      	str	r3, [r4, #16]
 8005218:	2301      	movs	r3, #1
 800521a:	6163      	str	r3, [r4, #20]
 800521c:	b003      	add	sp, #12
 800521e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005220:	ab01      	add	r3, sp, #4
 8005222:	466a      	mov	r2, sp
 8005224:	f7ff ffc8 	bl	80051b8 <__swhatbuf_r>
 8005228:	9f00      	ldr	r7, [sp, #0]
 800522a:	4605      	mov	r5, r0
 800522c:	4639      	mov	r1, r7
 800522e:	4630      	mov	r0, r6
 8005230:	f7ff f866 	bl	8004300 <_malloc_r>
 8005234:	b948      	cbnz	r0, 800524a <__smakebuf_r+0x46>
 8005236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800523a:	059a      	lsls	r2, r3, #22
 800523c:	d4ee      	bmi.n	800521c <__smakebuf_r+0x18>
 800523e:	f023 0303 	bic.w	r3, r3, #3
 8005242:	f043 0302 	orr.w	r3, r3, #2
 8005246:	81a3      	strh	r3, [r4, #12]
 8005248:	e7e2      	b.n	8005210 <__smakebuf_r+0xc>
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	6020      	str	r0, [r4, #0]
 800524e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005252:	81a3      	strh	r3, [r4, #12]
 8005254:	9b01      	ldr	r3, [sp, #4]
 8005256:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800525a:	b15b      	cbz	r3, 8005274 <__smakebuf_r+0x70>
 800525c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005260:	4630      	mov	r0, r6
 8005262:	f000 f81d 	bl	80052a0 <_isatty_r>
 8005266:	b128      	cbz	r0, 8005274 <__smakebuf_r+0x70>
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	81a3      	strh	r3, [r4, #12]
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	431d      	orrs	r5, r3
 8005278:	81a5      	strh	r5, [r4, #12]
 800527a:	e7cf      	b.n	800521c <__smakebuf_r+0x18>

0800527c <_fstat_r>:
 800527c:	b538      	push	{r3, r4, r5, lr}
 800527e:	4d07      	ldr	r5, [pc, #28]	@ (800529c <_fstat_r+0x20>)
 8005280:	2300      	movs	r3, #0
 8005282:	4604      	mov	r4, r0
 8005284:	4608      	mov	r0, r1
 8005286:	4611      	mov	r1, r2
 8005288:	602b      	str	r3, [r5, #0]
 800528a:	f7fb fe95 	bl	8000fb8 <_fstat>
 800528e:	1c43      	adds	r3, r0, #1
 8005290:	d102      	bne.n	8005298 <_fstat_r+0x1c>
 8005292:	682b      	ldr	r3, [r5, #0]
 8005294:	b103      	cbz	r3, 8005298 <_fstat_r+0x1c>
 8005296:	6023      	str	r3, [r4, #0]
 8005298:	bd38      	pop	{r3, r4, r5, pc}
 800529a:	bf00      	nop
 800529c:	200003b0 	.word	0x200003b0

080052a0 <_isatty_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4d06      	ldr	r5, [pc, #24]	@ (80052bc <_isatty_r+0x1c>)
 80052a4:	2300      	movs	r3, #0
 80052a6:	4604      	mov	r4, r0
 80052a8:	4608      	mov	r0, r1
 80052aa:	602b      	str	r3, [r5, #0]
 80052ac:	f7fb fe94 	bl	8000fd8 <_isatty>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_isatty_r+0x1a>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_isatty_r+0x1a>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	200003b0 	.word	0x200003b0

080052c0 <_init>:
 80052c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c2:	bf00      	nop
 80052c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c6:	bc08      	pop	{r3}
 80052c8:	469e      	mov	lr, r3
 80052ca:	4770      	bx	lr

080052cc <_fini>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	bf00      	nop
 80052d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d2:	bc08      	pop	{r3}
 80052d4:	469e      	mov	lr, r3
 80052d6:	4770      	bx	lr
