
USB_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  080055b0  080055b0  000065b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005938  08005938  000071e4  2**0
                  CONTENTS
  4 .ARM          00000008  08005938  08005938  00006938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005940  08005940  000071e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005940  08005940  00006940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005944  08005944  00006944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08005948  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200001e4  08005b2c  000071e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08005b2c  000073d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004564  00000000  00000000  00007214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f7e  00000000  00000000  0000b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d0  00000000  00000000  0000c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001fa  00000000  00000000  0000c9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b067  00000000  00000000  0000cbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004e35  00000000  00000000  00027c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009414d  00000000  00000000  0002ca5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0bab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000192c  00000000  00000000  000c0bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c251c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005598 	.word	0x08005598

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	08005598 	.word	0x08005598

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return 1;
 8000eec:	2301      	movs	r3, #1
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_kill>:

int _kill(int pid, int sig)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f02:	f002 fc79 	bl	80037f8 <__errno>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2216      	movs	r2, #22
 8000f0a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_exit>:

void _exit (int status)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ffe7 	bl	8000ef8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f2a:	bf00      	nop
 8000f2c:	e7fd      	b.n	8000f2a <_exit+0x12>

08000f2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e00a      	b.n	8000f56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f40:	f3af 8000 	nop.w
 8000f44:	4601      	mov	r1, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	60ba      	str	r2, [r7, #8]
 8000f4c:	b2ca      	uxtb	r2, r1
 8000f4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dbf0      	blt.n	8000f40 <_read+0x12>
  }

  return len;
 8000f5e:	687b      	ldr	r3, [r7, #4]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e009      	b.n	8000f8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	60ba      	str	r2, [r7, #8]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	dbf1      	blt.n	8000f7a <_write+0x12>
  }
  return len;
 8000f96:	687b      	ldr	r3, [r7, #4]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_close>:

int _close(int file)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fc8:	605a      	str	r2, [r3, #4]
  return 0;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_isatty>:

int _isatty(int file)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fe0:	2301      	movs	r3, #1
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b085      	sub	sp, #20
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001010:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <_sbrk+0x5c>)
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <_sbrk+0x60>)
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	4b13      	ldr	r3, [pc, #76]	@ (800106c <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <_sbrk+0x64>)
 8001026:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <_sbrk+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	429a      	cmp	r2, r3
 8001036:	d207      	bcs.n	8001048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001038:	f002 fbde 	bl	80037f8 <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e009      	b.n	800105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b07      	ldr	r3, [pc, #28]	@ (800106c <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20040000 	.word	0x20040000
 8001068:	00000400 	.word	0x00000400
 800106c:	20000200 	.word	0x20000200
 8001070:	200003d8 	.word	0x200003d8

08001074 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <SystemInit+0x28>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800107e:	4a07      	ldr	r2, [pc, #28]	@ (800109c <SystemInit+0x28>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <SystemInit+0x28>)
 800108a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800108e:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <Clock_Setup_OSC>:
#define MCO2_GPIO_PORT			GPIOC
#define MCO2_PIN           	    (1 << 9)


Error_HandleTypeDef Clock_Setup_OSC(OSC_ConfigSetTypeDef *osc_config)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	uint32_t pll_config;
	uint32_t TickStart;
	if(osc_config == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <Clock_Setup_OSC+0x12>
	{
		return STATE_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e1a4      	b.n	80013fc <Clock_Setup_OSC+0x35c>
	}

	/* ---------------------HSE Configuration--------------------- */
	if((osc_config->OSC_TYPE & OSC_TYPE_HSE) == OSC_TYPE_HSE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8086 	beq.w	80011cc <Clock_Setup_OSC+0x12c>
	{
		if((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_HSE || ((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL && (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE) == RCC_PLLCFGR_PLLSRC_HSE))
 80010c0:	4b8b      	ldr	r3, [pc, #556]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d00c      	beq.n	80010e6 <Clock_Setup_OSC+0x46>
 80010cc:	4b88      	ldr	r3, [pc, #544]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d112      	bne.n	80010fe <Clock_Setup_OSC+0x5e>
 80010d8:	4b85      	ldr	r3, [pc, #532]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010e4:	d10b      	bne.n	80010fe <Clock_Setup_OSC+0x5e>
		{
			if((RCC->CR & RCC_CR_HSERDY) != RESET && (osc_config->HSE_SET.HSE_STATE) == HSE_OFF)
 80010e6:	4b82      	ldr	r3, [pc, #520]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d06b      	beq.n	80011ca <Clock_Setup_OSC+0x12a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d167      	bne.n	80011ca <Clock_Setup_OSC+0x12a>
			{
				return STATE_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e17e      	b.n	80013fc <Clock_Setup_OSC+0x35c>
			}
		}
		else
		{
			HSE_CONFIG(osc_config->HSE_SET.HSE_STATE);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10c      	bne.n	8001120 <Clock_Setup_OSC+0x80>
 8001106:	4b7a      	ldr	r3, [pc, #488]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a79      	ldr	r2, [pc, #484]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 800110c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b77      	ldr	r3, [pc, #476]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a76      	ldr	r2, [pc, #472]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001118:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e029      	b.n	8001174 <Clock_Setup_OSC+0xd4>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001128:	d106      	bne.n	8001138 <Clock_Setup_OSC+0x98>
 800112a:	4b71      	ldr	r3, [pc, #452]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a70      	ldr	r2, [pc, #448]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e01d      	b.n	8001174 <Clock_Setup_OSC+0xd4>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001140:	d10c      	bne.n	800115c <Clock_Setup_OSC+0xbc>
 8001142:	4b6b      	ldr	r3, [pc, #428]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a6a      	ldr	r2, [pc, #424]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b68      	ldr	r3, [pc, #416]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a67      	ldr	r2, [pc, #412]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e00b      	b.n	8001174 <Clock_Setup_OSC+0xd4>
 800115c:	4b64      	ldr	r3, [pc, #400]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a63      	ldr	r2, [pc, #396]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b61      	ldr	r3, [pc, #388]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a60      	ldr	r2, [pc, #384]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 800116e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001172:	6013      	str	r3, [r2, #0]
			if(osc_config->HSE_SET.HSE_STATE == HSE_ON)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800117c:	d112      	bne.n	80011a4 <Clock_Setup_OSC+0x104>
			{
				TickStart = uwTick;
 800117e:	4b5d      	ldr	r3, [pc, #372]	@ (80012f4 <Clock_Setup_OSC+0x254>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_HSERDY) == RESET)
 8001184:	e007      	b.n	8001196 <Clock_Setup_OSC+0xf6>
				{
					if((uwTick - TickStart) > HSE_TIMEOUT_VALUE)
 8001186:	4b5b      	ldr	r3, [pc, #364]	@ (80012f4 <Clock_Setup_OSC+0x254>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	@ 0x64
 8001190:	d901      	bls.n	8001196 <Clock_Setup_OSC+0xf6>
					{
						return STATE_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e132      	b.n	80013fc <Clock_Setup_OSC+0x35c>
				while((RCC->CR & RCC_CR_HSERDY) == RESET)
 8001196:	4b56      	ldr	r3, [pc, #344]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f1      	beq.n	8001186 <Clock_Setup_OSC+0xe6>
 80011a2:	e013      	b.n	80011cc <Clock_Setup_OSC+0x12c>
					}
				}
			}
			else
			{
				TickStart = uwTick;
 80011a4:	4b53      	ldr	r3, [pc, #332]	@ (80012f4 <Clock_Setup_OSC+0x254>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_HSERDY) == RESET)
 80011aa:	e007      	b.n	80011bc <Clock_Setup_OSC+0x11c>
				{
					if((uwTick - TickStart) > HSE_TIMEOUT_VALUE)
 80011ac:	4b51      	ldr	r3, [pc, #324]	@ (80012f4 <Clock_Setup_OSC+0x254>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b64      	cmp	r3, #100	@ 0x64
 80011b6:	d901      	bls.n	80011bc <Clock_Setup_OSC+0x11c>
					{
						return STATE_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e11f      	b.n	80013fc <Clock_Setup_OSC+0x35c>
				while((RCC->CR & RCC_CR_HSERDY) == RESET)
 80011bc:	4b4c      	ldr	r3, [pc, #304]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f1      	beq.n	80011ac <Clock_Setup_OSC+0x10c>
 80011c8:	e000      	b.n	80011cc <Clock_Setup_OSC+0x12c>
			if((RCC->CR & RCC_CR_HSERDY) != RESET && (osc_config->HSE_SET.HSE_STATE) == HSE_OFF)
 80011ca:	bf00      	nop
			}
		}
	}

	/* ---------------------HSI Configuration--------------------- */
	if((osc_config->OSC_TYPE & OSC_TYPE_HSI) == OSC_TYPE_HSI)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d069      	beq.n	80012ac <Clock_Setup_OSC+0x20c>
	{
		if((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_HSI || ((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_PLL && (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI))
 80011d8:	4b45      	ldr	r3, [pc, #276]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 030c 	and.w	r3, r3, #12
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00b      	beq.n	80011fc <Clock_Setup_OSC+0x15c>
 80011e4:	4b42      	ldr	r3, [pc, #264]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d11d      	bne.n	800122c <Clock_Setup_OSC+0x18c>
 80011f0:	4b3f      	ldr	r3, [pc, #252]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d117      	bne.n	800122c <Clock_Setup_OSC+0x18c>
		{
			if((RCC->CR & RCC_CR_HSIRDY) != RESET && (osc_config->HSI_SET.HSI_STATE) == HSI_OFF)
 80011fc:	4b3c      	ldr	r3, [pc, #240]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <Clock_Setup_OSC+0x176>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <Clock_Setup_OSC+0x176>
			{
				return STATE_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e0f2      	b.n	80013fc <Clock_Setup_OSC+0x35c>
			}
			else
			{
				RCC_HSI_CALIBRATION_ADJUST(osc_config->HSI_SET.HSI_CAL);
 8001216:	4b36      	ldr	r3, [pc, #216]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4932      	ldr	r1, [pc, #200]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
			if((RCC->CR & RCC_CR_HSIRDY) != RESET && (osc_config->HSI_SET.HSI_STATE) == HSI_OFF)
 800122a:	e03f      	b.n	80012ac <Clock_Setup_OSC+0x20c>
			}
		}
		else
		{
			if(osc_config->HSI_SET.HSI_STATE == HSI_ON)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001232:	2b01      	cmp	r3, #1
 8001234:	d122      	bne.n	800127c <Clock_Setup_OSC+0x1dc>
			{
				HSI_ENABLE();
 8001236:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a2d      	ldr	r2, [pc, #180]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6013      	str	r3, [r2, #0]
				TickStart = uwTick;
 8001242:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <Clock_Setup_OSC+0x254>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_HSIRDY) == RESET)
 8001248:	e007      	b.n	800125a <Clock_Setup_OSC+0x1ba>
				{
					if((uwTick - TickStart) > HSI_TIMEOUT_VALUE)
 800124a:	4b2a      	ldr	r3, [pc, #168]	@ (80012f4 <Clock_Setup_OSC+0x254>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <Clock_Setup_OSC+0x1ba>
					{
						return STATE_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e0d0      	b.n	80013fc <Clock_Setup_OSC+0x35c>
				while((RCC->CR & RCC_CR_HSIRDY) == RESET)
 800125a:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f1      	beq.n	800124a <Clock_Setup_OSC+0x1aa>
					}
				}
				RCC_HSI_CALIBRATION_ADJUST(osc_config->HSI_SET.HSI_CAL);
 8001266:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	491e      	ldr	r1, [pc, #120]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
 800127a:	e017      	b.n	80012ac <Clock_Setup_OSC+0x20c>
			}
			else
			{
				HSI_DISEBLE();
 800127c:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a1b      	ldr	r2, [pc, #108]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 8001282:	f023 0301 	bic.w	r3, r3, #1
 8001286:	6013      	str	r3, [r2, #0]
				TickStart = uwTick;
 8001288:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <Clock_Setup_OSC+0x254>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60fb      	str	r3, [r7, #12]
				while((RCC->CR & RCC_CR_HSIRDY) == RESET)
 800128e:	e007      	b.n	80012a0 <Clock_Setup_OSC+0x200>
				{
					if((uwTick - TickStart) > HSI_TIMEOUT_VALUE)
 8001290:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <Clock_Setup_OSC+0x254>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <Clock_Setup_OSC+0x200>
					{
						return STATE_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e0ad      	b.n	80013fc <Clock_Setup_OSC+0x35c>
				while((RCC->CR & RCC_CR_HSIRDY) == RESET)
 80012a0:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f1      	beq.n	8001290 <Clock_Setup_OSC+0x1f0>
				}
			}
		}
	}

	if(osc_config->PLL_SET.PLL_STATE != PLL_NONE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	791b      	ldrb	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80a2 	beq.w	80013fa <Clock_Setup_OSC+0x35a>
	{
		if((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d069      	beq.n	8001396 <Clock_Setup_OSC+0x2f6>
		{
			if(osc_config->PLL_SET.PLL_STATE == PLL_ON)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	791b      	ldrb	r3, [r3, #4]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d14c      	bne.n	8001364 <Clock_Setup_OSC+0x2c4>
			{
				PLL_DISEBLE();
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <Clock_Setup_OSC+0x250>)
 80012d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012d4:	6013      	str	r3, [r2, #0]

				TickStart = uwTick;
 80012d6:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <Clock_Setup_OSC+0x254>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_PLLON) != RESET)
 80012dc:	e00c      	b.n	80012f8 <Clock_Setup_OSC+0x258>
				{
					if((uwTick - TickStart) > PLL_TIMEOUT_VALUE)
 80012de:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <Clock_Setup_OSC+0x254>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d906      	bls.n	80012f8 <Clock_Setup_OSC+0x258>
					{
						return STATE_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e086      	b.n	80013fc <Clock_Setup_OSC+0x35c>
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	20000284 	.word	0x20000284
				while((RCC->CR & RCC_CR_PLLON) != RESET)
 80012f8:	4b43      	ldr	r3, [pc, #268]	@ (8001408 <Clock_Setup_OSC+0x368>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1ec      	bne.n	80012de <Clock_Setup_OSC+0x23e>
					}
				}

				PLL_CONFIG(osc_config->PLL_SET.PLLSRC, osc_config->PLL_SET.PLLM, osc_config->PLL_SET.PLLN, osc_config->PLL_SET.PLLP, osc_config->PLL_SET.PLLQ);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	019b      	lsls	r3, r3, #6
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	085b      	lsrs	r3, r3, #1
 800131c:	3b01      	subs	r3, #1
 800131e:	041b      	lsls	r3, r3, #16
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	061b      	lsls	r3, r3, #24
 8001328:	4313      	orrs	r3, r2
 800132a:	4a37      	ldr	r2, [pc, #220]	@ (8001408 <Clock_Setup_OSC+0x368>)
 800132c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001330:	6053      	str	r3, [r2, #4]

				PLL_ENABLE();
 8001332:	4b35      	ldr	r3, [pc, #212]	@ (8001408 <Clock_Setup_OSC+0x368>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a34      	ldr	r2, [pc, #208]	@ (8001408 <Clock_Setup_OSC+0x368>)
 8001338:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800133c:	6013      	str	r3, [r2, #0]

				TickStart = uwTick;
 800133e:	4b33      	ldr	r3, [pc, #204]	@ (800140c <Clock_Setup_OSC+0x36c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_PLLON) == RESET)
 8001344:	e007      	b.n	8001356 <Clock_Setup_OSC+0x2b6>
				{
					if((uwTick - TickStart) > PLL_TIMEOUT_VALUE)
 8001346:	4b31      	ldr	r3, [pc, #196]	@ (800140c <Clock_Setup_OSC+0x36c>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <Clock_Setup_OSC+0x2b6>
					{
						return STATE_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e052      	b.n	80013fc <Clock_Setup_OSC+0x35c>
				while((RCC->CR & RCC_CR_PLLON) == RESET)
 8001356:	4b2c      	ldr	r3, [pc, #176]	@ (8001408 <Clock_Setup_OSC+0x368>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f1      	beq.n	8001346 <Clock_Setup_OSC+0x2a6>
 8001362:	e04a      	b.n	80013fa <Clock_Setup_OSC+0x35a>
					}
				}
			}
			else
			{
				PLL_DISEBLE();
 8001364:	4b28      	ldr	r3, [pc, #160]	@ (8001408 <Clock_Setup_OSC+0x368>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a27      	ldr	r2, [pc, #156]	@ (8001408 <Clock_Setup_OSC+0x368>)
 800136a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800136e:	6013      	str	r3, [r2, #0]

				TickStart = uwTick;
 8001370:	4b26      	ldr	r3, [pc, #152]	@ (800140c <Clock_Setup_OSC+0x36c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]

				while((RCC->CR & RCC_CR_PLLON) != RESET)
 8001376:	e007      	b.n	8001388 <Clock_Setup_OSC+0x2e8>
				{
					if((uwTick - TickStart) > PLL_TIMEOUT_VALUE)
 8001378:	4b24      	ldr	r3, [pc, #144]	@ (800140c <Clock_Setup_OSC+0x36c>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <Clock_Setup_OSC+0x2e8>
					{
						return STATE_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e039      	b.n	80013fc <Clock_Setup_OSC+0x35c>
				while((RCC->CR & RCC_CR_PLLON) != RESET)
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <Clock_Setup_OSC+0x368>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f1      	bne.n	8001378 <Clock_Setup_OSC+0x2d8>
 8001394:	e031      	b.n	80013fa <Clock_Setup_OSC+0x35a>
				}
			}
		}
		else
		{
			pll_config = RCC->PLLCFGR;
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <Clock_Setup_OSC+0x368>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	60bb      	str	r3, [r7, #8]
			if(osc_config->PLL_SET.PLL_STATE == PLL_OFF ||
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	791b      	ldrb	r3, [r3, #4]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d028      	beq.n	80013f6 <Clock_Setup_OSC+0x356>
					READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != osc_config->PLL_SET.PLLSRC ||
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
			if(osc_config->PLL_SET.PLL_STATE == PLL_OFF ||
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d121      	bne.n	80013f6 <Clock_Setup_OSC+0x356>
					READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != osc_config->PLL_SET.PLLM ||
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
					READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != osc_config->PLL_SET.PLLSRC ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d11a      	bne.n	80013f6 <Clock_Setup_OSC+0x356>
					READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != osc_config->PLL_SET.PLLN << RCC_PLLCFGR_PLLN_Pos ||
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013c6:	4013      	ands	r3, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6912      	ldr	r2, [r2, #16]
 80013cc:	0192      	lsls	r2, r2, #6
					READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != osc_config->PLL_SET.PLLM ||
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d111      	bne.n	80013f6 <Clock_Setup_OSC+0x356>
					READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((osc_config->PLL_SET.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos ||
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	085b      	lsrs	r3, r3, #1
 80013de:	3b01      	subs	r3, #1
 80013e0:	041b      	lsls	r3, r3, #16
					READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != osc_config->PLL_SET.PLLN << RCC_PLLCFGR_PLLN_Pos ||
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d107      	bne.n	80013f6 <Clock_Setup_OSC+0x356>
					READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != osc_config->PLL_SET.PLLQ << RCC_PLLCFGR_PLLQ_Pos)
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	061b      	lsls	r3, r3, #24
					READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((osc_config->PLL_SET.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos ||
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d001      	beq.n	80013fa <Clock_Setup_OSC+0x35a>
			{
				return STATE_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <Clock_Setup_OSC+0x35c>
			}
		}
	}
	return STATE_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40023800 	.word	0x40023800
 800140c:	20000284 	.word	0x20000284

08001410 <Clock_Setup_Clock>:

Error_HandleTypeDef Clock_Setup_Clock(Clock_ConfigTypeDef *clock_config)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	uint32_t TickStart;

	if(clock_config == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <Clock_Setup_Clock+0x12>
	{
		return STATE_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e0e7      	b.n	80015f2 <Clock_Setup_Clock+0x1e2>
	}

	if(clock_config->FLatency > FLASH_GET_LATENCY())
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	4b75      	ldr	r3, [pc, #468]	@ (80015fc <Clock_Setup_Clock+0x1ec>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	429a      	cmp	r2, r3
 8001430:	d921      	bls.n	8001476 <Clock_Setup_Clock+0x66>
	{
		FLASH_SET_LATENCY(clock_config->FLatency);
 8001432:	4b72      	ldr	r3, [pc, #456]	@ (80015fc <Clock_Setup_Clock+0x1ec>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a71      	ldr	r2, [pc, #452]	@ (80015fc <Clock_Setup_Clock+0x1ec>)
 8001438:	f023 030f 	bic.w	r3, r3, #15
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b6f      	ldr	r3, [pc, #444]	@ (80015fc <Clock_Setup_Clock+0x1ec>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	496d      	ldr	r1, [pc, #436]	@ (80015fc <Clock_Setup_Clock+0x1ec>)
 8001448:	4313      	orrs	r3, r2
 800144a:	600b      	str	r3, [r1, #0]

		TickStart = uwTick;
 800144c:	4b6c      	ldr	r3, [pc, #432]	@ (8001600 <Clock_Setup_Clock+0x1f0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
		while((FLASH->ACR & FLASH_ACR_LATENCY) != clock_config->FLatency)
 8001452:	e008      	b.n	8001466 <Clock_Setup_Clock+0x56>
		{
			if((uwTick - TickStart) > 1000)
 8001454:	4b6a      	ldr	r3, [pc, #424]	@ (8001600 <Clock_Setup_Clock+0x1f0>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001460:	d901      	bls.n	8001466 <Clock_Setup_Clock+0x56>
			{
				return STATE_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0c5      	b.n	80015f2 <Clock_Setup_Clock+0x1e2>
		while((FLASH->ACR & FLASH_ACR_LATENCY) != clock_config->FLatency)
 8001466:	4b65      	ldr	r3, [pc, #404]	@ (80015fc <Clock_Setup_Clock+0x1ec>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 020f 	and.w	r2, r3, #15
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	429a      	cmp	r2, r3
 8001474:	d1ee      	bne.n	8001454 <Clock_Setup_Clock+0x44>
			}
		}
	}

	if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_HCLK) == RCC_CLK_TYPE_HCLK)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d020      	beq.n	80014c4 <Clock_Setup_Clock+0xb4>
	{
		if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_PCLK1) == RCC_CLK_TYPE_PCLK1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <Clock_Setup_Clock+0x8a>
		{
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800148e:	4b5d      	ldr	r3, [pc, #372]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	4a5c      	ldr	r2, [pc, #368]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 8001494:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001498:	6093      	str	r3, [r2, #8]
		}
		if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_PCLK2) == RCC_CLK_TYPE_PCLK2)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <Clock_Setup_Clock+0xa2>
		{
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a6:	4b57      	ldr	r3, [pc, #348]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	4a56      	ldr	r2, [pc, #344]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 80014ac:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014b0:	6093      	str	r3, [r2, #8]
		}

		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, clock_config->AHBCLK_DIV);
 80014b2:	4b54      	ldr	r3, [pc, #336]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	4951      	ldr	r1, [pc, #324]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	608b      	str	r3, [r1, #8]
	}

	if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_SYSCLK) == RCC_CLK_TYPE_SYSCLK)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d03f      	beq.n	8001550 <Clock_Setup_Clock+0x140>
	{
		if((clock_config->SYSCLK_SOURCE) == RCC_SYSCLKSOURCE_HSE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d107      	bne.n	80014e8 <Clock_Setup_Clock+0xd8>
		{
			if((RCC->CR & RCC_CR_HSERDY) != RESET)
 80014d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d015      	beq.n	8001510 <Clock_Setup_Clock+0x100>
			{
				return STATE_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e084      	b.n	80015f2 <Clock_Setup_Clock+0x1e2>
			}
		}
		else if((clock_config->SYSCLK_SOURCE) == RCC_SYSCLKSOURCE_PLLCLK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d107      	bne.n	8001500 <Clock_Setup_Clock+0xf0>
		{
			if((RCC->CR & RCC_CR_PLLRDY) != RESET)
 80014f0:	4b44      	ldr	r3, [pc, #272]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d009      	beq.n	8001510 <Clock_Setup_Clock+0x100>
			{
				return STATE_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e078      	b.n	80015f2 <Clock_Setup_Clock+0x1e2>
			}
		}
		else
		{
			if((RCC->CR & RCC_CR_HSIRDY) != RESET)
 8001500:	4b40      	ldr	r3, [pc, #256]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <Clock_Setup_Clock+0x100>
			{
				return STATE_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e070      	b.n	80015f2 <Clock_Setup_Clock+0x1e2>
			}
		}

		MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, (clock_config->SYSCLK_SOURCE));
 8001510:	4b3c      	ldr	r3, [pc, #240]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f023 0203 	bic.w	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4939      	ldr	r1, [pc, #228]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 800151e:	4313      	orrs	r3, r2
 8001520:	608b      	str	r3, [r1, #8]

		TickStart = uwTick;
 8001522:	4b37      	ldr	r3, [pc, #220]	@ (8001600 <Clock_Setup_Clock+0x1f0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60fb      	str	r3, [r7, #12]

		while((RCC->CFGR & RCC_CFGR_SWS) != (clock_config->SYSCLK_SOURCE) << RCC_CFGR_SWS_Pos)
 8001528:	e009      	b.n	800153e <Clock_Setup_Clock+0x12e>
		{
			if((uwTick - TickStart) > CLK_SW_TIMEOUT_VALUE)
 800152a:	4b35      	ldr	r3, [pc, #212]	@ (8001600 <Clock_Setup_Clock+0x1f0>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <Clock_Setup_Clock+0x12e>
			{
				return STATE_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e059      	b.n	80015f2 <Clock_Setup_Clock+0x1e2>
		while((RCC->CFGR & RCC_CFGR_SWS) != (clock_config->SYSCLK_SOURCE) << RCC_CFGR_SWS_Pos)
 800153e:	4b31      	ldr	r3, [pc, #196]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 020c 	and.w	r2, r3, #12
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	429a      	cmp	r2, r3
 800154e:	d1ec      	bne.n	800152a <Clock_Setup_Clock+0x11a>
			}
		}
	}

	if(clock_config->FLatency < FLASH_GET_LATENCY())
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	4b29      	ldr	r3, [pc, #164]	@ (80015fc <Clock_Setup_Clock+0x1ec>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	429a      	cmp	r2, r3
 800155e:	d216      	bcs.n	800158e <Clock_Setup_Clock+0x17e>
	{
		FLASH_SET_LATENCY(clock_config->FLatency);
 8001560:	4b26      	ldr	r3, [pc, #152]	@ (80015fc <Clock_Setup_Clock+0x1ec>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a25      	ldr	r2, [pc, #148]	@ (80015fc <Clock_Setup_Clock+0x1ec>)
 8001566:	f023 030f 	bic.w	r3, r3, #15
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <Clock_Setup_Clock+0x1ec>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	4921      	ldr	r1, [pc, #132]	@ (80015fc <Clock_Setup_Clock+0x1ec>)
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]

		if(FLASH_GET_LATENCY() != clock_config->FLatency)
 800157a:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <Clock_Setup_Clock+0x1ec>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 020f 	and.w	r2, r3, #15
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	429a      	cmp	r2, r3
 8001588:	d001      	beq.n	800158e <Clock_Setup_Clock+0x17e>
		{
			return STATE_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e031      	b.n	80015f2 <Clock_Setup_Clock+0x1e2>
		}
	}

	if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_PCLK1) == RCC_CLK_TYPE_PCLK1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <Clock_Setup_Clock+0x19c>
	{
	    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, clock_config->APB1CLK_DIV);
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	4917      	ldr	r1, [pc, #92]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	608b      	str	r3, [r1, #8]
	}
	if((clock_config->CLOCK_TYPE & RCC_CLK_TYPE_PCLK2) == RCC_CLK_TYPE_PCLK2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <Clock_Setup_Clock+0x1ba>
	{
	    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, clock_config->APB2CLK_DIV);
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	490f      	ldr	r1, [pc, #60]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	608b      	str	r3, [r1, #8]
	}

	SystemCoreClock = Get_SysClock_Freq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ca:	f000 f87b 	bl	80016c4 <Get_SysClock_Freq>
 80015ce:	4602      	mov	r2, r0
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <Clock_Setup_Clock+0x1f4>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	490b      	ldr	r1, [pc, #44]	@ (8001608 <Clock_Setup_Clock+0x1f8>)
 80015dc:	5ccb      	ldrb	r3, [r1, r3]
 80015de:	fa22 f303 	lsr.w	r3, r2, r3
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <Clock_Setup_Clock+0x1fc>)
 80015e4:	6013      	str	r3, [r2, #0]

	Tick_Init(uwTickPrio);
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <Clock_Setup_Clock+0x200>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fcea 	bl	8001fc4 <Tick_Init>

	return STATE_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023c00 	.word	0x40023c00
 8001600:	20000284 	.word	0x20000284
 8001604:	40023800 	.word	0x40023800
 8001608:	080055b0 	.word	0x080055b0
 800160c:	20000000 	.word	0x20000000
 8001610:	20000004 	.word	0x20000004

08001614 <MCO_Config>:

void MCO_Config(uint32_t MCOx, uint32_t MCO_SRC, uint32_t MCO_DIV)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	@ 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
	GPIO_ConfigTypeDef config;

	if(MCOx == RCC_MCO1)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d121      	bne.n	800166a <MCO_Config+0x56>
	{
		MCO1_CLK_ENABLE();
 8001626:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <MCO_Config+0xa4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a23      	ldr	r2, [pc, #140]	@ (80016b8 <MCO_Config+0xa4>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30

		config.PIN = MCO1_PIN;
 8001632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001636:	617b      	str	r3, [r7, #20]
		config.MODE = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
		config.SPEED = GPIO_SPEED_FREQ_HIGH;
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
		config.PULL = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
		config.ALT = (uint8_t)0x00;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_Config(MCO1_GPIO_PORT, &config);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	481b      	ldr	r0, [pc, #108]	@ (80016bc <MCO_Config+0xa8>)
 8001650:	f000 fa06 	bl	8001a60 <GPIO_Config>

		MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (MCO_SRC | MCO_DIV));
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <MCO_Config+0xa4>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	430b      	orrs	r3, r1
 8001662:	4915      	ldr	r1, [pc, #84]	@ (80016b8 <MCO_Config+0xa4>)
 8001664:	4313      	orrs	r3, r2
 8001666:	608b      	str	r3, [r1, #8]
		config.ALT = (uint8_t)0x00;
		GPIO_Config(MCO2_GPIO_PORT, &config);

		MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (MCO_SRC | (MCO_DIV << 3)));
	}
}
 8001668:	e021      	b.n	80016ae <MCO_Config+0x9a>
		MCO2_CLK_ENABLE();
 800166a:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <MCO_Config+0xa4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <MCO_Config+0xa4>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6313      	str	r3, [r2, #48]	@ 0x30
		config.PIN = MCO2_PIN;
 8001676:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800167a:	617b      	str	r3, [r7, #20]
		config.MODE = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	61bb      	str	r3, [r7, #24]
		config.SPEED = GPIO_SPEED_FREQ_HIGH;
 8001680:	2302      	movs	r3, #2
 8001682:	623b      	str	r3, [r7, #32]
		config.PULL = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
		config.ALT = (uint8_t)0x00;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_Config(MCO2_GPIO_PORT, &config);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	480b      	ldr	r0, [pc, #44]	@ (80016c0 <MCO_Config+0xac>)
 8001694:	f000 f9e4 	bl	8001a60 <GPIO_Config>
		MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (MCO_SRC | (MCO_DIV << 3)));
 8001698:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <MCO_Config+0xa4>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	00d9      	lsls	r1, r3, #3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	430b      	orrs	r3, r1
 80016a8:	4903      	ldr	r1, [pc, #12]	@ (80016b8 <MCO_Config+0xa4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	@ 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020000 	.word	0x40020000
 80016c0:	40020800 	.word	0x40020800

080016c4 <Get_SysClock_Freq>:

uint32_t Get_SysClock_Freq(void)
{
 80016c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c8:	b090      	sub	sp, #64	@ 0x40
 80016ca:	af00      	add	r7, sp, #0
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80016d0:	2300      	movs	r3, #0
 80016d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t sysclock_freq = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	63bb      	str	r3, [r7, #56]	@ 0x38
	switch (RCC->CFGR & RCC_CFGR_SWS)
 80016dc:	4b5b      	ldr	r3, [pc, #364]	@ (800184c <Get_SysClock_Freq+0x188>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d00d      	beq.n	8001704 <Get_SysClock_Freq+0x40>
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	f200 80a1 	bhi.w	8001830 <Get_SysClock_Freq+0x16c>
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <Get_SysClock_Freq+0x34>
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d003      	beq.n	80016fe <Get_SysClock_Freq+0x3a>
 80016f6:	e09b      	b.n	8001830 <Get_SysClock_Freq+0x16c>
	{
	case RCC_SYSCLKSOURCE_STATUS_HSI:
	{
		sysclock_freq = HSI_VALUE;
 80016f8:	4b55      	ldr	r3, [pc, #340]	@ (8001850 <Get_SysClock_Freq+0x18c>)
 80016fa:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 80016fc:	e09b      	b.n	8001836 <Get_SysClock_Freq+0x172>
	}
	case RCC_SYSCLKSOURCE_STATUS_HSE:
	{
		sysclock_freq = HSE_VALUE;
 80016fe:	4b55      	ldr	r3, [pc, #340]	@ (8001854 <Get_SysClock_Freq+0x190>)
 8001700:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 8001702:	e098      	b.n	8001836 <Get_SysClock_Freq+0x172>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK:
	{
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001704:	4b51      	ldr	r3, [pc, #324]	@ (800184c <Get_SysClock_Freq+0x188>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800170c:	637b      	str	r3, [r7, #52]	@ 0x34
		if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) != RCC_PLLCFGR_PLLSRC_HSI)
 800170e:	4b4f      	ldr	r3, [pc, #316]	@ (800184c <Get_SysClock_Freq+0x188>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d028      	beq.n	800176c <Get_SysClock_Freq+0xa8>
		{
	        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171a:	4b4c      	ldr	r3, [pc, #304]	@ (800184c <Get_SysClock_Freq+0x188>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	099b      	lsrs	r3, r3, #6
 8001720:	2200      	movs	r2, #0
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	627a      	str	r2, [r7, #36]	@ 0x24
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800172c:	2100      	movs	r1, #0
 800172e:	4b49      	ldr	r3, [pc, #292]	@ (8001854 <Get_SysClock_Freq+0x190>)
 8001730:	fb03 f201 	mul.w	r2, r3, r1
 8001734:	2300      	movs	r3, #0
 8001736:	fb00 f303 	mul.w	r3, r0, r3
 800173a:	4413      	add	r3, r2
 800173c:	4a45      	ldr	r2, [pc, #276]	@ (8001854 <Get_SysClock_Freq+0x190>)
 800173e:	fba0 1202 	umull	r1, r2, r0, r2
 8001742:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001744:	460a      	mov	r2, r1
 8001746:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800174a:	4413      	add	r3, r2
 800174c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800174e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001750:	2200      	movs	r2, #0
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	61fa      	str	r2, [r7, #28]
 8001756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800175a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800175e:	f7ff fa4b 	bl	8000bf8 <__aeabi_uldivmod>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4613      	mov	r3, r2
 8001768:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800176a:	e053      	b.n	8001814 <Get_SysClock_Freq+0x150>
		}
		else
		{
	        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176c:	4b37      	ldr	r3, [pc, #220]	@ (800184c <Get_SysClock_Freq+0x188>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	2200      	movs	r2, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	617a      	str	r2, [r7, #20]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800177e:	f04f 0b00 	mov.w	fp, #0
 8001782:	4652      	mov	r2, sl
 8001784:	465b      	mov	r3, fp
 8001786:	f04f 0000 	mov.w	r0, #0
 800178a:	f04f 0100 	mov.w	r1, #0
 800178e:	0159      	lsls	r1, r3, #5
 8001790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001794:	0150      	lsls	r0, r2, #5
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	ebb2 080a 	subs.w	r8, r2, sl
 800179e:	eb63 090b 	sbc.w	r9, r3, fp
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017b6:	ebb2 0408 	subs.w	r4, r2, r8
 80017ba:	eb63 0509 	sbc.w	r5, r3, r9
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	00eb      	lsls	r3, r5, #3
 80017c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017cc:	00e2      	lsls	r2, r4, #3
 80017ce:	4614      	mov	r4, r2
 80017d0:	461d      	mov	r5, r3
 80017d2:	eb14 030a 	adds.w	r3, r4, sl
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	eb45 030b 	adc.w	r3, r5, fp
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ea:	4629      	mov	r1, r5
 80017ec:	028b      	lsls	r3, r1, #10
 80017ee:	4621      	mov	r1, r4
 80017f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017f4:	4621      	mov	r1, r4
 80017f6:	028a      	lsls	r2, r1, #10
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017fe:	2200      	movs	r2, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	60fa      	str	r2, [r7, #12]
 8001804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001808:	f7ff f9f6 	bl	8000bf8 <__aeabi_uldivmod>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4613      	mov	r3, r2
 8001812:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
	    pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001814:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <Get_SysClock_Freq+0x188>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	3301      	adds	r3, #1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	633b      	str	r3, [r7, #48]	@ 0x30

	    sysclock_freq = pllvco / pllp;
 8001824:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 800182e:	e002      	b.n	8001836 <Get_SysClock_Freq+0x172>
	}
	default:
	{
		sysclock_freq = HSI_VALUE;
 8001830:	4b07      	ldr	r3, [pc, #28]	@ (8001850 <Get_SysClock_Freq+0x18c>)
 8001832:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 8001834:	bf00      	nop
	}
	}

	Tick_Init(uwTickPrio);
 8001836:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <Get_SysClock_Freq+0x194>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fbc2 	bl	8001fc4 <Tick_Init>

	return sysclock_freq;
 8001840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001842:	4618      	mov	r0, r3
 8001844:	3740      	adds	r7, #64	@ 0x40
 8001846:	46bd      	mov	sp, r7
 8001848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	00f42400 	.word	0x00f42400
 8001854:	016e3600 	.word	0x016e3600
 8001858:	20000004 	.word	0x20000004

0800185c <Delay_Ms>:

void Delay_Ms(uint32_t delay_time)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	uint32_t TickStart = uwTick;
 8001864:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <Delay_Ms+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60bb      	str	r3, [r7, #8]
	uint32_t wait = delay_time;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	60fb      	str	r3, [r7, #12]

	if(wait < MS_MAX_DELAY)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001874:	d002      	beq.n	800187c <Delay_Ms+0x20>
	{
		wait += (uint32_t)1;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
	}

	while((uwTick - TickStart) < wait);
 800187c:	bf00      	nop
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <Delay_Ms+0x40>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f8      	bhi.n	800187e <Delay_Ms+0x22>
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000284 	.word	0x20000284

080018a0 <RCC_GetPCLK_Freq>:

uint32_t RCC_GetPCLK_Freq(uint32_t cfgr_ppre, uint32_t cfgr_pos)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
	return (SystemCoreClock >> APBPrescTable[cfgr_ppre >> cfgr_pos]);
 80018aa:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <RCC_GetPCLK_Freq+0x28>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	fa21 f202 	lsr.w	r2, r1, r2
 80018b6:	4905      	ldr	r1, [pc, #20]	@ (80018cc <RCC_GetPCLK_Freq+0x2c>)
 80018b8:	5c8a      	ldrb	r2, [r1, r2]
 80018ba:	40d3      	lsrs	r3, r2
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	20000000 	.word	0x20000000
 80018cc:	080055c0 	.word	0x080055c0

080018d0 <PeriphCLKConfig>:

Error_HandleTypeDef PeriphCLKConfig(RCC_Periph_CLK_ConfigTypedef *periph_clk_config)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	uint32_t TickStart = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg0 = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
	uint32_t plli2s_used = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
	uint32_t pllsai_used = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

	if(((periph_clk_config->PeriphClockSelection) & (uint32_t)0x80000) == (uint32_t)0x80000U)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d010      	beq.n	8001916 <PeriphCLKConfig+0x46>
	{
		MODIFY_REG(RCC->DCKCFGR1, RCC_DCKCFGR1_SAI1SEL, (uint32_t)(periph_clk_config->Sai1ClockSelection));
 80018f4:	4b58      	ldr	r3, [pc, #352]	@ (8001a58 <PeriphCLKConfig+0x188>)
 80018f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001902:	4955      	ldr	r1, [pc, #340]	@ (8001a58 <PeriphCLKConfig+0x188>)
 8001904:	4313      	orrs	r3, r2
 8001906:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
		if((periph_clk_config->Sai1ClockSelection) == (uint32_t)0x00U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <PeriphCLKConfig+0x46>
		{
			pllsai_used = 1;
 8001912:	2301      	movs	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
		}
	}

	if(((periph_clk_config->PeriphClockSelection) & 0x40U) == 0x40U)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00a      	beq.n	8001938 <PeriphCLKConfig+0x68>
	{
		MODIFY_REG(RCC->DCKCFGR2, RCC_DCKCFGR2_USART1SEL, (uint32_t)(periph_clk_config->Usart1ClockSelection));
 8001922:	4b4d      	ldr	r3, [pc, #308]	@ (8001a58 <PeriphCLKConfig+0x188>)
 8001924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001928:	f023 0203 	bic.w	r2, r3, #3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001930:	4949      	ldr	r1, [pc, #292]	@ (8001a58 <PeriphCLKConfig+0x188>)
 8001932:	4313      	orrs	r3, r2
 8001934:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
	}

	if(pllsai_used == 1)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2b01      	cmp	r3, #1
 800193c:	f040 8084 	bne.w	8001a48 <PeriphCLKConfig+0x178>
	{
		RCC->CR &= ~(RCC_CR_PLLSAION);
 8001940:	4b45      	ldr	r3, [pc, #276]	@ (8001a58 <PeriphCLKConfig+0x188>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a44      	ldr	r2, [pc, #272]	@ (8001a58 <PeriphCLKConfig+0x188>)
 8001946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800194a:	6013      	str	r3, [r2, #0]

		TickStart = uwTick;
 800194c:	4b43      	ldr	r3, [pc, #268]	@ (8001a5c <PeriphCLKConfig+0x18c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	613b      	str	r3, [r7, #16]
		while(((RCC->CR & RCC_CR_PLLSAIRDY) == RCC_CR_PLLSAIRDY) == RESET)
 8001952:	e007      	b.n	8001964 <PeriphCLKConfig+0x94>
		{
			if((uwTick - TickStart) > PLLSAI_TIMEOUT_VALUE)
 8001954:	4b41      	ldr	r3, [pc, #260]	@ (8001a5c <PeriphCLKConfig+0x18c>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b64      	cmp	r3, #100	@ 0x64
 800195e:	d901      	bls.n	8001964 <PeriphCLKConfig+0x94>
			{
				return STATE_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e072      	b.n	8001a4a <PeriphCLKConfig+0x17a>
		while(((RCC->CR & RCC_CR_PLLSAIRDY) == RCC_CR_PLLSAIRDY) == RESET)
 8001964:	4b3c      	ldr	r3, [pc, #240]	@ (8001a58 <PeriphCLKConfig+0x188>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800196c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001970:	d1f0      	bne.n	8001954 <PeriphCLKConfig+0x84>
			}
		}

	    if(((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x80000U) == (uint32_t)0x80000U) && (periph_clk_config->Sai1ClockSelection == (uint32_t)0x00U)) ||\
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <PeriphCLKConfig+0xb6>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <PeriphCLKConfig+0xca>
	       ((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x100000U) == (uint32_t)0x100000) && (periph_clk_config->Sai2ClockSelection == (uint32_t)0x00U)))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
	    if(((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x80000U) == (uint32_t)0x80000U) && (periph_clk_config->Sai1ClockSelection == (uint32_t)0x00U)) ||\
 800198e:	2b00      	cmp	r3, #0
 8001990:	d023      	beq.n	80019da <PeriphCLKConfig+0x10a>
	       ((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x100000U) == (uint32_t)0x100000) && (periph_clk_config->Sai2ClockSelection == (uint32_t)0x00U)))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001996:	2b00      	cmp	r3, #0
 8001998:	d11f      	bne.n	80019da <PeriphCLKConfig+0x10a>
	    {
	    	tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800199a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a58 <PeriphCLKConfig+0x188>)
 800199c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019a0:	0c1b      	lsrs	r3, r3, #16
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	60fb      	str	r3, [r7, #12]

	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	019a      	lsls	r2, r3, #6
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	431a      	orrs	r2, r3
	    			tmpreg0 |
					((periph_clk_config->PLLSAI.PLLSAIQ) << RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	061b      	lsls	r3, r3, #24
	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 80019b8:	4927      	ldr	r1, [pc, #156]	@ (8001a58 <PeriphCLKConfig+0x188>)
	    			tmpreg0 |
 80019ba:	4313      	orrs	r3, r2
	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 80019bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

	    	MODIFY_REG(RCC->DCKCFGR1, RCC_DCKCFGR1_PLLSAIDIVQ, (periph_clk_config->PLLSAIDivQ - 1) << 8);
 80019c0:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <PeriphCLKConfig+0x188>)
 80019c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019c6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	4921      	ldr	r1, [pc, #132]	@ (8001a58 <PeriphCLKConfig+0x188>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
	    }

	    if((((periph_clk_config->PeriphClockSelection) & (uint32_t)0x200000U) == (uint32_t)0x200000U) && (periph_clk_config->Clk48ClockSelection == RCC_DCKCFGR2_CK48MSEL))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d017      	beq.n	8001a16 <PeriphCLKConfig+0x146>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80019ee:	d112      	bne.n	8001a16 <PeriphCLKConfig+0x146>
		{

	    	tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80019f0:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <PeriphCLKConfig+0x188>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019f6:	0e1b      	lsrs	r3, r3, #24
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	60fb      	str	r3, [r7, #12]

	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	019a      	lsls	r2, r3, #6
					((periph_clk_config->PLLSAI.PLLSAIP) << RCC_PLLSAICFGR_PLLSAIP_Pos) |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	041b      	lsls	r3, r3, #16
	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	4912      	ldr	r1, [pc, #72]	@ (8001a58 <PeriphCLKConfig+0x188>)
					((periph_clk_config->PLLSAI.PLLSAIP) << RCC_PLLSAICFGR_PLLSAIP_Pos) |
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
	    	RCC->PLLSAICFGR = ((periph_clk_config->PLLSAI.PLLSAIN) << RCC_PLLSAICFGR_PLLSAIN_Pos) |
 8001a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
					tmpreg0;
		}

	    (RCC->CR |= (RCC_CR_PLLSAION));
 8001a16:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <PeriphCLKConfig+0x188>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a58 <PeriphCLKConfig+0x188>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	6013      	str	r3, [r2, #0]

	    TickStart = uwTick;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <PeriphCLKConfig+0x18c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	613b      	str	r3, [r7, #16]

	    while(((RCC->CR & RCC_CR_PLLSAIRDY) == RCC_CR_PLLSAIRDY) == RESET)
 8001a28:	e007      	b.n	8001a3a <PeriphCLKConfig+0x16a>
	    {
			if((uwTick - TickStart) > PLLSAI_TIMEOUT_VALUE)
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <PeriphCLKConfig+0x18c>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	@ 0x64
 8001a34:	d901      	bls.n	8001a3a <PeriphCLKConfig+0x16a>
			{
				return STATE_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e007      	b.n	8001a4a <PeriphCLKConfig+0x17a>
	    while(((RCC->CR & RCC_CR_PLLSAIRDY) == RCC_CR_PLLSAIRDY) == RESET)
 8001a3a:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <PeriphCLKConfig+0x188>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a46:	d1f0      	bne.n	8001a2a <PeriphCLKConfig+0x15a>
			}
	    }
	}
	return STATE_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	371c      	adds	r7, #28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	20000284 	.word	0x20000284

08001a60 <GPIO_Config>:

#define GPIO_NUMBER           ((uint32_t)16U)


void GPIO_Config(GPIO_TypeDef *GPIOx, GPIO_ConfigTypeDef *GPIO_Conf)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	uint32_t position = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
	uint32_t ioposition = 0x00;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
	uint32_t iocurrent = 0x00;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
	uint32_t temp = 0x00;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]

	for(position = 0; position < GPIO_NUMBER; position++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e163      	b.n	8001d48 <GPIO_Config+0x2e8>
	{
		ioposition = ((uint32_t)0x01) << position;
 8001a80:	2201      	movs	r2, #1
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	60fb      	str	r3, [r7, #12]

		iocurrent = (uint32_t)(GPIO_Conf->PIN) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	4013      	ands	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]

		if(iocurrent == ioposition)
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 8152 	bne.w	8001d42 <GPIO_Config+0x2e2>
		{
			if(((GPIO_Conf->MODE & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Conf->MODE & GPIO_MODE) == MODE_AF))
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d005      	beq.n	8001ab6 <GPIO_Config+0x56>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d130      	bne.n	8001b18 <GPIO_Config+0xb8>
			{
				temp = GPIOx->OSPEEDR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_Conf->SPEED << (position * 2));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
				GPIOx->OSPEEDR = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	609a      	str	r2, [r3, #8]

				temp = GPIOx->OTYPER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OTYPER_OT0 << position);
 8001aec:	2201      	movs	r2, #1
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Conf->MODE & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 0201 	and.w	r2, r3, #1
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
				GPIOx->OTYPER = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	605a      	str	r2, [r3, #4]
			}
		    if((GPIO_Conf->MODE & GPIO_MODE) != MODE_ANALOG)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d017      	beq.n	8001b54 <GPIO_Config+0xf4>
		    {
		        temp = GPIOx->PUPDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	613b      	str	r3, [r7, #16]
		        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
		        temp |= ((GPIO_Conf->PULL) << (position * 2));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
		        GPIOx->PUPDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	60da      	str	r2, [r3, #12]
		    }
		    if ((GPIO_Conf->MODE & GPIO_MODE) == MODE_AF)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d123      	bne.n	8001ba8 <GPIO_Config+0x148>
		    {
		        temp = GPIOx->AFR[position >> 3];
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3208      	adds	r2, #8
 8001b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6c:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
		        temp |= ((uint32_t)(GPIO_Conf->ALT) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
		        GPIOx->AFR[position >> 3] = temp;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	6939      	ldr	r1, [r7, #16]
 8001ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		    }
		    temp = GPIOx->MODER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	613b      	str	r3, [r7, #16]
		    temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
		    temp |= ((GPIO_Conf->MODE & GPIO_MODE) << (position * 2));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0203 	and.w	r2, r3, #3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
		    GPIOx->MODER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	601a      	str	r2, [r3, #0]

		    if((GPIO_Conf->MODE & EXTI_MODE) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80ac 	beq.w	8001d42 <GPIO_Config+0x2e2>
		    {
		    	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN);
 8001bea:	4b5d      	ldr	r3, [pc, #372]	@ (8001d60 <GPIO_Config+0x300>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	4a5c      	ldr	r2, [pc, #368]	@ (8001d60 <GPIO_Config+0x300>)
 8001bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf4:	6453      	str	r3, [r2, #68]	@ 0x44

		    	temp = SYSCFG->EXTICR[position >> 2];
 8001bf6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d64 <GPIO_Config+0x304>)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c02:	613b      	str	r3, [r7, #16]
		    	temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
		    	temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a52      	ldr	r2, [pc, #328]	@ (8001d68 <GPIO_Config+0x308>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d02b      	beq.n	8001c7a <GPIO_Config+0x21a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a51      	ldr	r2, [pc, #324]	@ (8001d6c <GPIO_Config+0x30c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d025      	beq.n	8001c76 <GPIO_Config+0x216>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a50      	ldr	r2, [pc, #320]	@ (8001d70 <GPIO_Config+0x310>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01f      	beq.n	8001c72 <GPIO_Config+0x212>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4f      	ldr	r2, [pc, #316]	@ (8001d74 <GPIO_Config+0x314>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d019      	beq.n	8001c6e <GPIO_Config+0x20e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001d78 <GPIO_Config+0x318>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <GPIO_Config+0x20a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4d      	ldr	r2, [pc, #308]	@ (8001d7c <GPIO_Config+0x31c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00d      	beq.n	8001c66 <GPIO_Config+0x206>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001d80 <GPIO_Config+0x320>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d007      	beq.n	8001c62 <GPIO_Config+0x202>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4b      	ldr	r2, [pc, #300]	@ (8001d84 <GPIO_Config+0x324>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d101      	bne.n	8001c5e <GPIO_Config+0x1fe>
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	e00e      	b.n	8001c7c <GPIO_Config+0x21c>
 8001c5e:	2308      	movs	r3, #8
 8001c60:	e00c      	b.n	8001c7c <GPIO_Config+0x21c>
 8001c62:	2306      	movs	r3, #6
 8001c64:	e00a      	b.n	8001c7c <GPIO_Config+0x21c>
 8001c66:	2305      	movs	r3, #5
 8001c68:	e008      	b.n	8001c7c <GPIO_Config+0x21c>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e006      	b.n	8001c7c <GPIO_Config+0x21c>
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e004      	b.n	8001c7c <GPIO_Config+0x21c>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e002      	b.n	8001c7c <GPIO_Config+0x21c>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <GPIO_Config+0x21c>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4093      	lsls	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
		    	SYSCFG->EXTICR[position >> 2] = temp;
 8001c8c:	4935      	ldr	r1, [pc, #212]	@ (8001d64 <GPIO_Config+0x304>)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		        temp = EXTI->RTSR;
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d88 <GPIO_Config+0x328>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)iocurrent);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
		        if ((GPIO_Conf->MODE & TRIGGER_RISING) != 0x00u)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <GPIO_Config+0x25e>
		        {
		        	temp |= iocurrent;
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
		        }
		        EXTI->RTSR = temp;
 8001cbe:	4a32      	ldr	r2, [pc, #200]	@ (8001d88 <GPIO_Config+0x328>)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	6093      	str	r3, [r2, #8]

		        temp = EXTI->FTSR;
 8001cc4:	4b30      	ldr	r3, [pc, #192]	@ (8001d88 <GPIO_Config+0x328>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)iocurrent);
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
		        if ((GPIO_Conf->MODE & TRIGGER_FALLING) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <GPIO_Config+0x288>
		        {
		        	temp |= iocurrent;
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
		        }
		        EXTI->FTSR = temp;
 8001ce8:	4a27      	ldr	r2, [pc, #156]	@ (8001d88 <GPIO_Config+0x328>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	60d3      	str	r3, [r2, #12]

		        temp = EXTI->EMR;
 8001cee:	4b26      	ldr	r3, [pc, #152]	@ (8001d88 <GPIO_Config+0x328>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)iocurrent);
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
		        if ((GPIO_Conf->MODE & EXTI_EVT) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <GPIO_Config+0x2b2>
		        {
		        	temp |= iocurrent;
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
		        }
		        EXTI->EMR = temp;
 8001d12:	4a1d      	ldr	r2, [pc, #116]	@ (8001d88 <GPIO_Config+0x328>)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	6053      	str	r3, [r2, #4]

		        temp = EXTI->IMR;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <GPIO_Config+0x328>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	613b      	str	r3, [r7, #16]
		        temp &= ~((uint32_t)iocurrent);
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
		        if ((GPIO_Conf->MODE & EXTI_IT) != 0x00u)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <GPIO_Config+0x2dc>
		        {
		        	temp |= iocurrent;
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
		        }
		        EXTI->IMR = temp;
 8001d3c:	4a12      	ldr	r2, [pc, #72]	@ (8001d88 <GPIO_Config+0x328>)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	6013      	str	r3, [r2, #0]
	for(position = 0; position < GPIO_NUMBER; position++)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3301      	adds	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	f67f ae98 	bls.w	8001a80 <GPIO_Config+0x20>
		    }
		}
	}
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40013800 	.word	0x40013800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40021400 	.word	0x40021400
 8001d80:	40021800 	.word	0x40021800
 8001d84:	40021c00 	.word	0x40021c00
 8001d88:	40013c00 	.word	0x40013c00

08001d8c <GPIO_Write>:

void GPIO_Write(GPIO_TypeDef *GPIOx, uint16_t Pin, GPIO_State State)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	707b      	strb	r3, [r7, #1]
	if(State != GPIO_RESET)
 8001d9c:	787b      	ldrb	r3, [r7, #1]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <GPIO_Write+0x1e>
	{
		GPIOx->BSRR = Pin;
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]
	}
	else
	{
		GPIOx->BSRR = (uint32_t)Pin << 16;
	}
}
 8001da8:	e003      	b.n	8001db2 <GPIO_Write+0x26>
		GPIOx->BSRR = (uint32_t)Pin << 16;
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	041a      	lsls	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	619a      	str	r2, [r3, #24]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <NMI_Handler>:
 */

#include "interrupt.h"

void NMI_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
	while(1);
 8001dc2:	bf00      	nop
 8001dc4:	e7fd      	b.n	8001dc2 <NMI_Handler+0x4>

08001dc6 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
	while(1);
 8001dca:	bf00      	nop
 8001dcc:	e7fd      	b.n	8001dca <HardFault_Handler+0x4>

08001dce <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
	while(1);
 8001dd2:	bf00      	nop
 8001dd4:	e7fd      	b.n	8001dd2 <MemManage_Handler+0x4>

08001dd6 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
	while(1);
 8001dda:	bf00      	nop
 8001ddc:	e7fd      	b.n	8001dda <BusFault_Handler+0x4>

08001dde <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
	while(1);
 8001de2:	bf00      	nop
 8001de4:	e7fd      	b.n	8001de2 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:
}

void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
	uwTick += 1U;
 8001e14:	4b04      	ldr	r3, [pc, #16]	@ (8001e28 <SysTick_Handler+0x18>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	4a03      	ldr	r2, [pc, #12]	@ (8001e28 <SysTick_Handler+0x18>)
 8001e1c:	6013      	str	r3, [r2, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	20000284 	.word	0x20000284

08001e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x40>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x40>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00
 8001e70:	05fa0000 	.word	0x05fa0000

08001e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e78:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <__NVIC_GetPriorityGrouping+0x18>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	f003 0307 	and.w	r3, r3, #7
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db0a      	blt.n	8001eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	490c      	ldr	r1, [pc, #48]	@ (8001edc <__NVIC_SetPriority+0x4c>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb8:	e00a      	b.n	8001ed0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4908      	ldr	r1, [pc, #32]	@ (8001ee0 <__NVIC_SetPriority+0x50>)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3b04      	subs	r3, #4
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	440b      	add	r3, r1
 8001ece:	761a      	strb	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	@ 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f1c3 0307 	rsb	r3, r3, #7
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	bf28      	it	cs
 8001f02:	2304      	movcs	r3, #4
 8001f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d902      	bls.n	8001f14 <NVIC_EncodePriority+0x30>
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3b03      	subs	r3, #3
 8001f12:	e000      	b.n	8001f16 <NVIC_EncodePriority+0x32>
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43d9      	mvns	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	4313      	orrs	r3, r2
         );
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	@ 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f7ff ff8e 	bl	8001e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <System_Config>:

#include "system_config.h"


void System_Config(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	NVIC_SetPriorityGrouping((uint32_t)TICK_INT_PRIORITY);
 8001f94:	2003      	movs	r0, #3
 8001f96:	f7ff ff49 	bl	8001e2c <__NVIC_SetPriorityGrouping>

	Tick_Init(TICK_INT_PRIORITY);
 8001f9a:	2003      	movs	r0, #3
 8001f9c:	f000 f812 	bl	8001fc4 <Tick_Init>

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <System_Config+0x2c>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa4:	4a05      	ldr	r2, [pc, #20]	@ (8001fbc <System_Config+0x2c>)
 8001fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	6413      	str	r3, [r2, #64]	@ 0x40
	MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_CR1_VOS);
 8001fac:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <System_Config+0x30>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a03      	ldr	r2, [pc, #12]	@ (8001fc0 <System_Config+0x30>)
 8001fb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40007000 	.word	0x40007000

08001fc4 <Tick_Init>:

void Tick_Init(uint32_t TickPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	uint32_t priority_group = 0x00;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]

	priority_group = NVIC_GetPriorityGrouping();
 8001fd0:	f7ff ff50 	bl	8001e74 <__NVIC_GetPriorityGrouping>
 8001fd4:	60f8      	str	r0, [r7, #12]
	SysTick_Config(SystemCoreClock / (1000U / 1U));
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <Tick_Init+0x50>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a0f      	ldr	r2, [pc, #60]	@ (8002018 <Tick_Init+0x54>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ffb2 	bl	8001f4c <SysTick_Config>

	if(TickPriority < (1U << __NVIC_PRIO_BITS))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b0f      	cmp	r3, #15
 8001fec:	d80d      	bhi.n	800200a <Tick_Init+0x46>
	{
		NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(priority_group, TickPriority, 0));
 8001fee:	2200      	movs	r2, #0
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff ff76 	bl	8001ee4 <NVIC_EncodePriority>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f7ff ff46 	bl	8001e90 <__NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8002004:	4a05      	ldr	r2, [pc, #20]	@ (800201c <Tick_Init+0x58>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6013      	str	r3, [r2, #0]
	}
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000000 	.word	0x20000000
 8002018:	10624dd3 	.word	0x10624dd3
 800201c:	20000004 	.word	0x20000004

08002020 <UART_Config>:

static void UART_EndRxTransfer(UART_HandleTypeDef *huart);


Error_HandleTypeDef UART_Config(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	if(huart == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <UART_Config+0x12>
	{
		return STATE_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e039      	b.n	80020a6 <UART_Config+0x86>
	}

	if(huart->gSTATE == UART_STATE_RST)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <UART_Config+0x28>
	{
		huart->LOCK = UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

		UART_Pin_Config(huart);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fb08 	bl	8002658 <UART_Pin_Config>
	}
	huart->gSTATE = UART_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2224      	movs	r2, #36	@ 0x24
 800204c:	675a      	str	r2, [r3, #116]	@ 0x74

	huart->INSTANCE->CR1 &= ~(USART_CR1_UE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0201 	bic.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]
	if(huart->ADV_INIT.ADV_FEAT_INIT != 0x00U)
	{

	}

	if(UART_SetConfig(huart) == STATE_ERROR)
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f826 	bl	80020b0 <UART_SetConfig>
 8002064:	4603      	mov	r3, r0
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <UART_Config+0x4e>
	{
		return STATE_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e01b      	b.n	80020a6 <UART_Config+0x86>
	}

	CLEAR_BIT(huart->INSTANCE->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800207c:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(huart->INSTANCE->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800208c:	609a      	str	r2, [r3, #8]

	huart->INSTANCE->CR1 |= USART_CR1_UE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]

	return (UART_CheckIdleState(huart));
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fa82 	bl	80025a8 <UART_CheckIdleState>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <UART_SetConfig>:

Error_HandleTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;
	uint16_t brrtemp;
	UART_ClockSourceTypeDef clocksource;
	uint32_t usartdiv;
	Error_HandleTypeDef ret = STATE_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	77bb      	strb	r3, [r7, #30]
	uint32_t pclk;

	tmpreg = (uint32_t)huart->INIT.WORD_LEN | huart->INIT.PARITY | huart->INIT.MODE | huart->INIT.OVER_SAMPLE ;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
	MODIFY_REG((huart->INSTANCE->CR1), USART_CR1_FIELDS, tmpreg);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4ba6      	ldr	r3, [pc, #664]	@ (8002374 <UART_SetConfig+0x2c4>)
 80020dc:	4013      	ands	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	6979      	ldr	r1, [r7, #20]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6013      	str	r3, [r2, #0]

	MODIFY_REG(huart->INSTANCE->CR2, USART_CR2_STOP, huart->INIT.STOP_BIT);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]

	tmpreg = (uint32_t)huart->INIT.FLOW_CTRL;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	617b      	str	r3, [r7, #20]

	tmpreg |= huart->INIT.ONEB_SAMPLE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
	MODIFY_REG(huart->INSTANCE->CR3, USART_CR3_FIELDS, tmpreg);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
	UART_GETCLOCKSOURCE(huart, clocksource);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a94      	ldr	r2, [pc, #592]	@ (8002378 <UART_SetConfig+0x2c8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d120      	bne.n	800216e <UART_SetConfig+0xbe>
 800212c:	4b93      	ldr	r3, [pc, #588]	@ (800237c <UART_SetConfig+0x2cc>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b03      	cmp	r3, #3
 8002138:	d816      	bhi.n	8002168 <UART_SetConfig+0xb8>
 800213a:	a201      	add	r2, pc, #4	@ (adr r2, 8002140 <UART_SetConfig+0x90>)
 800213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002140:	08002151 	.word	0x08002151
 8002144:	0800215d 	.word	0x0800215d
 8002148:	08002157 	.word	0x08002157
 800214c:	08002163 	.word	0x08002163
 8002150:	2301      	movs	r3, #1
 8002152:	77fb      	strb	r3, [r7, #31]
 8002154:	e150      	b.n	80023f8 <UART_SetConfig+0x348>
 8002156:	2302      	movs	r3, #2
 8002158:	77fb      	strb	r3, [r7, #31]
 800215a:	e14d      	b.n	80023f8 <UART_SetConfig+0x348>
 800215c:	2304      	movs	r3, #4
 800215e:	77fb      	strb	r3, [r7, #31]
 8002160:	e14a      	b.n	80023f8 <UART_SetConfig+0x348>
 8002162:	2308      	movs	r3, #8
 8002164:	77fb      	strb	r3, [r7, #31]
 8002166:	e147      	b.n	80023f8 <UART_SetConfig+0x348>
 8002168:	2310      	movs	r3, #16
 800216a:	77fb      	strb	r3, [r7, #31]
 800216c:	e144      	b.n	80023f8 <UART_SetConfig+0x348>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a83      	ldr	r2, [pc, #524]	@ (8002380 <UART_SetConfig+0x2d0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d132      	bne.n	80021de <UART_SetConfig+0x12e>
 8002178:	4b80      	ldr	r3, [pc, #512]	@ (800237c <UART_SetConfig+0x2cc>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d828      	bhi.n	80021d8 <UART_SetConfig+0x128>
 8002186:	a201      	add	r2, pc, #4	@ (adr r2, 800218c <UART_SetConfig+0xdc>)
 8002188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218c:	080021c1 	.word	0x080021c1
 8002190:	080021d9 	.word	0x080021d9
 8002194:	080021d9 	.word	0x080021d9
 8002198:	080021d9 	.word	0x080021d9
 800219c:	080021cd 	.word	0x080021cd
 80021a0:	080021d9 	.word	0x080021d9
 80021a4:	080021d9 	.word	0x080021d9
 80021a8:	080021d9 	.word	0x080021d9
 80021ac:	080021c7 	.word	0x080021c7
 80021b0:	080021d9 	.word	0x080021d9
 80021b4:	080021d9 	.word	0x080021d9
 80021b8:	080021d9 	.word	0x080021d9
 80021bc:	080021d3 	.word	0x080021d3
 80021c0:	2300      	movs	r3, #0
 80021c2:	77fb      	strb	r3, [r7, #31]
 80021c4:	e118      	b.n	80023f8 <UART_SetConfig+0x348>
 80021c6:	2302      	movs	r3, #2
 80021c8:	77fb      	strb	r3, [r7, #31]
 80021ca:	e115      	b.n	80023f8 <UART_SetConfig+0x348>
 80021cc:	2304      	movs	r3, #4
 80021ce:	77fb      	strb	r3, [r7, #31]
 80021d0:	e112      	b.n	80023f8 <UART_SetConfig+0x348>
 80021d2:	2308      	movs	r3, #8
 80021d4:	77fb      	strb	r3, [r7, #31]
 80021d6:	e10f      	b.n	80023f8 <UART_SetConfig+0x348>
 80021d8:	2310      	movs	r3, #16
 80021da:	77fb      	strb	r3, [r7, #31]
 80021dc:	e10c      	b.n	80023f8 <UART_SetConfig+0x348>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a68      	ldr	r2, [pc, #416]	@ (8002384 <UART_SetConfig+0x2d4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d120      	bne.n	800222a <UART_SetConfig+0x17a>
 80021e8:	4b64      	ldr	r3, [pc, #400]	@ (800237c <UART_SetConfig+0x2cc>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80021f2:	2b30      	cmp	r3, #48	@ 0x30
 80021f4:	d013      	beq.n	800221e <UART_SetConfig+0x16e>
 80021f6:	2b30      	cmp	r3, #48	@ 0x30
 80021f8:	d814      	bhi.n	8002224 <UART_SetConfig+0x174>
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d009      	beq.n	8002212 <UART_SetConfig+0x162>
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d810      	bhi.n	8002224 <UART_SetConfig+0x174>
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <UART_SetConfig+0x15c>
 8002206:	2b10      	cmp	r3, #16
 8002208:	d006      	beq.n	8002218 <UART_SetConfig+0x168>
 800220a:	e00b      	b.n	8002224 <UART_SetConfig+0x174>
 800220c:	2300      	movs	r3, #0
 800220e:	77fb      	strb	r3, [r7, #31]
 8002210:	e0f2      	b.n	80023f8 <UART_SetConfig+0x348>
 8002212:	2302      	movs	r3, #2
 8002214:	77fb      	strb	r3, [r7, #31]
 8002216:	e0ef      	b.n	80023f8 <UART_SetConfig+0x348>
 8002218:	2304      	movs	r3, #4
 800221a:	77fb      	strb	r3, [r7, #31]
 800221c:	e0ec      	b.n	80023f8 <UART_SetConfig+0x348>
 800221e:	2308      	movs	r3, #8
 8002220:	77fb      	strb	r3, [r7, #31]
 8002222:	e0e9      	b.n	80023f8 <UART_SetConfig+0x348>
 8002224:	2310      	movs	r3, #16
 8002226:	77fb      	strb	r3, [r7, #31]
 8002228:	e0e6      	b.n	80023f8 <UART_SetConfig+0x348>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a56      	ldr	r2, [pc, #344]	@ (8002388 <UART_SetConfig+0x2d8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d120      	bne.n	8002276 <UART_SetConfig+0x1c6>
 8002234:	4b51      	ldr	r3, [pc, #324]	@ (800237c <UART_SetConfig+0x2cc>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800223e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002240:	d013      	beq.n	800226a <UART_SetConfig+0x1ba>
 8002242:	2bc0      	cmp	r3, #192	@ 0xc0
 8002244:	d814      	bhi.n	8002270 <UART_SetConfig+0x1c0>
 8002246:	2b80      	cmp	r3, #128	@ 0x80
 8002248:	d009      	beq.n	800225e <UART_SetConfig+0x1ae>
 800224a:	2b80      	cmp	r3, #128	@ 0x80
 800224c:	d810      	bhi.n	8002270 <UART_SetConfig+0x1c0>
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <UART_SetConfig+0x1a8>
 8002252:	2b40      	cmp	r3, #64	@ 0x40
 8002254:	d006      	beq.n	8002264 <UART_SetConfig+0x1b4>
 8002256:	e00b      	b.n	8002270 <UART_SetConfig+0x1c0>
 8002258:	2300      	movs	r3, #0
 800225a:	77fb      	strb	r3, [r7, #31]
 800225c:	e0cc      	b.n	80023f8 <UART_SetConfig+0x348>
 800225e:	2302      	movs	r3, #2
 8002260:	77fb      	strb	r3, [r7, #31]
 8002262:	e0c9      	b.n	80023f8 <UART_SetConfig+0x348>
 8002264:	2304      	movs	r3, #4
 8002266:	77fb      	strb	r3, [r7, #31]
 8002268:	e0c6      	b.n	80023f8 <UART_SetConfig+0x348>
 800226a:	2308      	movs	r3, #8
 800226c:	77fb      	strb	r3, [r7, #31]
 800226e:	e0c3      	b.n	80023f8 <UART_SetConfig+0x348>
 8002270:	2310      	movs	r3, #16
 8002272:	77fb      	strb	r3, [r7, #31]
 8002274:	e0c0      	b.n	80023f8 <UART_SetConfig+0x348>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a44      	ldr	r2, [pc, #272]	@ (800238c <UART_SetConfig+0x2dc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d125      	bne.n	80022cc <UART_SetConfig+0x21c>
 8002280:	4b3e      	ldr	r3, [pc, #248]	@ (800237c <UART_SetConfig+0x2cc>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800228a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800228e:	d017      	beq.n	80022c0 <UART_SetConfig+0x210>
 8002290:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002294:	d817      	bhi.n	80022c6 <UART_SetConfig+0x216>
 8002296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800229a:	d00b      	beq.n	80022b4 <UART_SetConfig+0x204>
 800229c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022a0:	d811      	bhi.n	80022c6 <UART_SetConfig+0x216>
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <UART_SetConfig+0x1fe>
 80022a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022aa:	d006      	beq.n	80022ba <UART_SetConfig+0x20a>
 80022ac:	e00b      	b.n	80022c6 <UART_SetConfig+0x216>
 80022ae:	2300      	movs	r3, #0
 80022b0:	77fb      	strb	r3, [r7, #31]
 80022b2:	e0a1      	b.n	80023f8 <UART_SetConfig+0x348>
 80022b4:	2302      	movs	r3, #2
 80022b6:	77fb      	strb	r3, [r7, #31]
 80022b8:	e09e      	b.n	80023f8 <UART_SetConfig+0x348>
 80022ba:	2304      	movs	r3, #4
 80022bc:	77fb      	strb	r3, [r7, #31]
 80022be:	e09b      	b.n	80023f8 <UART_SetConfig+0x348>
 80022c0:	2308      	movs	r3, #8
 80022c2:	77fb      	strb	r3, [r7, #31]
 80022c4:	e098      	b.n	80023f8 <UART_SetConfig+0x348>
 80022c6:	2310      	movs	r3, #16
 80022c8:	77fb      	strb	r3, [r7, #31]
 80022ca:	e095      	b.n	80023f8 <UART_SetConfig+0x348>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002390 <UART_SetConfig+0x2e0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d125      	bne.n	8002322 <UART_SetConfig+0x272>
 80022d6:	4b29      	ldr	r3, [pc, #164]	@ (800237c <UART_SetConfig+0x2cc>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80022e4:	d017      	beq.n	8002316 <UART_SetConfig+0x266>
 80022e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80022ea:	d817      	bhi.n	800231c <UART_SetConfig+0x26c>
 80022ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022f0:	d00b      	beq.n	800230a <UART_SetConfig+0x25a>
 80022f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022f6:	d811      	bhi.n	800231c <UART_SetConfig+0x26c>
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <UART_SetConfig+0x254>
 80022fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002300:	d006      	beq.n	8002310 <UART_SetConfig+0x260>
 8002302:	e00b      	b.n	800231c <UART_SetConfig+0x26c>
 8002304:	2301      	movs	r3, #1
 8002306:	77fb      	strb	r3, [r7, #31]
 8002308:	e076      	b.n	80023f8 <UART_SetConfig+0x348>
 800230a:	2302      	movs	r3, #2
 800230c:	77fb      	strb	r3, [r7, #31]
 800230e:	e073      	b.n	80023f8 <UART_SetConfig+0x348>
 8002310:	2304      	movs	r3, #4
 8002312:	77fb      	strb	r3, [r7, #31]
 8002314:	e070      	b.n	80023f8 <UART_SetConfig+0x348>
 8002316:	2308      	movs	r3, #8
 8002318:	77fb      	strb	r3, [r7, #31]
 800231a:	e06d      	b.n	80023f8 <UART_SetConfig+0x348>
 800231c:	2310      	movs	r3, #16
 800231e:	77fb      	strb	r3, [r7, #31]
 8002320:	e06a      	b.n	80023f8 <UART_SetConfig+0x348>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a1b      	ldr	r2, [pc, #108]	@ (8002394 <UART_SetConfig+0x2e4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d138      	bne.n	800239e <UART_SetConfig+0x2ee>
 800232c:	4b13      	ldr	r3, [pc, #76]	@ (800237c <UART_SetConfig+0x2cc>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002332:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002336:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800233a:	d017      	beq.n	800236c <UART_SetConfig+0x2bc>
 800233c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002340:	d82a      	bhi.n	8002398 <UART_SetConfig+0x2e8>
 8002342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002346:	d00b      	beq.n	8002360 <UART_SetConfig+0x2b0>
 8002348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800234c:	d824      	bhi.n	8002398 <UART_SetConfig+0x2e8>
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <UART_SetConfig+0x2aa>
 8002352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002356:	d006      	beq.n	8002366 <UART_SetConfig+0x2b6>
 8002358:	e01e      	b.n	8002398 <UART_SetConfig+0x2e8>
 800235a:	2300      	movs	r3, #0
 800235c:	77fb      	strb	r3, [r7, #31]
 800235e:	e04b      	b.n	80023f8 <UART_SetConfig+0x348>
 8002360:	2302      	movs	r3, #2
 8002362:	77fb      	strb	r3, [r7, #31]
 8002364:	e048      	b.n	80023f8 <UART_SetConfig+0x348>
 8002366:	2304      	movs	r3, #4
 8002368:	77fb      	strb	r3, [r7, #31]
 800236a:	e045      	b.n	80023f8 <UART_SetConfig+0x348>
 800236c:	2308      	movs	r3, #8
 800236e:	77fb      	strb	r3, [r7, #31]
 8002370:	e042      	b.n	80023f8 <UART_SetConfig+0x348>
 8002372:	bf00      	nop
 8002374:	efff69f3 	.word	0xefff69f3
 8002378:	40011000 	.word	0x40011000
 800237c:	40023800 	.word	0x40023800
 8002380:	40004400 	.word	0x40004400
 8002384:	40004800 	.word	0x40004800
 8002388:	40004c00 	.word	0x40004c00
 800238c:	40005000 	.word	0x40005000
 8002390:	40011400 	.word	0x40011400
 8002394:	40007800 	.word	0x40007800
 8002398:	2310      	movs	r3, #16
 800239a:	77fb      	strb	r3, [r7, #31]
 800239c:	e02c      	b.n	80023f8 <UART_SetConfig+0x348>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a7e      	ldr	r2, [pc, #504]	@ (800259c <UART_SetConfig+0x4ec>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d125      	bne.n	80023f4 <UART_SetConfig+0x344>
 80023a8:	4b7d      	ldr	r3, [pc, #500]	@ (80025a0 <UART_SetConfig+0x4f0>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023b2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80023b6:	d017      	beq.n	80023e8 <UART_SetConfig+0x338>
 80023b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80023bc:	d817      	bhi.n	80023ee <UART_SetConfig+0x33e>
 80023be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023c2:	d00b      	beq.n	80023dc <UART_SetConfig+0x32c>
 80023c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023c8:	d811      	bhi.n	80023ee <UART_SetConfig+0x33e>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <UART_SetConfig+0x326>
 80023ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023d2:	d006      	beq.n	80023e2 <UART_SetConfig+0x332>
 80023d4:	e00b      	b.n	80023ee <UART_SetConfig+0x33e>
 80023d6:	2300      	movs	r3, #0
 80023d8:	77fb      	strb	r3, [r7, #31]
 80023da:	e00d      	b.n	80023f8 <UART_SetConfig+0x348>
 80023dc:	2302      	movs	r3, #2
 80023de:	77fb      	strb	r3, [r7, #31]
 80023e0:	e00a      	b.n	80023f8 <UART_SetConfig+0x348>
 80023e2:	2304      	movs	r3, #4
 80023e4:	77fb      	strb	r3, [r7, #31]
 80023e6:	e007      	b.n	80023f8 <UART_SetConfig+0x348>
 80023e8:	2308      	movs	r3, #8
 80023ea:	77fb      	strb	r3, [r7, #31]
 80023ec:	e004      	b.n	80023f8 <UART_SetConfig+0x348>
 80023ee:	2310      	movs	r3, #16
 80023f0:	77fb      	strb	r3, [r7, #31]
 80023f2:	e001      	b.n	80023f8 <UART_SetConfig+0x348>
 80023f4:	2310      	movs	r3, #16
 80023f6:	77fb      	strb	r3, [r7, #31]

	if (huart->INIT.OVER_SAMPLE == USART_CR1_OVER8)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002400:	d168      	bne.n	80024d4 <UART_SetConfig+0x424>
	{
		switch (clocksource)
 8002402:	7ffb      	ldrb	r3, [r7, #31]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d834      	bhi.n	8002472 <UART_SetConfig+0x3c2>
 8002408:	a201      	add	r2, pc, #4	@ (adr r2, 8002410 <UART_SetConfig+0x360>)
 800240a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240e:	bf00      	nop
 8002410:	08002435 	.word	0x08002435
 8002414:	08002449 	.word	0x08002449
 8002418:	0800245d 	.word	0x0800245d
 800241c:	08002473 	.word	0x08002473
 8002420:	08002463 	.word	0x08002463
 8002424:	08002473 	.word	0x08002473
 8002428:	08002473 	.word	0x08002473
 800242c:	08002473 	.word	0x08002473
 8002430:	0800246b 	.word	0x0800246b
		{
		case UART_CLOCKSOURCE_PCLK1:
			pclk = RCC_GetPCLK_Freq((RCC->CFGR & RCC_CFGR_PPRE1), RCC_CFGR_PPRE1_Pos);
 8002434:	4b5a      	ldr	r3, [pc, #360]	@ (80025a0 <UART_SetConfig+0x4f0>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800243c:	210a      	movs	r1, #10
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fa2e 	bl	80018a0 <RCC_GetPCLK_Freq>
 8002444:	61b8      	str	r0, [r7, #24]
			break;
 8002446:	e019      	b.n	800247c <UART_SetConfig+0x3cc>
		case UART_CLOCKSOURCE_PCLK2:
			pclk = RCC_GetPCLK_Freq((RCC->CFGR & RCC_CFGR_PPRE2), RCC_CFGR_PPRE2_Pos);
 8002448:	4b55      	ldr	r3, [pc, #340]	@ (80025a0 <UART_SetConfig+0x4f0>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002450:	210d      	movs	r1, #13
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fa24 	bl	80018a0 <RCC_GetPCLK_Freq>
 8002458:	61b8      	str	r0, [r7, #24]
	        break;
 800245a:	e00f      	b.n	800247c <UART_SetConfig+0x3cc>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 800245c:	4b51      	ldr	r3, [pc, #324]	@ (80025a4 <UART_SetConfig+0x4f4>)
 800245e:	61bb      	str	r3, [r7, #24]
	        break;
 8002460:	e00c      	b.n	800247c <UART_SetConfig+0x3cc>
		case UART_CLOCKSOURCE_SYSCLK:
	        pclk = Get_SysClock_Freq();
 8002462:	f7ff f92f 	bl	80016c4 <Get_SysClock_Freq>
 8002466:	61b8      	str	r0, [r7, #24]
	        break;
 8002468:	e008      	b.n	800247c <UART_SetConfig+0x3cc>
		case UART_CLOCKSOURCE_LSE:
	        pclk = (uint32_t) LSE_VALUE;
 800246a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800246e:	61bb      	str	r3, [r7, #24]
	        break;
 8002470:	e004      	b.n	800247c <UART_SetConfig+0x3cc>
		default:
	        pclk = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
	        ret = STATE_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	77bb      	strb	r3, [r7, #30]
	        break;
 800247a:	bf00      	nop
		}
		if (pclk != 0U)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8080 	beq.w	8002584 <UART_SetConfig+0x4d4>
		{
			usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->INIT.BAUD));
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	005a      	lsls	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	085b      	lsrs	r3, r3, #1
 800248e:	441a      	add	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	613b      	str	r3, [r7, #16]
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d916      	bls.n	80024ce <UART_SetConfig+0x41e>
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a6:	d212      	bcs.n	80024ce <UART_SetConfig+0x41e>
			{
				brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f023 030f 	bic.w	r3, r3, #15
 80024b0:	81fb      	strh	r3, [r7, #14]
				brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	b29a      	uxth	r2, r3
 80024be:	89fb      	ldrh	r3, [r7, #14]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	81fb      	strh	r3, [r7, #14]
				huart->INSTANCE->BRR = brrtemp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	89fa      	ldrh	r2, [r7, #14]
 80024ca:	60da      	str	r2, [r3, #12]
 80024cc:	e05a      	b.n	8002584 <UART_SetConfig+0x4d4>
			}
			else
			{
				ret = STATE_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	77bb      	strb	r3, [r7, #30]
 80024d2:	e057      	b.n	8002584 <UART_SetConfig+0x4d4>
			}
		}
	}
	else
	{
	    switch (clocksource)
 80024d4:	7ffb      	ldrb	r3, [r7, #31]
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d833      	bhi.n	8002542 <UART_SetConfig+0x492>
 80024da:	a201      	add	r2, pc, #4	@ (adr r2, 80024e0 <UART_SetConfig+0x430>)
 80024dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e0:	08002505 	.word	0x08002505
 80024e4:	08002519 	.word	0x08002519
 80024e8:	0800252d 	.word	0x0800252d
 80024ec:	08002543 	.word	0x08002543
 80024f0:	08002533 	.word	0x08002533
 80024f4:	08002543 	.word	0x08002543
 80024f8:	08002543 	.word	0x08002543
 80024fc:	08002543 	.word	0x08002543
 8002500:	0800253b 	.word	0x0800253b
	    {
	    case UART_CLOCKSOURCE_PCLK1:
	        pclk = RCC_GetPCLK_Freq((RCC->CFGR & RCC_CFGR_PPRE1), RCC_CFGR_PPRE1_Pos);
 8002504:	4b26      	ldr	r3, [pc, #152]	@ (80025a0 <UART_SetConfig+0x4f0>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800250c:	210a      	movs	r1, #10
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f9c6 	bl	80018a0 <RCC_GetPCLK_Freq>
 8002514:	61b8      	str	r0, [r7, #24]
	        break;
 8002516:	e019      	b.n	800254c <UART_SetConfig+0x49c>
	    case UART_CLOCKSOURCE_PCLK2:
	        pclk = RCC_GetPCLK_Freq((RCC->CFGR & RCC_CFGR_PPRE2), RCC_CFGR_PPRE2_Pos);
 8002518:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <UART_SetConfig+0x4f0>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002520:	210d      	movs	r1, #13
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f9bc 	bl	80018a0 <RCC_GetPCLK_Freq>
 8002528:	61b8      	str	r0, [r7, #24]
	        break;
 800252a:	e00f      	b.n	800254c <UART_SetConfig+0x49c>
	    case UART_CLOCKSOURCE_HSI:
	        pclk = (uint32_t) HSI_VALUE;
 800252c:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <UART_SetConfig+0x4f4>)
 800252e:	61bb      	str	r3, [r7, #24]
	        break;
 8002530:	e00c      	b.n	800254c <UART_SetConfig+0x49c>
	    case UART_CLOCKSOURCE_SYSCLK:
	        pclk = Get_SysClock_Freq();
 8002532:	f7ff f8c7 	bl	80016c4 <Get_SysClock_Freq>
 8002536:	61b8      	str	r0, [r7, #24]
	        break;
 8002538:	e008      	b.n	800254c <UART_SetConfig+0x49c>
	    case UART_CLOCKSOURCE_LSE:
	        pclk = (uint32_t) LSE_VALUE;
 800253a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800253e:	61bb      	str	r3, [r7, #24]
	        break;
 8002540:	e004      	b.n	800254c <UART_SetConfig+0x49c>
	    default:
	        pclk = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
	        ret = STATE_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	77bb      	strb	r3, [r7, #30]
	        break;
 800254a:	bf00      	nop
	    }

	    if (pclk != 0U)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d018      	beq.n	8002584 <UART_SetConfig+0x4d4>
	    {
	      /* USARTDIV must be greater than or equal to 0d16 */
	    	usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->INIT.BAUD));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	085a      	lsrs	r2, r3, #1
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	441a      	add	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	613b      	str	r3, [r7, #16]
	    	if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	d909      	bls.n	8002580 <UART_SetConfig+0x4d0>
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002572:	d205      	bcs.n	8002580 <UART_SetConfig+0x4d0>
	    	{
	    		huart->INSTANCE->BRR = (uint16_t)usartdiv;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	b29a      	uxth	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	e001      	b.n	8002584 <UART_SetConfig+0x4d4>
	    	}
	    	else
	    	{
	    		ret = STATE_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	77bb      	strb	r3, [r7, #30]
	    	}
	    }
	}

	huart->TX_ISR = NULL;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	669a      	str	r2, [r3, #104]	@ 0x68
	huart->RX_ISR = NULL;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	66da      	str	r2, [r3, #108]	@ 0x6c

	return ret;
 8002590:	7fbb      	ldrb	r3, [r7, #30]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40007c00 	.word	0x40007c00
 80025a0:	40023800 	.word	0x40023800
 80025a4:	00f42400 	.word	0x00f42400

080025a8 <UART_CheckIdleState>:

Error_HandleTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08c      	sub	sp, #48	@ 0x30
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	6078      	str	r0, [r7, #4]
	uint32_t TickStart;

	huart->ERR_CODE = 0x00U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	67da      	str	r2, [r3, #124]	@ 0x7c
	TickStart = uwTick;
 80025b6:	4b27      	ldr	r3, [pc, #156]	@ (8002654 <UART_CheckIdleState+0xac>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24

	if ((huart->INSTANCE->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d12e      	bne.n	8002628 <UART_CheckIdleState+0x80>
	{
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, TickStart, UART_TIMEOUT_VALUE) != STATE_OK)
 80025ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	2200      	movs	r2, #0
 80025d4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f88f 	bl	80026fc <UART_WaitOnFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d021      	beq.n	8002628 <UART_CheckIdleState+0x80>
		{
			ATOMIC_CLEAR_BIT(huart->INSTANCE->CR1, USART_CR1_TXEIE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	e853 3f00 	ldrex	r3, [r3]
 80025f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025f8:	623b      	str	r3, [r7, #32]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	e841 2300 	strex	r3, r2, [r1]
 800260e:	617b      	str	r3, [r7, #20]
   return(result);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1e6      	bne.n	80025e4 <UART_CheckIdleState+0x3c>

			huart->gSTATE = 0x20U;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	675a      	str	r2, [r3, #116]	@ 0x74

			do
			{
				huart->LOCK = UNLOCKED;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			}
			while(0);

			return STATE_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e010      	b.n	800264a <UART_CheckIdleState+0xa2>
		}
	}

	huart->gSTATE = 0x20U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	675a      	str	r2, [r3, #116]	@ 0x74
	huart->RX_STATE = 0x20;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	679a      	str	r2, [r3, #120]	@ 0x78
	huart->RECEPT_TYP = 0x00U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	661a      	str	r2, [r3, #96]	@ 0x60
	huart->RX_EVT_TYP = 0x00U;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	665a      	str	r2, [r3, #100]	@ 0x64

	do
	{
		huart->LOCK = UNLOCKED;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	}
	while(0);

	return STATE_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3728      	adds	r7, #40	@ 0x28
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000284 	.word	0x20000284

08002658 <UART_Pin_Config>:

void UART_Pin_Config(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b0a8      	sub	sp, #160	@ 0xa0
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	GPIO_ConfigTypeDef gpio_config = {0};
 8002660:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
	RCC_Periph_CLK_ConfigTypedef periph_clk_config = {0};
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	2280      	movs	r2, #128	@ 0x80
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f001 f86a 	bl	8003752 <memset>

	if(huart->INSTANCE == USART1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1b      	ldr	r2, [pc, #108]	@ (80026f0 <UART_Pin_Config+0x98>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d12f      	bne.n	80026e8 <UART_Pin_Config+0x90>
	{
		periph_clk_config.PeriphClockSelection = (uint32_t)0x40U;
 8002688:	2340      	movs	r3, #64	@ 0x40
 800268a:	60fb      	str	r3, [r7, #12]
		periph_clk_config.Usart1ClockSelection = (uint32_t)0x00U;
 800268c:	2300      	movs	r3, #0
 800268e:	64bb      	str	r3, [r7, #72]	@ 0x48

		if(PeriphCLKConfig(&periph_clk_config) != STATE_OK)
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff f91b 	bl	80018d0 <PeriphCLKConfig>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <UART_Pin_Config+0x4c>
		{
			Error_Handler();
 80026a0:	f000 facc 	bl	8002c3c <Error_Handler>
		}

		do
		{
			SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN);
 80026a4:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <UART_Pin_Config+0x9c>)
 80026a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a8:	4a12      	ldr	r2, [pc, #72]	@ (80026f4 <UART_Pin_Config+0x9c>)
 80026aa:	f043 0310 	orr.w	r3, r3, #16
 80026ae:	6453      	str	r3, [r2, #68]	@ 0x44
		}
		while(0);

		RCC_GPIOCLK_ENABLE(RCC_AHB1ENR_GPIOAEN);
 80026b0:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <UART_Pin_Config+0x9c>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b4:	4a0f      	ldr	r2, [pc, #60]	@ (80026f4 <UART_Pin_Config+0x9c>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6313      	str	r3, [r2, #48]	@ 0x30

		gpio_config.PIN = ((1 << 9) | (1 << 10));
 80026bc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		gpio_config.MODE = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		gpio_config.PULL = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		gpio_config.SPEED = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		gpio_config.ALT = (uint8_t)0x07U;
 80026d6:	2307      	movs	r3, #7
 80026d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

		GPIO_Config(GPIOA, &gpio_config);
 80026dc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80026e0:	4619      	mov	r1, r3
 80026e2:	4805      	ldr	r0, [pc, #20]	@ (80026f8 <UART_Pin_Config+0xa0>)
 80026e4:	f7ff f9bc 	bl	8001a60 <GPIO_Config>
	}
}
 80026e8:	bf00      	nop
 80026ea:	37a0      	adds	r7, #160	@ 0xa0
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40011000 	.word	0x40011000
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020000 	.word	0x40020000

080026fc <UART_WaitOnFlagUntilTimeout>:

Error_HandleTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	71fb      	strb	r3, [r7, #7]
	while(((huart->INSTANCE->ISR & Flag) == Flag) == RESET)
 800270c:	e04c      	b.n	80027a8 <UART_WaitOnFlagUntilTimeout+0xac>
	{
		if(Timeout != MS_MAX_DELAY)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d048      	beq.n	80027a8 <UART_WaitOnFlagUntilTimeout+0xac>
		{
			if((uwTick - Tickstart) > Timeout || Timeout == 0U)
 8002716:	4b2b      	ldr	r3, [pc, #172]	@ (80027c4 <UART_WaitOnFlagUntilTimeout+0xc8>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	429a      	cmp	r2, r3
 8002722:	d302      	bcc.n	800272a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <UART_WaitOnFlagUntilTimeout+0x32>
			{
				return STATE_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e045      	b.n	80027ba <UART_WaitOnFlagUntilTimeout+0xbe>
			}
			if((READ_BIT(huart->INSTANCE->CR1, USART_CR1_RE) != 0U) && (Flag != USART_ISR_TXE) && (Flag != USART_ISR_TC))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d035      	beq.n	80027a8 <UART_WaitOnFlagUntilTimeout+0xac>
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b80      	cmp	r3, #128	@ 0x80
 8002740:	d032      	beq.n	80027a8 <UART_WaitOnFlagUntilTimeout+0xac>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b40      	cmp	r3, #64	@ 0x40
 8002746:	d02f      	beq.n	80027a8 <UART_WaitOnFlagUntilTimeout+0xac>
			{
				if(((huart->INSTANCE->ISR & USART_ISR_ORE) == USART_ISR_ORE) == SET)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b08      	cmp	r3, #8
 8002754:	d10f      	bne.n	8002776 <UART_WaitOnFlagUntilTimeout+0x7a>
				{
					(huart->INSTANCE->ICR) = USART_ICR_ORECF;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2208      	movs	r2, #8
 800275c:	621a      	str	r2, [r3, #32]

					UART_EndRxTransfer(huart);
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f832 	bl	80027c8 <UART_EndRxTransfer>

					huart->ERR_CODE = 0x08U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2208      	movs	r2, #8
 8002768:	67da      	str	r2, [r3, #124]	@ 0x7c

					do
					{
						huart->LOCK = UNLOCKED;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					}
					while(0);

					return STATE_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e021      	b.n	80027ba <UART_WaitOnFlagUntilTimeout+0xbe>
				}
				if(((huart->INSTANCE->ISR & USART_ISR_RTOF) == USART_ISR_RTOF) == SET)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002784:	d110      	bne.n	80027a8 <UART_WaitOnFlagUntilTimeout+0xac>
				{
					(huart->INSTANCE->ICR) = USART_ICR_RTOCF;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800278e:	621a      	str	r2, [r3, #32]

					UART_EndRxTransfer(huart);
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f819 	bl	80027c8 <UART_EndRxTransfer>

					huart->ERR_CODE = 0x20U;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	67da      	str	r2, [r3, #124]	@ 0x7c

					do
					{
						huart->LOCK = UNLOCKED;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
					}
					while(0);

					return STATE_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e008      	b.n	80027ba <UART_WaitOnFlagUntilTimeout+0xbe>
	while(((huart->INSTANCE->ISR & Flag) == Flag) == RESET)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4013      	ands	r3, r2
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d1aa      	bne.n	800270e <UART_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return STATE_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000284 	.word	0x20000284

080027c8 <UART_EndRxTransfer>:

static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b095      	sub	sp, #84	@ 0x54
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	ATOMIC_CLEAR_BIT(huart->INSTANCE->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d8:	e853 3f00 	ldrex	r3, [r3]
 80027dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80027f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027f6:	e841 2300 	strex	r3, r2, [r1]
 80027fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80027fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e6      	bne.n	80027d0 <UART_EndRxTransfer+0x8>
	ATOMIC_CLEAR_BIT(huart->INSTANCE->CR3, USART_CR3_EIE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	3308      	adds	r3, #8
 8002808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	e853 3f00 	ldrex	r3, [r3]
 8002810:	61fb      	str	r3, [r7, #28]
   return(result);
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	64bb      	str	r3, [r7, #72]	@ 0x48
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3308      	adds	r3, #8
 8002820:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002822:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002824:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800282a:	e841 2300 	strex	r3, r2, [r1]
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1e5      	bne.n	8002802 <UART_EndRxTransfer+0x3a>

	if(huart->RECEPT_TYP == 0x01U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283a:	2b01      	cmp	r3, #1
 800283c:	d118      	bne.n	8002870 <UART_EndRxTransfer+0xa8>
	{
		ATOMIC_CLEAR_BIT(huart->INSTANCE->CR1, USART_CR1_IDLEIE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	e853 3f00 	ldrex	r3, [r3]
 800284a:	60bb      	str	r3, [r7, #8]
   return(result);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f023 0310 	bic.w	r3, r3, #16
 8002852:	647b      	str	r3, [r7, #68]	@ 0x44
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002860:	6979      	ldr	r1, [r7, #20]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	e841 2300 	strex	r3, r2, [r1]
 8002868:	613b      	str	r3, [r7, #16]
   return(result);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e6      	bne.n	800283e <UART_EndRxTransfer+0x76>
	}

	huart->RX_STATE = 0x20U;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	679a      	str	r2, [r3, #120]	@ 0x78
	huart->RECEPT_TYP = 0x00U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	661a      	str	r2, [r3, #96]	@ 0x60

	huart->RX_ISR = NULL;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8002882:	bf00      	nop
 8002884:	3754      	adds	r7, #84	@ 0x54
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <UART_Transmit>:

Error_HandleTypeDef UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	@ 0x28
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	80fb      	strh	r3, [r7, #6]
	const uint8_t  *pdata8bits;
	const uint16_t *pdata16bits;
	uint32_t TickStart;

	if (huart->gSTATE == 0x20U)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d16d      	bne.n	8002984 <UART_Transmit+0xf4>
	{
		if(pData == NULL || Size == 0U)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <UART_Transmit+0x24>
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <UART_Transmit+0x28>
		{
			return STATE_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e066      	b.n	8002986 <UART_Transmit+0xf6>
		}

		huart->ERR_CODE = 0x00U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	67da      	str	r2, [r3, #124]	@ 0x7c
		huart->gSTATE = 0x21U;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2221      	movs	r2, #33	@ 0x21
 80028c2:	675a      	str	r2, [r3, #116]	@ 0x74

		TickStart = uwTick;
 80028c4:	4b32      	ldr	r3, [pc, #200]	@ (8002990 <UART_Transmit+0x100>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	617b      	str	r3, [r7, #20]

	    huart->TX_XFER_SIZE  = Size;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	88fa      	ldrh	r2, [r7, #6]
 80028ce:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	    huart->TX_XFER_COUNT = Size;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	88fa      	ldrh	r2, [r7, #6]
 80028d6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

	    if((huart->INIT.WORD_LEN == USART_CR1_M0) && (huart->INIT.PARITY == 0x00))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028e2:	d108      	bne.n	80028f6 <UART_Transmit+0x66>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d104      	bne.n	80028f6 <UART_Transmit+0x66>
	    {
	        pdata8bits = NULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
	        pdata16bits = (const uint16_t *) pData;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	e003      	b.n	80028fe <UART_Transmit+0x6e>
	    }
	    else
	    {
	    	pdata8bits = (const uint8_t *) pData;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	61fb      	str	r3, [r7, #28]
	    	pdata16bits = NULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
	    }

	    while(huart->TX_XFER_COUNT > 0U)
 80028fe:	e036      	b.n	800296e <UART_Transmit+0xde>
	    {
	    	if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TXE, RESET, TickStart, Timeout) != STATE_OK)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2200      	movs	r2, #0
 8002908:	2180      	movs	r1, #128	@ 0x80
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff fef6 	bl	80026fc <UART_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d004      	beq.n	8002920 <UART_Transmit+0x90>
	    	{
	    		huart->gSTATE = 0x20U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	675a      	str	r2, [r3, #116]	@ 0x74

	    		return STATE_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e032      	b.n	8002986 <UART_Transmit+0xf6>
	    	}

	        if (pdata8bits == NULL)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10b      	bne.n	800293e <UART_Transmit+0xae>
	        {
	        	huart->INSTANCE->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002934:	629a      	str	r2, [r3, #40]	@ 0x28
	        	pdata16bits++;
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	3302      	adds	r3, #2
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	e007      	b.n	800294e <UART_Transmit+0xbe>
	        }
	        else
	        {
	        	huart->INSTANCE->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	629a      	str	r2, [r3, #40]	@ 0x28
	        	pdata8bits++;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	3301      	adds	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
	        }
	        if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TC, RESET, TickStart, Timeout) != STATE_OK)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2200      	movs	r2, #0
 8002956:	2140      	movs	r1, #64	@ 0x40
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f7ff fecf 	bl	80026fc <UART_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <UART_Transmit+0xde>
	        {
	        	huart->gSTATE = 0x20U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	675a      	str	r2, [r3, #116]	@ 0x74

	        	return STATE_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e00b      	b.n	8002986 <UART_Transmit+0xf6>
	    while(huart->TX_XFER_COUNT > 0U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1c2      	bne.n	8002900 <UART_Transmit+0x70>
	        }
	    }

	    huart->gSTATE = 0x20U;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	675a      	str	r2, [r3, #116]	@ 0x74

	    return STATE_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	e000      	b.n	8002986 <UART_Transmit+0xf6>
	}
	else
	{
		return STATE_BUSY;
 8002984:	2302      	movs	r3, #2
	}
}
 8002986:	4618      	mov	r0, r3
 8002988:	3720      	adds	r7, #32
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000284 	.word	0x20000284

08002994 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
	System_Config();
 8002998:	f7ff fafa 	bl	8001f90 <System_Config>

	System_Clock_Config();
 800299c:	f000 f828 	bl	80029f0 <System_Clock_Config>

	GPIO_Init();
 80029a0:	f000 f8da 	bl	8002b58 <GPIO_Init>
	UART_Init();
 80029a4:	f000 f91a 	bl	8002bdc <UART_Init>

	Delay_Ms(100);
 80029a8:	2064      	movs	r0, #100	@ 0x64
 80029aa:	f7fe ff57 	bl	800185c <Delay_Ms>
	UART_Transmit(&huart1, (uint8_t*)text, (sizeof(text) / sizeof(text[0])), 100);
 80029ae:	2364      	movs	r3, #100	@ 0x64
 80029b0:	2214      	movs	r2, #20
 80029b2:	490c      	ldr	r1, [pc, #48]	@ (80029e4 <main+0x50>)
 80029b4:	480c      	ldr	r0, [pc, #48]	@ (80029e8 <main+0x54>)
 80029b6:	f7ff ff6b 	bl	8002890 <UART_Transmit>

	while(1)
	{
		GPIO_Write(GPIOA, (1<<0), GPIO_SET);
 80029ba:	2201      	movs	r2, #1
 80029bc:	2101      	movs	r1, #1
 80029be:	480b      	ldr	r0, [pc, #44]	@ (80029ec <main+0x58>)
 80029c0:	f7ff f9e4 	bl	8001d8c <GPIO_Write>
		Delay_Ms(500);
 80029c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029c8:	f7fe ff48 	bl	800185c <Delay_Ms>
		GPIO_Write(GPIOA, (1<<0), GPIO_RESET);
 80029cc:	2200      	movs	r2, #0
 80029ce:	2101      	movs	r1, #1
 80029d0:	4806      	ldr	r0, [pc, #24]	@ (80029ec <main+0x58>)
 80029d2:	f7ff f9db 	bl	8001d8c <GPIO_Write>
		Delay_Ms(500);
 80029d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029da:	f7fe ff3f 	bl	800185c <Delay_Ms>
		GPIO_Write(GPIOA, (1<<0), GPIO_SET);
 80029de:	bf00      	nop
 80029e0:	e7eb      	b.n	80029ba <main+0x26>
 80029e2:	bf00      	nop
 80029e4:	20000008 	.word	0x20000008
 80029e8:	20000204 	.word	0x20000204
 80029ec:	40020000 	.word	0x40020000

080029f0 <System_Clock_Config>:
	}
}

void System_Clock_Config(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b096      	sub	sp, #88	@ 0x58
 80029f4:	af00      	add	r7, sp, #0
	OSC_ConfigSetTypeDef config = {0};
 80029f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029fa:	222c      	movs	r2, #44	@ 0x2c
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fea7 	bl	8003752 <memset>
	Clock_ConfigTypeDef clock_config = {0};
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
 8002a14:	615a      	str	r2, [r3, #20]
	uint32_t TickStart;

	do
	{
		__IO uint32_t tmpreg;
		SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8002a16:	4b4d      	ldr	r3, [pc, #308]	@ (8002b4c <System_Clock_Config+0x15c>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	4a4c      	ldr	r2, [pc, #304]	@ (8002b4c <System_Clock_Config+0x15c>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	@ 0x40
		tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN);
 8002a22:	4b4a      	ldr	r3, [pc, #296]	@ (8002b4c <System_Clock_Config+0x15c>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a2a:	60fb      	str	r3, [r7, #12]
		UNUSED(tmpreg);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
	}while(0);

	do
	{
		__IO uint32_t tmpreg;
		MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_CR1_VOS);
 8002a2e:	4b48      	ldr	r3, [pc, #288]	@ (8002b50 <System_Clock_Config+0x160>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a47      	ldr	r2, [pc, #284]	@ (8002b50 <System_Clock_Config+0x160>)
 8002a34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a38:	6013      	str	r3, [r2, #0]
        tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN);
 8002a3a:	4b44      	ldr	r3, [pc, #272]	@ (8002b4c <System_Clock_Config+0x15c>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a42:	60bb      	str	r3, [r7, #8]
        UNUSED(tmpreg);
 8002a44:	68bb      	ldr	r3, [r7, #8]
	}while(0);

	config.OSC_TYPE = OSC_TYPE_HSE;
 8002a46:	2301      	movs	r3, #1
 8002a48:	62bb      	str	r3, [r7, #40]	@ 0x28
	config.HSE_SET.HSE_STATE = HSE_ON;
 8002a4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
	config.HSI_SET.HSI_STATE = HSI_OFF;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	config.PLL_SET.PLL_STATE = PLL_ON;
 8002a56:	2302      	movs	r3, #2
 8002a58:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	config.PLL_SET.PLLSRC = PLLSRC_HSE;
 8002a5c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a60:	633b      	str	r3, [r7, #48]	@ 0x30
	config.PLL_SET.PLLM = 12;
 8002a62:	230c      	movs	r3, #12
 8002a64:	637b      	str	r3, [r7, #52]	@ 0x34
	config.PLL_SET.PLLN = 216;
 8002a66:	23d8      	movs	r3, #216	@ 0xd8
 8002a68:	63bb      	str	r3, [r7, #56]	@ 0x38
	config.PLL_SET.PLLP = (uint32_t)0x02U;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	config.PLL_SET.PLLQ = 9;
 8002a6e:	2309      	movs	r3, #9
 8002a70:	643b      	str	r3, [r7, #64]	@ 0x40
	if(Clock_Setup_OSC(&config) != STATE_OK)
 8002a72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fb12 	bl	80010a0 <Clock_Setup_OSC>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <System_Clock_Config+0x96>
	{
		Error_Handler();
 8002a82:	f000 f8db 	bl	8002c3c <Error_Handler>
	}

	do
	{
		__IO uint32_t tmpreg;
		SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8002a86:	4b31      	ldr	r3, [pc, #196]	@ (8002b4c <System_Clock_Config+0x15c>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	4a30      	ldr	r2, [pc, #192]	@ (8002b4c <System_Clock_Config+0x15c>)
 8002a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a90:	6413      	str	r3, [r2, #64]	@ 0x40
		tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN);
 8002a92:	4b2e      	ldr	r3, [pc, #184]	@ (8002b4c <System_Clock_Config+0x15c>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a9a:	607b      	str	r3, [r7, #4]
		UNUSED(tmpreg);
 8002a9c:	687b      	ldr	r3, [r7, #4]
	}while(0);

	PWR->CR1 |= (uint32_t)PWR_CR1_ODEN;
 8002a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b50 <System_Clock_Config+0x160>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a2b      	ldr	r2, [pc, #172]	@ (8002b50 <System_Clock_Config+0x160>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]

	TickStart = uwTick;
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8002b54 <System_Clock_Config+0x164>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	657b      	str	r3, [r7, #84]	@ 0x54
	while(((PWR->CSR1 & PWR_CSR1_ODRDY) == PWR_CSR1_ODRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <System_Clock_Config+0xd4>
	{
		if((uwTick - TickStart) > 1000)
 8002ab2:	4b28      	ldr	r3, [pc, #160]	@ (8002b54 <System_Clock_Config+0x164>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002abe:	d901      	bls.n	8002ac4 <System_Clock_Config+0xd4>
		{
			Error_Handler();
 8002ac0:	f000 f8bc 	bl	8002c3c <Error_Handler>
	while(((PWR->CSR1 & PWR_CSR1_ODRDY) == PWR_CSR1_ODRDY) == RESET)
 8002ac4:	4b22      	ldr	r3, [pc, #136]	@ (8002b50 <System_Clock_Config+0x160>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ad0:	d1ef      	bne.n	8002ab2 <System_Clock_Config+0xc2>
		}
	}

	PWR->CR1 |= (uint32_t)PWR_CR1_ODSWEN;
 8002ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b50 <System_Clock_Config+0x160>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b50 <System_Clock_Config+0x160>)
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002adc:	6013      	str	r3, [r2, #0]

	TickStart = uwTick;
 8002ade:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <System_Clock_Config+0x164>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	657b      	str	r3, [r7, #84]	@ 0x54
	while(((PWR->CSR1 & PWR_CSR1_ODSWRDY) == PWR_CSR1_ODSWRDY) == RESET)
 8002ae4:	e008      	b.n	8002af8 <System_Clock_Config+0x108>
	{
		if((uwTick - TickStart) > 1000)
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b54 <System_Clock_Config+0x164>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002af2:	d901      	bls.n	8002af8 <System_Clock_Config+0x108>
		{
			Error_Handler();
 8002af4:	f000 f8a2 	bl	8002c3c <Error_Handler>
	while(((PWR->CSR1 & PWR_CSR1_ODSWRDY) == PWR_CSR1_ODSWRDY) == RESET)
 8002af8:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <System_Clock_Config+0x160>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b04:	d1ef      	bne.n	8002ae6 <System_Clock_Config+0xf6>
		}
	}

	clock_config.CLOCK_TYPE = RCC_CLK_TYPE_SYSCLK | RCC_CLK_TYPE_HCLK | RCC_CLK_TYPE_PCLK1 | RCC_CLK_TYPE_PCLK2;
 8002b06:	230f      	movs	r3, #15
 8002b08:	613b      	str	r3, [r7, #16]
	clock_config.SYSCLK_SOURCE = RCC_SYSCLKSOURCE_PLLCLK;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	617b      	str	r3, [r7, #20]
	clock_config.AHBCLK_DIV = RCC_SYSCLK_DIV1;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
	clock_config.APB1CLK_DIV = RCC_HCLK_DIV4;
 8002b12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b16:	61fb      	str	r3, [r7, #28]
	clock_config.APB2CLK_DIV = RCC_HCLK_DIV2;
 8002b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b1c:	623b      	str	r3, [r7, #32]
	clock_config.FLatency = FLASH_ACR_LATENCY_7WS;
 8002b1e:	2307      	movs	r3, #7
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
	if(Clock_Setup_Clock(&clock_config) != STATE_OK)
 8002b22:	f107 0310 	add.w	r3, r7, #16
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe fc72 	bl	8001410 <Clock_Setup_Clock>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <System_Clock_Config+0x146>
	{
		Error_Handler();
 8002b32:	f000 f883 	bl	8002c3c <Error_Handler>
	}

	MCO_Config(RCC_MCO1, RCC_CFGR_MCO1_1, (uint32_t)0x00);
 8002b36:	2200      	movs	r2, #0
 8002b38:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f7fe fd69 	bl	8001614 <MCO_Config>
}
 8002b42:	bf00      	nop
 8002b44:	3758      	adds	r7, #88	@ 0x58
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40007000 	.word	0x40007000
 8002b54:	20000284 	.word	0x20000284

08002b58 <GPIO_Init>:

static void GPIO_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
	GPIO_ConfigTypeDef config = {0};
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]

	RCC_GPIOCLK_ENABLE(RCC_AHB1ENR_GPIOAEN);
 8002b6c:	4b19      	ldr	r3, [pc, #100]	@ (8002bd4 <GPIO_Init+0x7c>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	4a18      	ldr	r2, [pc, #96]	@ (8002bd4 <GPIO_Init+0x7c>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC_GPIOCLK_ENABLE(RCC_AHB1ENR_GPIOBEN);
 8002b78:	4b16      	ldr	r3, [pc, #88]	@ (8002bd4 <GPIO_Init+0x7c>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	4a15      	ldr	r2, [pc, #84]	@ (8002bd4 <GPIO_Init+0x7c>)
 8002b7e:	f043 0302 	orr.w	r3, r3, #2
 8002b82:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC_GPIOCLK_ENABLE(RCC_AHB1ENR_GPIOHEN);
 8002b84:	4b13      	ldr	r3, [pc, #76]	@ (8002bd4 <GPIO_Init+0x7c>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	4a12      	ldr	r2, [pc, #72]	@ (8002bd4 <GPIO_Init+0x7c>)
 8002b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b8e:	6313      	str	r3, [r2, #48]	@ 0x30

	config.PIN = (1 << 8);
 8002b90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b94:	607b      	str	r3, [r7, #4]
	config.MODE = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	60bb      	str	r3, [r7, #8]
	config.PULL = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
	config.SPEED = GPIO_SPEED_FREQ_HIGH;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	613b      	str	r3, [r7, #16]
	config.ALT = (uint8_t)0x00;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]

	GPIO_Config(GPIOA, &config);
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480b      	ldr	r0, [pc, #44]	@ (8002bd8 <GPIO_Init+0x80>)
 8002bac:	f7fe ff58 	bl	8001a60 <GPIO_Config>


	config.PIN = (1 << 0);
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	607b      	str	r3, [r7, #4]
	config.MODE = GPIO_MODE_OUTPUT_PP;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	60bb      	str	r3, [r7, #8]
	config.PULL = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
	config.SPEED = GPIO_SPEED_FREQ_LOW;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]

	GPIO_Config(GPIOA, &config);
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4804      	ldr	r0, [pc, #16]	@ (8002bd8 <GPIO_Init+0x80>)
 8002bc6:	f7fe ff4b 	bl	8001a60 <GPIO_Config>
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40020000 	.word	0x40020000

08002bdc <UART_Init>:

static void UART_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
	huart1.INSTANCE = USART1;
 8002be0:	4b14      	ldr	r3, [pc, #80]	@ (8002c34 <UART_Init+0x58>)
 8002be2:	4a15      	ldr	r2, [pc, #84]	@ (8002c38 <UART_Init+0x5c>)
 8002be4:	601a      	str	r2, [r3, #0]
	huart1.INIT.BAUD = 115200;
 8002be6:	4b13      	ldr	r3, [pc, #76]	@ (8002c34 <UART_Init+0x58>)
 8002be8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002bec:	605a      	str	r2, [r3, #4]
	huart1.INIT.WORD_LEN = 0x00U;
 8002bee:	4b11      	ldr	r3, [pc, #68]	@ (8002c34 <UART_Init+0x58>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
	huart1.INIT.STOP_BIT = 0x00U;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c34 <UART_Init+0x58>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
	huart1.INIT.PARITY = 0x00U;
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002c34 <UART_Init+0x58>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]
	huart1.INIT.MODE = (USART_CR1_TE | USART_CR1_RE);
 8002c00:	4b0c      	ldr	r3, [pc, #48]	@ (8002c34 <UART_Init+0x58>)
 8002c02:	220c      	movs	r2, #12
 8002c04:	615a      	str	r2, [r3, #20]
	huart1.INIT.FLOW_CTRL = 0x00U;
 8002c06:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <UART_Init+0x58>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	619a      	str	r2, [r3, #24]
	huart1.INIT.OVER_SAMPLE = 0x00U;
 8002c0c:	4b09      	ldr	r3, [pc, #36]	@ (8002c34 <UART_Init+0x58>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	61da      	str	r2, [r3, #28]
	huart1.INIT.ONEB_SAMPLE = 0x00U;
 8002c12:	4b08      	ldr	r3, [pc, #32]	@ (8002c34 <UART_Init+0x58>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	621a      	str	r2, [r3, #32]
	huart1.ADV_INIT.ADV_FEAT_INIT = 0x00U;
 8002c18:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <UART_Init+0x58>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	625a      	str	r2, [r3, #36]	@ 0x24
	if(UART_Config(&huart1) != STATE_OK)
 8002c1e:	4805      	ldr	r0, [pc, #20]	@ (8002c34 <UART_Init+0x58>)
 8002c20:	f7ff f9fe 	bl	8002020 <UART_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <UART_Init+0x52>
	{
		Error_Handler();
 8002c2a:	f000 f807 	bl	8002c3c <Error_Handler>
	}
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000204 	.word	0x20000204
 8002c38:	40011000 	.word	0x40011000

08002c3c <Error_Handler>:

void Error_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c40:	b672      	cpsid	i
}
 8002c42:	bf00      	nop
	__disable_irq();
	while(1);
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <Error_Handler+0x8>

08002c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c48:	480d      	ldr	r0, [pc, #52]	@ (8002c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c4c:	f7fe fa12 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c50:	480c      	ldr	r0, [pc, #48]	@ (8002c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c52:	490d      	ldr	r1, [pc, #52]	@ (8002c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c54:	4a0d      	ldr	r2, [pc, #52]	@ (8002c8c <LoopForever+0xe>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c58:	e002      	b.n	8002c60 <LoopCopyDataInit>

08002c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5e:	3304      	adds	r3, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c64:	d3f9      	bcc.n	8002c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c68:	4c0a      	ldr	r4, [pc, #40]	@ (8002c94 <LoopForever+0x16>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c6c:	e001      	b.n	8002c72 <LoopFillZerobss>

08002c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c70:	3204      	adds	r2, #4

08002c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c74:	d3fb      	bcc.n	8002c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c76:	f000 fdc5 	bl	8003804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c7a:	f7ff fe8b 	bl	8002994 <main>

08002c7e <LoopForever>:

LoopForever:
  b LoopForever
 8002c7e:	e7fe      	b.n	8002c7e <LoopForever>
  ldr   r0, =_estack
 8002c80:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c88:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002c8c:	08005948 	.word	0x08005948
  ldr r2, =_sbss
 8002c90:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002c94:	200003d4 	.word	0x200003d4

08002c98 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC_IRQHandler>

08002c9a <__cvt>:
 8002c9a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c9e:	ec57 6b10 	vmov	r6, r7, d0
 8002ca2:	2f00      	cmp	r7, #0
 8002ca4:	460c      	mov	r4, r1
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	463b      	mov	r3, r7
 8002caa:	bfbb      	ittet	lt
 8002cac:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002cb0:	461f      	movlt	r7, r3
 8002cb2:	2300      	movge	r3, #0
 8002cb4:	232d      	movlt	r3, #45	@ 0x2d
 8002cb6:	700b      	strb	r3, [r1, #0]
 8002cb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002cba:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002cbe:	4691      	mov	r9, r2
 8002cc0:	f023 0820 	bic.w	r8, r3, #32
 8002cc4:	bfbc      	itt	lt
 8002cc6:	4632      	movlt	r2, r6
 8002cc8:	4616      	movlt	r6, r2
 8002cca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002cce:	d005      	beq.n	8002cdc <__cvt+0x42>
 8002cd0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002cd4:	d100      	bne.n	8002cd8 <__cvt+0x3e>
 8002cd6:	3401      	adds	r4, #1
 8002cd8:	2102      	movs	r1, #2
 8002cda:	e000      	b.n	8002cde <__cvt+0x44>
 8002cdc:	2103      	movs	r1, #3
 8002cde:	ab03      	add	r3, sp, #12
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	ab02      	add	r3, sp, #8
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	ec47 6b10 	vmov	d0, r6, r7
 8002cea:	4653      	mov	r3, sl
 8002cec:	4622      	mov	r2, r4
 8002cee:	f000 fe3b 	bl	8003968 <_dtoa_r>
 8002cf2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002cf6:	4605      	mov	r5, r0
 8002cf8:	d119      	bne.n	8002d2e <__cvt+0x94>
 8002cfa:	f019 0f01 	tst.w	r9, #1
 8002cfe:	d00e      	beq.n	8002d1e <__cvt+0x84>
 8002d00:	eb00 0904 	add.w	r9, r0, r4
 8002d04:	2200      	movs	r2, #0
 8002d06:	2300      	movs	r3, #0
 8002d08:	4630      	mov	r0, r6
 8002d0a:	4639      	mov	r1, r7
 8002d0c:	f7fd ff04 	bl	8000b18 <__aeabi_dcmpeq>
 8002d10:	b108      	cbz	r0, 8002d16 <__cvt+0x7c>
 8002d12:	f8cd 900c 	str.w	r9, [sp, #12]
 8002d16:	2230      	movs	r2, #48	@ 0x30
 8002d18:	9b03      	ldr	r3, [sp, #12]
 8002d1a:	454b      	cmp	r3, r9
 8002d1c:	d31e      	bcc.n	8002d5c <__cvt+0xc2>
 8002d1e:	9b03      	ldr	r3, [sp, #12]
 8002d20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002d22:	1b5b      	subs	r3, r3, r5
 8002d24:	4628      	mov	r0, r5
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	b004      	add	sp, #16
 8002d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d2e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002d32:	eb00 0904 	add.w	r9, r0, r4
 8002d36:	d1e5      	bne.n	8002d04 <__cvt+0x6a>
 8002d38:	7803      	ldrb	r3, [r0, #0]
 8002d3a:	2b30      	cmp	r3, #48	@ 0x30
 8002d3c:	d10a      	bne.n	8002d54 <__cvt+0xba>
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2300      	movs	r3, #0
 8002d42:	4630      	mov	r0, r6
 8002d44:	4639      	mov	r1, r7
 8002d46:	f7fd fee7 	bl	8000b18 <__aeabi_dcmpeq>
 8002d4a:	b918      	cbnz	r0, 8002d54 <__cvt+0xba>
 8002d4c:	f1c4 0401 	rsb	r4, r4, #1
 8002d50:	f8ca 4000 	str.w	r4, [sl]
 8002d54:	f8da 3000 	ldr.w	r3, [sl]
 8002d58:	4499      	add	r9, r3
 8002d5a:	e7d3      	b.n	8002d04 <__cvt+0x6a>
 8002d5c:	1c59      	adds	r1, r3, #1
 8002d5e:	9103      	str	r1, [sp, #12]
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e7d9      	b.n	8002d18 <__cvt+0x7e>

08002d64 <__exponent>:
 8002d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d66:	2900      	cmp	r1, #0
 8002d68:	bfba      	itte	lt
 8002d6a:	4249      	neglt	r1, r1
 8002d6c:	232d      	movlt	r3, #45	@ 0x2d
 8002d6e:	232b      	movge	r3, #43	@ 0x2b
 8002d70:	2909      	cmp	r1, #9
 8002d72:	7002      	strb	r2, [r0, #0]
 8002d74:	7043      	strb	r3, [r0, #1]
 8002d76:	dd29      	ble.n	8002dcc <__exponent+0x68>
 8002d78:	f10d 0307 	add.w	r3, sp, #7
 8002d7c:	461d      	mov	r5, r3
 8002d7e:	270a      	movs	r7, #10
 8002d80:	461a      	mov	r2, r3
 8002d82:	fbb1 f6f7 	udiv	r6, r1, r7
 8002d86:	fb07 1416 	mls	r4, r7, r6, r1
 8002d8a:	3430      	adds	r4, #48	@ 0x30
 8002d8c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002d90:	460c      	mov	r4, r1
 8002d92:	2c63      	cmp	r4, #99	@ 0x63
 8002d94:	f103 33ff 	add.w	r3, r3, #4294967295
 8002d98:	4631      	mov	r1, r6
 8002d9a:	dcf1      	bgt.n	8002d80 <__exponent+0x1c>
 8002d9c:	3130      	adds	r1, #48	@ 0x30
 8002d9e:	1e94      	subs	r4, r2, #2
 8002da0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002da4:	1c41      	adds	r1, r0, #1
 8002da6:	4623      	mov	r3, r4
 8002da8:	42ab      	cmp	r3, r5
 8002daa:	d30a      	bcc.n	8002dc2 <__exponent+0x5e>
 8002dac:	f10d 0309 	add.w	r3, sp, #9
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	42ac      	cmp	r4, r5
 8002db4:	bf88      	it	hi
 8002db6:	2300      	movhi	r3, #0
 8002db8:	3302      	adds	r3, #2
 8002dba:	4403      	add	r3, r0
 8002dbc:	1a18      	subs	r0, r3, r0
 8002dbe:	b003      	add	sp, #12
 8002dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dc2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002dc6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002dca:	e7ed      	b.n	8002da8 <__exponent+0x44>
 8002dcc:	2330      	movs	r3, #48	@ 0x30
 8002dce:	3130      	adds	r1, #48	@ 0x30
 8002dd0:	7083      	strb	r3, [r0, #2]
 8002dd2:	70c1      	strb	r1, [r0, #3]
 8002dd4:	1d03      	adds	r3, r0, #4
 8002dd6:	e7f1      	b.n	8002dbc <__exponent+0x58>

08002dd8 <_printf_float>:
 8002dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ddc:	b08d      	sub	sp, #52	@ 0x34
 8002dde:	460c      	mov	r4, r1
 8002de0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002de4:	4616      	mov	r6, r2
 8002de6:	461f      	mov	r7, r3
 8002de8:	4605      	mov	r5, r0
 8002dea:	f000 fcbb 	bl	8003764 <_localeconv_r>
 8002dee:	6803      	ldr	r3, [r0, #0]
 8002df0:	9304      	str	r3, [sp, #16]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fa64 	bl	80002c0 <strlen>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8002dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8002e00:	9005      	str	r0, [sp, #20]
 8002e02:	3307      	adds	r3, #7
 8002e04:	f023 0307 	bic.w	r3, r3, #7
 8002e08:	f103 0208 	add.w	r2, r3, #8
 8002e0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002e10:	f8d4 b000 	ldr.w	fp, [r4]
 8002e14:	f8c8 2000 	str.w	r2, [r8]
 8002e18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002e20:	9307      	str	r3, [sp, #28]
 8002e22:	f8cd 8018 	str.w	r8, [sp, #24]
 8002e26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e2e:	4b9c      	ldr	r3, [pc, #624]	@ (80030a0 <_printf_float+0x2c8>)
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	f7fd fea2 	bl	8000b7c <__aeabi_dcmpun>
 8002e38:	bb70      	cbnz	r0, 8002e98 <_printf_float+0xc0>
 8002e3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e3e:	4b98      	ldr	r3, [pc, #608]	@ (80030a0 <_printf_float+0x2c8>)
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295
 8002e44:	f7fd fe7c 	bl	8000b40 <__aeabi_dcmple>
 8002e48:	bb30      	cbnz	r0, 8002e98 <_printf_float+0xc0>
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	4640      	mov	r0, r8
 8002e50:	4649      	mov	r1, r9
 8002e52:	f7fd fe6b 	bl	8000b2c <__aeabi_dcmplt>
 8002e56:	b110      	cbz	r0, 8002e5e <_printf_float+0x86>
 8002e58:	232d      	movs	r3, #45	@ 0x2d
 8002e5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e5e:	4a91      	ldr	r2, [pc, #580]	@ (80030a4 <_printf_float+0x2cc>)
 8002e60:	4b91      	ldr	r3, [pc, #580]	@ (80030a8 <_printf_float+0x2d0>)
 8002e62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002e66:	bf94      	ite	ls
 8002e68:	4690      	movls	r8, r2
 8002e6a:	4698      	movhi	r8, r3
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	6123      	str	r3, [r4, #16]
 8002e70:	f02b 0304 	bic.w	r3, fp, #4
 8002e74:	6023      	str	r3, [r4, #0]
 8002e76:	f04f 0900 	mov.w	r9, #0
 8002e7a:	9700      	str	r7, [sp, #0]
 8002e7c:	4633      	mov	r3, r6
 8002e7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002e80:	4621      	mov	r1, r4
 8002e82:	4628      	mov	r0, r5
 8002e84:	f000 f9d2 	bl	800322c <_printf_common>
 8002e88:	3001      	adds	r0, #1
 8002e8a:	f040 808d 	bne.w	8002fa8 <_printf_float+0x1d0>
 8002e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e92:	b00d      	add	sp, #52	@ 0x34
 8002e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e98:	4642      	mov	r2, r8
 8002e9a:	464b      	mov	r3, r9
 8002e9c:	4640      	mov	r0, r8
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	f7fd fe6c 	bl	8000b7c <__aeabi_dcmpun>
 8002ea4:	b140      	cbz	r0, 8002eb8 <_printf_float+0xe0>
 8002ea6:	464b      	mov	r3, r9
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bfbc      	itt	lt
 8002eac:	232d      	movlt	r3, #45	@ 0x2d
 8002eae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80030ac <_printf_float+0x2d4>)
 8002eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80030b0 <_printf_float+0x2d8>)
 8002eb6:	e7d4      	b.n	8002e62 <_printf_float+0x8a>
 8002eb8:	6863      	ldr	r3, [r4, #4]
 8002eba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002ebe:	9206      	str	r2, [sp, #24]
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	d13b      	bne.n	8002f3c <_printf_float+0x164>
 8002ec4:	2306      	movs	r3, #6
 8002ec6:	6063      	str	r3, [r4, #4]
 8002ec8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002ecc:	2300      	movs	r3, #0
 8002ece:	6022      	str	r2, [r4, #0]
 8002ed0:	9303      	str	r3, [sp, #12]
 8002ed2:	ab0a      	add	r3, sp, #40	@ 0x28
 8002ed4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002ed8:	ab09      	add	r3, sp, #36	@ 0x24
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	6861      	ldr	r1, [r4, #4]
 8002ede:	ec49 8b10 	vmov	d0, r8, r9
 8002ee2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	f7ff fed7 	bl	8002c9a <__cvt>
 8002eec:	9b06      	ldr	r3, [sp, #24]
 8002eee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002ef0:	2b47      	cmp	r3, #71	@ 0x47
 8002ef2:	4680      	mov	r8, r0
 8002ef4:	d129      	bne.n	8002f4a <_printf_float+0x172>
 8002ef6:	1cc8      	adds	r0, r1, #3
 8002ef8:	db02      	blt.n	8002f00 <_printf_float+0x128>
 8002efa:	6863      	ldr	r3, [r4, #4]
 8002efc:	4299      	cmp	r1, r3
 8002efe:	dd41      	ble.n	8002f84 <_printf_float+0x1ac>
 8002f00:	f1aa 0a02 	sub.w	sl, sl, #2
 8002f04:	fa5f fa8a 	uxtb.w	sl, sl
 8002f08:	3901      	subs	r1, #1
 8002f0a:	4652      	mov	r2, sl
 8002f0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002f10:	9109      	str	r1, [sp, #36]	@ 0x24
 8002f12:	f7ff ff27 	bl	8002d64 <__exponent>
 8002f16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002f18:	1813      	adds	r3, r2, r0
 8002f1a:	2a01      	cmp	r2, #1
 8002f1c:	4681      	mov	r9, r0
 8002f1e:	6123      	str	r3, [r4, #16]
 8002f20:	dc02      	bgt.n	8002f28 <_printf_float+0x150>
 8002f22:	6822      	ldr	r2, [r4, #0]
 8002f24:	07d2      	lsls	r2, r2, #31
 8002f26:	d501      	bpl.n	8002f2c <_printf_float+0x154>
 8002f28:	3301      	adds	r3, #1
 8002f2a:	6123      	str	r3, [r4, #16]
 8002f2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0a2      	beq.n	8002e7a <_printf_float+0xa2>
 8002f34:	232d      	movs	r3, #45	@ 0x2d
 8002f36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f3a:	e79e      	b.n	8002e7a <_printf_float+0xa2>
 8002f3c:	9a06      	ldr	r2, [sp, #24]
 8002f3e:	2a47      	cmp	r2, #71	@ 0x47
 8002f40:	d1c2      	bne.n	8002ec8 <_printf_float+0xf0>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1c0      	bne.n	8002ec8 <_printf_float+0xf0>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e7bd      	b.n	8002ec6 <_printf_float+0xee>
 8002f4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002f4e:	d9db      	bls.n	8002f08 <_printf_float+0x130>
 8002f50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002f54:	d118      	bne.n	8002f88 <_printf_float+0x1b0>
 8002f56:	2900      	cmp	r1, #0
 8002f58:	6863      	ldr	r3, [r4, #4]
 8002f5a:	dd0b      	ble.n	8002f74 <_printf_float+0x19c>
 8002f5c:	6121      	str	r1, [r4, #16]
 8002f5e:	b913      	cbnz	r3, 8002f66 <_printf_float+0x18e>
 8002f60:	6822      	ldr	r2, [r4, #0]
 8002f62:	07d0      	lsls	r0, r2, #31
 8002f64:	d502      	bpl.n	8002f6c <_printf_float+0x194>
 8002f66:	3301      	adds	r3, #1
 8002f68:	440b      	add	r3, r1
 8002f6a:	6123      	str	r3, [r4, #16]
 8002f6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002f6e:	f04f 0900 	mov.w	r9, #0
 8002f72:	e7db      	b.n	8002f2c <_printf_float+0x154>
 8002f74:	b913      	cbnz	r3, 8002f7c <_printf_float+0x1a4>
 8002f76:	6822      	ldr	r2, [r4, #0]
 8002f78:	07d2      	lsls	r2, r2, #31
 8002f7a:	d501      	bpl.n	8002f80 <_printf_float+0x1a8>
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	e7f4      	b.n	8002f6a <_printf_float+0x192>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e7f2      	b.n	8002f6a <_printf_float+0x192>
 8002f84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f8a:	4299      	cmp	r1, r3
 8002f8c:	db05      	blt.n	8002f9a <_printf_float+0x1c2>
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	6121      	str	r1, [r4, #16]
 8002f92:	07d8      	lsls	r0, r3, #31
 8002f94:	d5ea      	bpl.n	8002f6c <_printf_float+0x194>
 8002f96:	1c4b      	adds	r3, r1, #1
 8002f98:	e7e7      	b.n	8002f6a <_printf_float+0x192>
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	bfd4      	ite	le
 8002f9e:	f1c1 0202 	rsble	r2, r1, #2
 8002fa2:	2201      	movgt	r2, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	e7e0      	b.n	8002f6a <_printf_float+0x192>
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	055a      	lsls	r2, r3, #21
 8002fac:	d407      	bmi.n	8002fbe <_printf_float+0x1e6>
 8002fae:	6923      	ldr	r3, [r4, #16]
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	4631      	mov	r1, r6
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	47b8      	blx	r7
 8002fb8:	3001      	adds	r0, #1
 8002fba:	d12b      	bne.n	8003014 <_printf_float+0x23c>
 8002fbc:	e767      	b.n	8002e8e <_printf_float+0xb6>
 8002fbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002fc2:	f240 80dd 	bls.w	8003180 <_printf_float+0x3a8>
 8002fc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f7fd fda3 	bl	8000b18 <__aeabi_dcmpeq>
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	d033      	beq.n	800303e <_printf_float+0x266>
 8002fd6:	4a37      	ldr	r2, [pc, #220]	@ (80030b4 <_printf_float+0x2dc>)
 8002fd8:	2301      	movs	r3, #1
 8002fda:	4631      	mov	r1, r6
 8002fdc:	4628      	mov	r0, r5
 8002fde:	47b8      	blx	r7
 8002fe0:	3001      	adds	r0, #1
 8002fe2:	f43f af54 	beq.w	8002e8e <_printf_float+0xb6>
 8002fe6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8002fea:	4543      	cmp	r3, r8
 8002fec:	db02      	blt.n	8002ff4 <_printf_float+0x21c>
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	07d8      	lsls	r0, r3, #31
 8002ff2:	d50f      	bpl.n	8003014 <_printf_float+0x23c>
 8002ff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ff8:	4631      	mov	r1, r6
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	47b8      	blx	r7
 8002ffe:	3001      	adds	r0, #1
 8003000:	f43f af45 	beq.w	8002e8e <_printf_float+0xb6>
 8003004:	f04f 0900 	mov.w	r9, #0
 8003008:	f108 38ff 	add.w	r8, r8, #4294967295
 800300c:	f104 0a1a 	add.w	sl, r4, #26
 8003010:	45c8      	cmp	r8, r9
 8003012:	dc09      	bgt.n	8003028 <_printf_float+0x250>
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	079b      	lsls	r3, r3, #30
 8003018:	f100 8103 	bmi.w	8003222 <_printf_float+0x44a>
 800301c:	68e0      	ldr	r0, [r4, #12]
 800301e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003020:	4298      	cmp	r0, r3
 8003022:	bfb8      	it	lt
 8003024:	4618      	movlt	r0, r3
 8003026:	e734      	b.n	8002e92 <_printf_float+0xba>
 8003028:	2301      	movs	r3, #1
 800302a:	4652      	mov	r2, sl
 800302c:	4631      	mov	r1, r6
 800302e:	4628      	mov	r0, r5
 8003030:	47b8      	blx	r7
 8003032:	3001      	adds	r0, #1
 8003034:	f43f af2b 	beq.w	8002e8e <_printf_float+0xb6>
 8003038:	f109 0901 	add.w	r9, r9, #1
 800303c:	e7e8      	b.n	8003010 <_printf_float+0x238>
 800303e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003040:	2b00      	cmp	r3, #0
 8003042:	dc39      	bgt.n	80030b8 <_printf_float+0x2e0>
 8003044:	4a1b      	ldr	r2, [pc, #108]	@ (80030b4 <_printf_float+0x2dc>)
 8003046:	2301      	movs	r3, #1
 8003048:	4631      	mov	r1, r6
 800304a:	4628      	mov	r0, r5
 800304c:	47b8      	blx	r7
 800304e:	3001      	adds	r0, #1
 8003050:	f43f af1d 	beq.w	8002e8e <_printf_float+0xb6>
 8003054:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003058:	ea59 0303 	orrs.w	r3, r9, r3
 800305c:	d102      	bne.n	8003064 <_printf_float+0x28c>
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	07d9      	lsls	r1, r3, #31
 8003062:	d5d7      	bpl.n	8003014 <_printf_float+0x23c>
 8003064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003068:	4631      	mov	r1, r6
 800306a:	4628      	mov	r0, r5
 800306c:	47b8      	blx	r7
 800306e:	3001      	adds	r0, #1
 8003070:	f43f af0d 	beq.w	8002e8e <_printf_float+0xb6>
 8003074:	f04f 0a00 	mov.w	sl, #0
 8003078:	f104 0b1a 	add.w	fp, r4, #26
 800307c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800307e:	425b      	negs	r3, r3
 8003080:	4553      	cmp	r3, sl
 8003082:	dc01      	bgt.n	8003088 <_printf_float+0x2b0>
 8003084:	464b      	mov	r3, r9
 8003086:	e793      	b.n	8002fb0 <_printf_float+0x1d8>
 8003088:	2301      	movs	r3, #1
 800308a:	465a      	mov	r2, fp
 800308c:	4631      	mov	r1, r6
 800308e:	4628      	mov	r0, r5
 8003090:	47b8      	blx	r7
 8003092:	3001      	adds	r0, #1
 8003094:	f43f aefb 	beq.w	8002e8e <_printf_float+0xb6>
 8003098:	f10a 0a01 	add.w	sl, sl, #1
 800309c:	e7ee      	b.n	800307c <_printf_float+0x2a4>
 800309e:	bf00      	nop
 80030a0:	7fefffff 	.word	0x7fefffff
 80030a4:	080055c8 	.word	0x080055c8
 80030a8:	080055cc 	.word	0x080055cc
 80030ac:	080055d0 	.word	0x080055d0
 80030b0:	080055d4 	.word	0x080055d4
 80030b4:	080055d8 	.word	0x080055d8
 80030b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80030ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80030be:	4553      	cmp	r3, sl
 80030c0:	bfa8      	it	ge
 80030c2:	4653      	movge	r3, sl
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	4699      	mov	r9, r3
 80030c8:	dc36      	bgt.n	8003138 <_printf_float+0x360>
 80030ca:	f04f 0b00 	mov.w	fp, #0
 80030ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030d2:	f104 021a 	add.w	r2, r4, #26
 80030d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80030d8:	9306      	str	r3, [sp, #24]
 80030da:	eba3 0309 	sub.w	r3, r3, r9
 80030de:	455b      	cmp	r3, fp
 80030e0:	dc31      	bgt.n	8003146 <_printf_float+0x36e>
 80030e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030e4:	459a      	cmp	sl, r3
 80030e6:	dc3a      	bgt.n	800315e <_printf_float+0x386>
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	07da      	lsls	r2, r3, #31
 80030ec:	d437      	bmi.n	800315e <_printf_float+0x386>
 80030ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030f0:	ebaa 0903 	sub.w	r9, sl, r3
 80030f4:	9b06      	ldr	r3, [sp, #24]
 80030f6:	ebaa 0303 	sub.w	r3, sl, r3
 80030fa:	4599      	cmp	r9, r3
 80030fc:	bfa8      	it	ge
 80030fe:	4699      	movge	r9, r3
 8003100:	f1b9 0f00 	cmp.w	r9, #0
 8003104:	dc33      	bgt.n	800316e <_printf_float+0x396>
 8003106:	f04f 0800 	mov.w	r8, #0
 800310a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800310e:	f104 0b1a 	add.w	fp, r4, #26
 8003112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003114:	ebaa 0303 	sub.w	r3, sl, r3
 8003118:	eba3 0309 	sub.w	r3, r3, r9
 800311c:	4543      	cmp	r3, r8
 800311e:	f77f af79 	ble.w	8003014 <_printf_float+0x23c>
 8003122:	2301      	movs	r3, #1
 8003124:	465a      	mov	r2, fp
 8003126:	4631      	mov	r1, r6
 8003128:	4628      	mov	r0, r5
 800312a:	47b8      	blx	r7
 800312c:	3001      	adds	r0, #1
 800312e:	f43f aeae 	beq.w	8002e8e <_printf_float+0xb6>
 8003132:	f108 0801 	add.w	r8, r8, #1
 8003136:	e7ec      	b.n	8003112 <_printf_float+0x33a>
 8003138:	4642      	mov	r2, r8
 800313a:	4631      	mov	r1, r6
 800313c:	4628      	mov	r0, r5
 800313e:	47b8      	blx	r7
 8003140:	3001      	adds	r0, #1
 8003142:	d1c2      	bne.n	80030ca <_printf_float+0x2f2>
 8003144:	e6a3      	b.n	8002e8e <_printf_float+0xb6>
 8003146:	2301      	movs	r3, #1
 8003148:	4631      	mov	r1, r6
 800314a:	4628      	mov	r0, r5
 800314c:	9206      	str	r2, [sp, #24]
 800314e:	47b8      	blx	r7
 8003150:	3001      	adds	r0, #1
 8003152:	f43f ae9c 	beq.w	8002e8e <_printf_float+0xb6>
 8003156:	9a06      	ldr	r2, [sp, #24]
 8003158:	f10b 0b01 	add.w	fp, fp, #1
 800315c:	e7bb      	b.n	80030d6 <_printf_float+0x2fe>
 800315e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003162:	4631      	mov	r1, r6
 8003164:	4628      	mov	r0, r5
 8003166:	47b8      	blx	r7
 8003168:	3001      	adds	r0, #1
 800316a:	d1c0      	bne.n	80030ee <_printf_float+0x316>
 800316c:	e68f      	b.n	8002e8e <_printf_float+0xb6>
 800316e:	9a06      	ldr	r2, [sp, #24]
 8003170:	464b      	mov	r3, r9
 8003172:	4442      	add	r2, r8
 8003174:	4631      	mov	r1, r6
 8003176:	4628      	mov	r0, r5
 8003178:	47b8      	blx	r7
 800317a:	3001      	adds	r0, #1
 800317c:	d1c3      	bne.n	8003106 <_printf_float+0x32e>
 800317e:	e686      	b.n	8002e8e <_printf_float+0xb6>
 8003180:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003184:	f1ba 0f01 	cmp.w	sl, #1
 8003188:	dc01      	bgt.n	800318e <_printf_float+0x3b6>
 800318a:	07db      	lsls	r3, r3, #31
 800318c:	d536      	bpl.n	80031fc <_printf_float+0x424>
 800318e:	2301      	movs	r3, #1
 8003190:	4642      	mov	r2, r8
 8003192:	4631      	mov	r1, r6
 8003194:	4628      	mov	r0, r5
 8003196:	47b8      	blx	r7
 8003198:	3001      	adds	r0, #1
 800319a:	f43f ae78 	beq.w	8002e8e <_printf_float+0xb6>
 800319e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031a2:	4631      	mov	r1, r6
 80031a4:	4628      	mov	r0, r5
 80031a6:	47b8      	blx	r7
 80031a8:	3001      	adds	r0, #1
 80031aa:	f43f ae70 	beq.w	8002e8e <_printf_float+0xb6>
 80031ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80031b2:	2200      	movs	r2, #0
 80031b4:	2300      	movs	r3, #0
 80031b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80031ba:	f7fd fcad 	bl	8000b18 <__aeabi_dcmpeq>
 80031be:	b9c0      	cbnz	r0, 80031f2 <_printf_float+0x41a>
 80031c0:	4653      	mov	r3, sl
 80031c2:	f108 0201 	add.w	r2, r8, #1
 80031c6:	4631      	mov	r1, r6
 80031c8:	4628      	mov	r0, r5
 80031ca:	47b8      	blx	r7
 80031cc:	3001      	adds	r0, #1
 80031ce:	d10c      	bne.n	80031ea <_printf_float+0x412>
 80031d0:	e65d      	b.n	8002e8e <_printf_float+0xb6>
 80031d2:	2301      	movs	r3, #1
 80031d4:	465a      	mov	r2, fp
 80031d6:	4631      	mov	r1, r6
 80031d8:	4628      	mov	r0, r5
 80031da:	47b8      	blx	r7
 80031dc:	3001      	adds	r0, #1
 80031de:	f43f ae56 	beq.w	8002e8e <_printf_float+0xb6>
 80031e2:	f108 0801 	add.w	r8, r8, #1
 80031e6:	45d0      	cmp	r8, sl
 80031e8:	dbf3      	blt.n	80031d2 <_printf_float+0x3fa>
 80031ea:	464b      	mov	r3, r9
 80031ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80031f0:	e6df      	b.n	8002fb2 <_printf_float+0x1da>
 80031f2:	f04f 0800 	mov.w	r8, #0
 80031f6:	f104 0b1a 	add.w	fp, r4, #26
 80031fa:	e7f4      	b.n	80031e6 <_printf_float+0x40e>
 80031fc:	2301      	movs	r3, #1
 80031fe:	4642      	mov	r2, r8
 8003200:	e7e1      	b.n	80031c6 <_printf_float+0x3ee>
 8003202:	2301      	movs	r3, #1
 8003204:	464a      	mov	r2, r9
 8003206:	4631      	mov	r1, r6
 8003208:	4628      	mov	r0, r5
 800320a:	47b8      	blx	r7
 800320c:	3001      	adds	r0, #1
 800320e:	f43f ae3e 	beq.w	8002e8e <_printf_float+0xb6>
 8003212:	f108 0801 	add.w	r8, r8, #1
 8003216:	68e3      	ldr	r3, [r4, #12]
 8003218:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800321a:	1a5b      	subs	r3, r3, r1
 800321c:	4543      	cmp	r3, r8
 800321e:	dcf0      	bgt.n	8003202 <_printf_float+0x42a>
 8003220:	e6fc      	b.n	800301c <_printf_float+0x244>
 8003222:	f04f 0800 	mov.w	r8, #0
 8003226:	f104 0919 	add.w	r9, r4, #25
 800322a:	e7f4      	b.n	8003216 <_printf_float+0x43e>

0800322c <_printf_common>:
 800322c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003230:	4616      	mov	r6, r2
 8003232:	4698      	mov	r8, r3
 8003234:	688a      	ldr	r2, [r1, #8]
 8003236:	690b      	ldr	r3, [r1, #16]
 8003238:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800323c:	4293      	cmp	r3, r2
 800323e:	bfb8      	it	lt
 8003240:	4613      	movlt	r3, r2
 8003242:	6033      	str	r3, [r6, #0]
 8003244:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003248:	4607      	mov	r7, r0
 800324a:	460c      	mov	r4, r1
 800324c:	b10a      	cbz	r2, 8003252 <_printf_common+0x26>
 800324e:	3301      	adds	r3, #1
 8003250:	6033      	str	r3, [r6, #0]
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	0699      	lsls	r1, r3, #26
 8003256:	bf42      	ittt	mi
 8003258:	6833      	ldrmi	r3, [r6, #0]
 800325a:	3302      	addmi	r3, #2
 800325c:	6033      	strmi	r3, [r6, #0]
 800325e:	6825      	ldr	r5, [r4, #0]
 8003260:	f015 0506 	ands.w	r5, r5, #6
 8003264:	d106      	bne.n	8003274 <_printf_common+0x48>
 8003266:	f104 0a19 	add.w	sl, r4, #25
 800326a:	68e3      	ldr	r3, [r4, #12]
 800326c:	6832      	ldr	r2, [r6, #0]
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	42ab      	cmp	r3, r5
 8003272:	dc26      	bgt.n	80032c2 <_printf_common+0x96>
 8003274:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003278:	6822      	ldr	r2, [r4, #0]
 800327a:	3b00      	subs	r3, #0
 800327c:	bf18      	it	ne
 800327e:	2301      	movne	r3, #1
 8003280:	0692      	lsls	r2, r2, #26
 8003282:	d42b      	bmi.n	80032dc <_printf_common+0xb0>
 8003284:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003288:	4641      	mov	r1, r8
 800328a:	4638      	mov	r0, r7
 800328c:	47c8      	blx	r9
 800328e:	3001      	adds	r0, #1
 8003290:	d01e      	beq.n	80032d0 <_printf_common+0xa4>
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	6922      	ldr	r2, [r4, #16]
 8003296:	f003 0306 	and.w	r3, r3, #6
 800329a:	2b04      	cmp	r3, #4
 800329c:	bf02      	ittt	eq
 800329e:	68e5      	ldreq	r5, [r4, #12]
 80032a0:	6833      	ldreq	r3, [r6, #0]
 80032a2:	1aed      	subeq	r5, r5, r3
 80032a4:	68a3      	ldr	r3, [r4, #8]
 80032a6:	bf0c      	ite	eq
 80032a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032ac:	2500      	movne	r5, #0
 80032ae:	4293      	cmp	r3, r2
 80032b0:	bfc4      	itt	gt
 80032b2:	1a9b      	subgt	r3, r3, r2
 80032b4:	18ed      	addgt	r5, r5, r3
 80032b6:	2600      	movs	r6, #0
 80032b8:	341a      	adds	r4, #26
 80032ba:	42b5      	cmp	r5, r6
 80032bc:	d11a      	bne.n	80032f4 <_printf_common+0xc8>
 80032be:	2000      	movs	r0, #0
 80032c0:	e008      	b.n	80032d4 <_printf_common+0xa8>
 80032c2:	2301      	movs	r3, #1
 80032c4:	4652      	mov	r2, sl
 80032c6:	4641      	mov	r1, r8
 80032c8:	4638      	mov	r0, r7
 80032ca:	47c8      	blx	r9
 80032cc:	3001      	adds	r0, #1
 80032ce:	d103      	bne.n	80032d8 <_printf_common+0xac>
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d8:	3501      	adds	r5, #1
 80032da:	e7c6      	b.n	800326a <_printf_common+0x3e>
 80032dc:	18e1      	adds	r1, r4, r3
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	2030      	movs	r0, #48	@ 0x30
 80032e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80032e6:	4422      	add	r2, r4
 80032e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80032ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80032f0:	3302      	adds	r3, #2
 80032f2:	e7c7      	b.n	8003284 <_printf_common+0x58>
 80032f4:	2301      	movs	r3, #1
 80032f6:	4622      	mov	r2, r4
 80032f8:	4641      	mov	r1, r8
 80032fa:	4638      	mov	r0, r7
 80032fc:	47c8      	blx	r9
 80032fe:	3001      	adds	r0, #1
 8003300:	d0e6      	beq.n	80032d0 <_printf_common+0xa4>
 8003302:	3601      	adds	r6, #1
 8003304:	e7d9      	b.n	80032ba <_printf_common+0x8e>
	...

08003308 <_printf_i>:
 8003308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800330c:	7e0f      	ldrb	r7, [r1, #24]
 800330e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003310:	2f78      	cmp	r7, #120	@ 0x78
 8003312:	4691      	mov	r9, r2
 8003314:	4680      	mov	r8, r0
 8003316:	460c      	mov	r4, r1
 8003318:	469a      	mov	sl, r3
 800331a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800331e:	d807      	bhi.n	8003330 <_printf_i+0x28>
 8003320:	2f62      	cmp	r7, #98	@ 0x62
 8003322:	d80a      	bhi.n	800333a <_printf_i+0x32>
 8003324:	2f00      	cmp	r7, #0
 8003326:	f000 80d2 	beq.w	80034ce <_printf_i+0x1c6>
 800332a:	2f58      	cmp	r7, #88	@ 0x58
 800332c:	f000 80b9 	beq.w	80034a2 <_printf_i+0x19a>
 8003330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003334:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003338:	e03a      	b.n	80033b0 <_printf_i+0xa8>
 800333a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800333e:	2b15      	cmp	r3, #21
 8003340:	d8f6      	bhi.n	8003330 <_printf_i+0x28>
 8003342:	a101      	add	r1, pc, #4	@ (adr r1, 8003348 <_printf_i+0x40>)
 8003344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003348:	080033a1 	.word	0x080033a1
 800334c:	080033b5 	.word	0x080033b5
 8003350:	08003331 	.word	0x08003331
 8003354:	08003331 	.word	0x08003331
 8003358:	08003331 	.word	0x08003331
 800335c:	08003331 	.word	0x08003331
 8003360:	080033b5 	.word	0x080033b5
 8003364:	08003331 	.word	0x08003331
 8003368:	08003331 	.word	0x08003331
 800336c:	08003331 	.word	0x08003331
 8003370:	08003331 	.word	0x08003331
 8003374:	080034b5 	.word	0x080034b5
 8003378:	080033df 	.word	0x080033df
 800337c:	0800346f 	.word	0x0800346f
 8003380:	08003331 	.word	0x08003331
 8003384:	08003331 	.word	0x08003331
 8003388:	080034d7 	.word	0x080034d7
 800338c:	08003331 	.word	0x08003331
 8003390:	080033df 	.word	0x080033df
 8003394:	08003331 	.word	0x08003331
 8003398:	08003331 	.word	0x08003331
 800339c:	08003477 	.word	0x08003477
 80033a0:	6833      	ldr	r3, [r6, #0]
 80033a2:	1d1a      	adds	r2, r3, #4
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6032      	str	r2, [r6, #0]
 80033a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80033b0:	2301      	movs	r3, #1
 80033b2:	e09d      	b.n	80034f0 <_printf_i+0x1e8>
 80033b4:	6833      	ldr	r3, [r6, #0]
 80033b6:	6820      	ldr	r0, [r4, #0]
 80033b8:	1d19      	adds	r1, r3, #4
 80033ba:	6031      	str	r1, [r6, #0]
 80033bc:	0606      	lsls	r6, r0, #24
 80033be:	d501      	bpl.n	80033c4 <_printf_i+0xbc>
 80033c0:	681d      	ldr	r5, [r3, #0]
 80033c2:	e003      	b.n	80033cc <_printf_i+0xc4>
 80033c4:	0645      	lsls	r5, r0, #25
 80033c6:	d5fb      	bpl.n	80033c0 <_printf_i+0xb8>
 80033c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	da03      	bge.n	80033d8 <_printf_i+0xd0>
 80033d0:	232d      	movs	r3, #45	@ 0x2d
 80033d2:	426d      	negs	r5, r5
 80033d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033d8:	4859      	ldr	r0, [pc, #356]	@ (8003540 <_printf_i+0x238>)
 80033da:	230a      	movs	r3, #10
 80033dc:	e011      	b.n	8003402 <_printf_i+0xfa>
 80033de:	6821      	ldr	r1, [r4, #0]
 80033e0:	6833      	ldr	r3, [r6, #0]
 80033e2:	0608      	lsls	r0, r1, #24
 80033e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80033e8:	d402      	bmi.n	80033f0 <_printf_i+0xe8>
 80033ea:	0649      	lsls	r1, r1, #25
 80033ec:	bf48      	it	mi
 80033ee:	b2ad      	uxthmi	r5, r5
 80033f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80033f2:	4853      	ldr	r0, [pc, #332]	@ (8003540 <_printf_i+0x238>)
 80033f4:	6033      	str	r3, [r6, #0]
 80033f6:	bf14      	ite	ne
 80033f8:	230a      	movne	r3, #10
 80033fa:	2308      	moveq	r3, #8
 80033fc:	2100      	movs	r1, #0
 80033fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003402:	6866      	ldr	r6, [r4, #4]
 8003404:	60a6      	str	r6, [r4, #8]
 8003406:	2e00      	cmp	r6, #0
 8003408:	bfa2      	ittt	ge
 800340a:	6821      	ldrge	r1, [r4, #0]
 800340c:	f021 0104 	bicge.w	r1, r1, #4
 8003410:	6021      	strge	r1, [r4, #0]
 8003412:	b90d      	cbnz	r5, 8003418 <_printf_i+0x110>
 8003414:	2e00      	cmp	r6, #0
 8003416:	d04b      	beq.n	80034b0 <_printf_i+0x1a8>
 8003418:	4616      	mov	r6, r2
 800341a:	fbb5 f1f3 	udiv	r1, r5, r3
 800341e:	fb03 5711 	mls	r7, r3, r1, r5
 8003422:	5dc7      	ldrb	r7, [r0, r7]
 8003424:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003428:	462f      	mov	r7, r5
 800342a:	42bb      	cmp	r3, r7
 800342c:	460d      	mov	r5, r1
 800342e:	d9f4      	bls.n	800341a <_printf_i+0x112>
 8003430:	2b08      	cmp	r3, #8
 8003432:	d10b      	bne.n	800344c <_printf_i+0x144>
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	07df      	lsls	r7, r3, #31
 8003438:	d508      	bpl.n	800344c <_printf_i+0x144>
 800343a:	6923      	ldr	r3, [r4, #16]
 800343c:	6861      	ldr	r1, [r4, #4]
 800343e:	4299      	cmp	r1, r3
 8003440:	bfde      	ittt	le
 8003442:	2330      	movle	r3, #48	@ 0x30
 8003444:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003448:	f106 36ff 	addle.w	r6, r6, #4294967295
 800344c:	1b92      	subs	r2, r2, r6
 800344e:	6122      	str	r2, [r4, #16]
 8003450:	f8cd a000 	str.w	sl, [sp]
 8003454:	464b      	mov	r3, r9
 8003456:	aa03      	add	r2, sp, #12
 8003458:	4621      	mov	r1, r4
 800345a:	4640      	mov	r0, r8
 800345c:	f7ff fee6 	bl	800322c <_printf_common>
 8003460:	3001      	adds	r0, #1
 8003462:	d14a      	bne.n	80034fa <_printf_i+0x1f2>
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	b004      	add	sp, #16
 800346a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	f043 0320 	orr.w	r3, r3, #32
 8003474:	6023      	str	r3, [r4, #0]
 8003476:	4833      	ldr	r0, [pc, #204]	@ (8003544 <_printf_i+0x23c>)
 8003478:	2778      	movs	r7, #120	@ 0x78
 800347a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	6831      	ldr	r1, [r6, #0]
 8003482:	061f      	lsls	r7, r3, #24
 8003484:	f851 5b04 	ldr.w	r5, [r1], #4
 8003488:	d402      	bmi.n	8003490 <_printf_i+0x188>
 800348a:	065f      	lsls	r7, r3, #25
 800348c:	bf48      	it	mi
 800348e:	b2ad      	uxthmi	r5, r5
 8003490:	6031      	str	r1, [r6, #0]
 8003492:	07d9      	lsls	r1, r3, #31
 8003494:	bf44      	itt	mi
 8003496:	f043 0320 	orrmi.w	r3, r3, #32
 800349a:	6023      	strmi	r3, [r4, #0]
 800349c:	b11d      	cbz	r5, 80034a6 <_printf_i+0x19e>
 800349e:	2310      	movs	r3, #16
 80034a0:	e7ac      	b.n	80033fc <_printf_i+0xf4>
 80034a2:	4827      	ldr	r0, [pc, #156]	@ (8003540 <_printf_i+0x238>)
 80034a4:	e7e9      	b.n	800347a <_printf_i+0x172>
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	f023 0320 	bic.w	r3, r3, #32
 80034ac:	6023      	str	r3, [r4, #0]
 80034ae:	e7f6      	b.n	800349e <_printf_i+0x196>
 80034b0:	4616      	mov	r6, r2
 80034b2:	e7bd      	b.n	8003430 <_printf_i+0x128>
 80034b4:	6833      	ldr	r3, [r6, #0]
 80034b6:	6825      	ldr	r5, [r4, #0]
 80034b8:	6961      	ldr	r1, [r4, #20]
 80034ba:	1d18      	adds	r0, r3, #4
 80034bc:	6030      	str	r0, [r6, #0]
 80034be:	062e      	lsls	r6, r5, #24
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	d501      	bpl.n	80034c8 <_printf_i+0x1c0>
 80034c4:	6019      	str	r1, [r3, #0]
 80034c6:	e002      	b.n	80034ce <_printf_i+0x1c6>
 80034c8:	0668      	lsls	r0, r5, #25
 80034ca:	d5fb      	bpl.n	80034c4 <_printf_i+0x1bc>
 80034cc:	8019      	strh	r1, [r3, #0]
 80034ce:	2300      	movs	r3, #0
 80034d0:	6123      	str	r3, [r4, #16]
 80034d2:	4616      	mov	r6, r2
 80034d4:	e7bc      	b.n	8003450 <_printf_i+0x148>
 80034d6:	6833      	ldr	r3, [r6, #0]
 80034d8:	1d1a      	adds	r2, r3, #4
 80034da:	6032      	str	r2, [r6, #0]
 80034dc:	681e      	ldr	r6, [r3, #0]
 80034de:	6862      	ldr	r2, [r4, #4]
 80034e0:	2100      	movs	r1, #0
 80034e2:	4630      	mov	r0, r6
 80034e4:	f7fc fe9c 	bl	8000220 <memchr>
 80034e8:	b108      	cbz	r0, 80034ee <_printf_i+0x1e6>
 80034ea:	1b80      	subs	r0, r0, r6
 80034ec:	6060      	str	r0, [r4, #4]
 80034ee:	6863      	ldr	r3, [r4, #4]
 80034f0:	6123      	str	r3, [r4, #16]
 80034f2:	2300      	movs	r3, #0
 80034f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034f8:	e7aa      	b.n	8003450 <_printf_i+0x148>
 80034fa:	6923      	ldr	r3, [r4, #16]
 80034fc:	4632      	mov	r2, r6
 80034fe:	4649      	mov	r1, r9
 8003500:	4640      	mov	r0, r8
 8003502:	47d0      	blx	sl
 8003504:	3001      	adds	r0, #1
 8003506:	d0ad      	beq.n	8003464 <_printf_i+0x15c>
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	079b      	lsls	r3, r3, #30
 800350c:	d413      	bmi.n	8003536 <_printf_i+0x22e>
 800350e:	68e0      	ldr	r0, [r4, #12]
 8003510:	9b03      	ldr	r3, [sp, #12]
 8003512:	4298      	cmp	r0, r3
 8003514:	bfb8      	it	lt
 8003516:	4618      	movlt	r0, r3
 8003518:	e7a6      	b.n	8003468 <_printf_i+0x160>
 800351a:	2301      	movs	r3, #1
 800351c:	4632      	mov	r2, r6
 800351e:	4649      	mov	r1, r9
 8003520:	4640      	mov	r0, r8
 8003522:	47d0      	blx	sl
 8003524:	3001      	adds	r0, #1
 8003526:	d09d      	beq.n	8003464 <_printf_i+0x15c>
 8003528:	3501      	adds	r5, #1
 800352a:	68e3      	ldr	r3, [r4, #12]
 800352c:	9903      	ldr	r1, [sp, #12]
 800352e:	1a5b      	subs	r3, r3, r1
 8003530:	42ab      	cmp	r3, r5
 8003532:	dcf2      	bgt.n	800351a <_printf_i+0x212>
 8003534:	e7eb      	b.n	800350e <_printf_i+0x206>
 8003536:	2500      	movs	r5, #0
 8003538:	f104 0619 	add.w	r6, r4, #25
 800353c:	e7f5      	b.n	800352a <_printf_i+0x222>
 800353e:	bf00      	nop
 8003540:	080055da 	.word	0x080055da
 8003544:	080055eb 	.word	0x080055eb

08003548 <std>:
 8003548:	2300      	movs	r3, #0
 800354a:	b510      	push	{r4, lr}
 800354c:	4604      	mov	r4, r0
 800354e:	e9c0 3300 	strd	r3, r3, [r0]
 8003552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003556:	6083      	str	r3, [r0, #8]
 8003558:	8181      	strh	r1, [r0, #12]
 800355a:	6643      	str	r3, [r0, #100]	@ 0x64
 800355c:	81c2      	strh	r2, [r0, #14]
 800355e:	6183      	str	r3, [r0, #24]
 8003560:	4619      	mov	r1, r3
 8003562:	2208      	movs	r2, #8
 8003564:	305c      	adds	r0, #92	@ 0x5c
 8003566:	f000 f8f4 	bl	8003752 <memset>
 800356a:	4b0d      	ldr	r3, [pc, #52]	@ (80035a0 <std+0x58>)
 800356c:	6263      	str	r3, [r4, #36]	@ 0x24
 800356e:	4b0d      	ldr	r3, [pc, #52]	@ (80035a4 <std+0x5c>)
 8003570:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003572:	4b0d      	ldr	r3, [pc, #52]	@ (80035a8 <std+0x60>)
 8003574:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003576:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <std+0x64>)
 8003578:	6323      	str	r3, [r4, #48]	@ 0x30
 800357a:	4b0d      	ldr	r3, [pc, #52]	@ (80035b0 <std+0x68>)
 800357c:	6224      	str	r4, [r4, #32]
 800357e:	429c      	cmp	r4, r3
 8003580:	d006      	beq.n	8003590 <std+0x48>
 8003582:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003586:	4294      	cmp	r4, r2
 8003588:	d002      	beq.n	8003590 <std+0x48>
 800358a:	33d0      	adds	r3, #208	@ 0xd0
 800358c:	429c      	cmp	r4, r3
 800358e:	d105      	bne.n	800359c <std+0x54>
 8003590:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003598:	f000 b958 	b.w	800384c <__retarget_lock_init_recursive>
 800359c:	bd10      	pop	{r4, pc}
 800359e:	bf00      	nop
 80035a0:	080036cd 	.word	0x080036cd
 80035a4:	080036ef 	.word	0x080036ef
 80035a8:	08003727 	.word	0x08003727
 80035ac:	0800374b 	.word	0x0800374b
 80035b0:	20000288 	.word	0x20000288

080035b4 <stdio_exit_handler>:
 80035b4:	4a02      	ldr	r2, [pc, #8]	@ (80035c0 <stdio_exit_handler+0xc>)
 80035b6:	4903      	ldr	r1, [pc, #12]	@ (80035c4 <stdio_exit_handler+0x10>)
 80035b8:	4803      	ldr	r0, [pc, #12]	@ (80035c8 <stdio_exit_handler+0x14>)
 80035ba:	f000 b869 	b.w	8003690 <_fwalk_sglue>
 80035be:	bf00      	nop
 80035c0:	2000001c 	.word	0x2000001c
 80035c4:	08004efd 	.word	0x08004efd
 80035c8:	2000002c 	.word	0x2000002c

080035cc <cleanup_stdio>:
 80035cc:	6841      	ldr	r1, [r0, #4]
 80035ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003600 <cleanup_stdio+0x34>)
 80035d0:	4299      	cmp	r1, r3
 80035d2:	b510      	push	{r4, lr}
 80035d4:	4604      	mov	r4, r0
 80035d6:	d001      	beq.n	80035dc <cleanup_stdio+0x10>
 80035d8:	f001 fc90 	bl	8004efc <_fflush_r>
 80035dc:	68a1      	ldr	r1, [r4, #8]
 80035de:	4b09      	ldr	r3, [pc, #36]	@ (8003604 <cleanup_stdio+0x38>)
 80035e0:	4299      	cmp	r1, r3
 80035e2:	d002      	beq.n	80035ea <cleanup_stdio+0x1e>
 80035e4:	4620      	mov	r0, r4
 80035e6:	f001 fc89 	bl	8004efc <_fflush_r>
 80035ea:	68e1      	ldr	r1, [r4, #12]
 80035ec:	4b06      	ldr	r3, [pc, #24]	@ (8003608 <cleanup_stdio+0x3c>)
 80035ee:	4299      	cmp	r1, r3
 80035f0:	d004      	beq.n	80035fc <cleanup_stdio+0x30>
 80035f2:	4620      	mov	r0, r4
 80035f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035f8:	f001 bc80 	b.w	8004efc <_fflush_r>
 80035fc:	bd10      	pop	{r4, pc}
 80035fe:	bf00      	nop
 8003600:	20000288 	.word	0x20000288
 8003604:	200002f0 	.word	0x200002f0
 8003608:	20000358 	.word	0x20000358

0800360c <global_stdio_init.part.0>:
 800360c:	b510      	push	{r4, lr}
 800360e:	4b0b      	ldr	r3, [pc, #44]	@ (800363c <global_stdio_init.part.0+0x30>)
 8003610:	4c0b      	ldr	r4, [pc, #44]	@ (8003640 <global_stdio_init.part.0+0x34>)
 8003612:	4a0c      	ldr	r2, [pc, #48]	@ (8003644 <global_stdio_init.part.0+0x38>)
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	4620      	mov	r0, r4
 8003618:	2200      	movs	r2, #0
 800361a:	2104      	movs	r1, #4
 800361c:	f7ff ff94 	bl	8003548 <std>
 8003620:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003624:	2201      	movs	r2, #1
 8003626:	2109      	movs	r1, #9
 8003628:	f7ff ff8e 	bl	8003548 <std>
 800362c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003630:	2202      	movs	r2, #2
 8003632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003636:	2112      	movs	r1, #18
 8003638:	f7ff bf86 	b.w	8003548 <std>
 800363c:	200003c0 	.word	0x200003c0
 8003640:	20000288 	.word	0x20000288
 8003644:	080035b5 	.word	0x080035b5

08003648 <__sfp_lock_acquire>:
 8003648:	4801      	ldr	r0, [pc, #4]	@ (8003650 <__sfp_lock_acquire+0x8>)
 800364a:	f000 b900 	b.w	800384e <__retarget_lock_acquire_recursive>
 800364e:	bf00      	nop
 8003650:	200003c9 	.word	0x200003c9

08003654 <__sfp_lock_release>:
 8003654:	4801      	ldr	r0, [pc, #4]	@ (800365c <__sfp_lock_release+0x8>)
 8003656:	f000 b8fb 	b.w	8003850 <__retarget_lock_release_recursive>
 800365a:	bf00      	nop
 800365c:	200003c9 	.word	0x200003c9

08003660 <__sinit>:
 8003660:	b510      	push	{r4, lr}
 8003662:	4604      	mov	r4, r0
 8003664:	f7ff fff0 	bl	8003648 <__sfp_lock_acquire>
 8003668:	6a23      	ldr	r3, [r4, #32]
 800366a:	b11b      	cbz	r3, 8003674 <__sinit+0x14>
 800366c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003670:	f7ff bff0 	b.w	8003654 <__sfp_lock_release>
 8003674:	4b04      	ldr	r3, [pc, #16]	@ (8003688 <__sinit+0x28>)
 8003676:	6223      	str	r3, [r4, #32]
 8003678:	4b04      	ldr	r3, [pc, #16]	@ (800368c <__sinit+0x2c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f5      	bne.n	800366c <__sinit+0xc>
 8003680:	f7ff ffc4 	bl	800360c <global_stdio_init.part.0>
 8003684:	e7f2      	b.n	800366c <__sinit+0xc>
 8003686:	bf00      	nop
 8003688:	080035cd 	.word	0x080035cd
 800368c:	200003c0 	.word	0x200003c0

08003690 <_fwalk_sglue>:
 8003690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003694:	4607      	mov	r7, r0
 8003696:	4688      	mov	r8, r1
 8003698:	4614      	mov	r4, r2
 800369a:	2600      	movs	r6, #0
 800369c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036a0:	f1b9 0901 	subs.w	r9, r9, #1
 80036a4:	d505      	bpl.n	80036b2 <_fwalk_sglue+0x22>
 80036a6:	6824      	ldr	r4, [r4, #0]
 80036a8:	2c00      	cmp	r4, #0
 80036aa:	d1f7      	bne.n	800369c <_fwalk_sglue+0xc>
 80036ac:	4630      	mov	r0, r6
 80036ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036b2:	89ab      	ldrh	r3, [r5, #12]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d907      	bls.n	80036c8 <_fwalk_sglue+0x38>
 80036b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036bc:	3301      	adds	r3, #1
 80036be:	d003      	beq.n	80036c8 <_fwalk_sglue+0x38>
 80036c0:	4629      	mov	r1, r5
 80036c2:	4638      	mov	r0, r7
 80036c4:	47c0      	blx	r8
 80036c6:	4306      	orrs	r6, r0
 80036c8:	3568      	adds	r5, #104	@ 0x68
 80036ca:	e7e9      	b.n	80036a0 <_fwalk_sglue+0x10>

080036cc <__sread>:
 80036cc:	b510      	push	{r4, lr}
 80036ce:	460c      	mov	r4, r1
 80036d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d4:	f000 f86c 	bl	80037b0 <_read_r>
 80036d8:	2800      	cmp	r0, #0
 80036da:	bfab      	itete	ge
 80036dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80036de:	89a3      	ldrhlt	r3, [r4, #12]
 80036e0:	181b      	addge	r3, r3, r0
 80036e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80036e6:	bfac      	ite	ge
 80036e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80036ea:	81a3      	strhlt	r3, [r4, #12]
 80036ec:	bd10      	pop	{r4, pc}

080036ee <__swrite>:
 80036ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f2:	461f      	mov	r7, r3
 80036f4:	898b      	ldrh	r3, [r1, #12]
 80036f6:	05db      	lsls	r3, r3, #23
 80036f8:	4605      	mov	r5, r0
 80036fa:	460c      	mov	r4, r1
 80036fc:	4616      	mov	r6, r2
 80036fe:	d505      	bpl.n	800370c <__swrite+0x1e>
 8003700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003704:	2302      	movs	r3, #2
 8003706:	2200      	movs	r2, #0
 8003708:	f000 f840 	bl	800378c <_lseek_r>
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003712:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003716:	81a3      	strh	r3, [r4, #12]
 8003718:	4632      	mov	r2, r6
 800371a:	463b      	mov	r3, r7
 800371c:	4628      	mov	r0, r5
 800371e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003722:	f000 b857 	b.w	80037d4 <_write_r>

08003726 <__sseek>:
 8003726:	b510      	push	{r4, lr}
 8003728:	460c      	mov	r4, r1
 800372a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800372e:	f000 f82d 	bl	800378c <_lseek_r>
 8003732:	1c43      	adds	r3, r0, #1
 8003734:	89a3      	ldrh	r3, [r4, #12]
 8003736:	bf15      	itete	ne
 8003738:	6560      	strne	r0, [r4, #84]	@ 0x54
 800373a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800373e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003742:	81a3      	strheq	r3, [r4, #12]
 8003744:	bf18      	it	ne
 8003746:	81a3      	strhne	r3, [r4, #12]
 8003748:	bd10      	pop	{r4, pc}

0800374a <__sclose>:
 800374a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800374e:	f000 b80d 	b.w	800376c <_close_r>

08003752 <memset>:
 8003752:	4402      	add	r2, r0
 8003754:	4603      	mov	r3, r0
 8003756:	4293      	cmp	r3, r2
 8003758:	d100      	bne.n	800375c <memset+0xa>
 800375a:	4770      	bx	lr
 800375c:	f803 1b01 	strb.w	r1, [r3], #1
 8003760:	e7f9      	b.n	8003756 <memset+0x4>
	...

08003764 <_localeconv_r>:
 8003764:	4800      	ldr	r0, [pc, #0]	@ (8003768 <_localeconv_r+0x4>)
 8003766:	4770      	bx	lr
 8003768:	20000168 	.word	0x20000168

0800376c <_close_r>:
 800376c:	b538      	push	{r3, r4, r5, lr}
 800376e:	4d06      	ldr	r5, [pc, #24]	@ (8003788 <_close_r+0x1c>)
 8003770:	2300      	movs	r3, #0
 8003772:	4604      	mov	r4, r0
 8003774:	4608      	mov	r0, r1
 8003776:	602b      	str	r3, [r5, #0]
 8003778:	f7fd fc12 	bl	8000fa0 <_close>
 800377c:	1c43      	adds	r3, r0, #1
 800377e:	d102      	bne.n	8003786 <_close_r+0x1a>
 8003780:	682b      	ldr	r3, [r5, #0]
 8003782:	b103      	cbz	r3, 8003786 <_close_r+0x1a>
 8003784:	6023      	str	r3, [r4, #0]
 8003786:	bd38      	pop	{r3, r4, r5, pc}
 8003788:	200003c4 	.word	0x200003c4

0800378c <_lseek_r>:
 800378c:	b538      	push	{r3, r4, r5, lr}
 800378e:	4d07      	ldr	r5, [pc, #28]	@ (80037ac <_lseek_r+0x20>)
 8003790:	4604      	mov	r4, r0
 8003792:	4608      	mov	r0, r1
 8003794:	4611      	mov	r1, r2
 8003796:	2200      	movs	r2, #0
 8003798:	602a      	str	r2, [r5, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	f7fd fc27 	bl	8000fee <_lseek>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d102      	bne.n	80037aa <_lseek_r+0x1e>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	b103      	cbz	r3, 80037aa <_lseek_r+0x1e>
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	200003c4 	.word	0x200003c4

080037b0 <_read_r>:
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	4d07      	ldr	r5, [pc, #28]	@ (80037d0 <_read_r+0x20>)
 80037b4:	4604      	mov	r4, r0
 80037b6:	4608      	mov	r0, r1
 80037b8:	4611      	mov	r1, r2
 80037ba:	2200      	movs	r2, #0
 80037bc:	602a      	str	r2, [r5, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	f7fd fbb5 	bl	8000f2e <_read>
 80037c4:	1c43      	adds	r3, r0, #1
 80037c6:	d102      	bne.n	80037ce <_read_r+0x1e>
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	b103      	cbz	r3, 80037ce <_read_r+0x1e>
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	bd38      	pop	{r3, r4, r5, pc}
 80037d0:	200003c4 	.word	0x200003c4

080037d4 <_write_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	4d07      	ldr	r5, [pc, #28]	@ (80037f4 <_write_r+0x20>)
 80037d8:	4604      	mov	r4, r0
 80037da:	4608      	mov	r0, r1
 80037dc:	4611      	mov	r1, r2
 80037de:	2200      	movs	r2, #0
 80037e0:	602a      	str	r2, [r5, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f7fd fbc0 	bl	8000f68 <_write>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d102      	bne.n	80037f2 <_write_r+0x1e>
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	b103      	cbz	r3, 80037f2 <_write_r+0x1e>
 80037f0:	6023      	str	r3, [r4, #0]
 80037f2:	bd38      	pop	{r3, r4, r5, pc}
 80037f4:	200003c4 	.word	0x200003c4

080037f8 <__errno>:
 80037f8:	4b01      	ldr	r3, [pc, #4]	@ (8003800 <__errno+0x8>)
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000028 	.word	0x20000028

08003804 <__libc_init_array>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	4d0d      	ldr	r5, [pc, #52]	@ (800383c <__libc_init_array+0x38>)
 8003808:	4c0d      	ldr	r4, [pc, #52]	@ (8003840 <__libc_init_array+0x3c>)
 800380a:	1b64      	subs	r4, r4, r5
 800380c:	10a4      	asrs	r4, r4, #2
 800380e:	2600      	movs	r6, #0
 8003810:	42a6      	cmp	r6, r4
 8003812:	d109      	bne.n	8003828 <__libc_init_array+0x24>
 8003814:	4d0b      	ldr	r5, [pc, #44]	@ (8003844 <__libc_init_array+0x40>)
 8003816:	4c0c      	ldr	r4, [pc, #48]	@ (8003848 <__libc_init_array+0x44>)
 8003818:	f001 febe 	bl	8005598 <_init>
 800381c:	1b64      	subs	r4, r4, r5
 800381e:	10a4      	asrs	r4, r4, #2
 8003820:	2600      	movs	r6, #0
 8003822:	42a6      	cmp	r6, r4
 8003824:	d105      	bne.n	8003832 <__libc_init_array+0x2e>
 8003826:	bd70      	pop	{r4, r5, r6, pc}
 8003828:	f855 3b04 	ldr.w	r3, [r5], #4
 800382c:	4798      	blx	r3
 800382e:	3601      	adds	r6, #1
 8003830:	e7ee      	b.n	8003810 <__libc_init_array+0xc>
 8003832:	f855 3b04 	ldr.w	r3, [r5], #4
 8003836:	4798      	blx	r3
 8003838:	3601      	adds	r6, #1
 800383a:	e7f2      	b.n	8003822 <__libc_init_array+0x1e>
 800383c:	08005940 	.word	0x08005940
 8003840:	08005940 	.word	0x08005940
 8003844:	08005940 	.word	0x08005940
 8003848:	08005944 	.word	0x08005944

0800384c <__retarget_lock_init_recursive>:
 800384c:	4770      	bx	lr

0800384e <__retarget_lock_acquire_recursive>:
 800384e:	4770      	bx	lr

08003850 <__retarget_lock_release_recursive>:
 8003850:	4770      	bx	lr

08003852 <quorem>:
 8003852:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003856:	6903      	ldr	r3, [r0, #16]
 8003858:	690c      	ldr	r4, [r1, #16]
 800385a:	42a3      	cmp	r3, r4
 800385c:	4607      	mov	r7, r0
 800385e:	db7e      	blt.n	800395e <quorem+0x10c>
 8003860:	3c01      	subs	r4, #1
 8003862:	f101 0814 	add.w	r8, r1, #20
 8003866:	00a3      	lsls	r3, r4, #2
 8003868:	f100 0514 	add.w	r5, r0, #20
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003878:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800387c:	3301      	adds	r3, #1
 800387e:	429a      	cmp	r2, r3
 8003880:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003884:	fbb2 f6f3 	udiv	r6, r2, r3
 8003888:	d32e      	bcc.n	80038e8 <quorem+0x96>
 800388a:	f04f 0a00 	mov.w	sl, #0
 800388e:	46c4      	mov	ip, r8
 8003890:	46ae      	mov	lr, r5
 8003892:	46d3      	mov	fp, sl
 8003894:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003898:	b298      	uxth	r0, r3
 800389a:	fb06 a000 	mla	r0, r6, r0, sl
 800389e:	0c02      	lsrs	r2, r0, #16
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	fb06 2303 	mla	r3, r6, r3, r2
 80038a6:	f8de 2000 	ldr.w	r2, [lr]
 80038aa:	b280      	uxth	r0, r0
 80038ac:	b292      	uxth	r2, r2
 80038ae:	1a12      	subs	r2, r2, r0
 80038b0:	445a      	add	r2, fp
 80038b2:	f8de 0000 	ldr.w	r0, [lr]
 80038b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80038c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80038c4:	b292      	uxth	r2, r2
 80038c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80038ca:	45e1      	cmp	r9, ip
 80038cc:	f84e 2b04 	str.w	r2, [lr], #4
 80038d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80038d4:	d2de      	bcs.n	8003894 <quorem+0x42>
 80038d6:	9b00      	ldr	r3, [sp, #0]
 80038d8:	58eb      	ldr	r3, [r5, r3]
 80038da:	b92b      	cbnz	r3, 80038e8 <quorem+0x96>
 80038dc:	9b01      	ldr	r3, [sp, #4]
 80038de:	3b04      	subs	r3, #4
 80038e0:	429d      	cmp	r5, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	d32f      	bcc.n	8003946 <quorem+0xf4>
 80038e6:	613c      	str	r4, [r7, #16]
 80038e8:	4638      	mov	r0, r7
 80038ea:	f001 f97b 	bl	8004be4 <__mcmp>
 80038ee:	2800      	cmp	r0, #0
 80038f0:	db25      	blt.n	800393e <quorem+0xec>
 80038f2:	4629      	mov	r1, r5
 80038f4:	2000      	movs	r0, #0
 80038f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80038fa:	f8d1 c000 	ldr.w	ip, [r1]
 80038fe:	fa1f fe82 	uxth.w	lr, r2
 8003902:	fa1f f38c 	uxth.w	r3, ip
 8003906:	eba3 030e 	sub.w	r3, r3, lr
 800390a:	4403      	add	r3, r0
 800390c:	0c12      	lsrs	r2, r2, #16
 800390e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003912:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003916:	b29b      	uxth	r3, r3
 8003918:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800391c:	45c1      	cmp	r9, r8
 800391e:	f841 3b04 	str.w	r3, [r1], #4
 8003922:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003926:	d2e6      	bcs.n	80038f6 <quorem+0xa4>
 8003928:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800392c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003930:	b922      	cbnz	r2, 800393c <quorem+0xea>
 8003932:	3b04      	subs	r3, #4
 8003934:	429d      	cmp	r5, r3
 8003936:	461a      	mov	r2, r3
 8003938:	d30b      	bcc.n	8003952 <quorem+0x100>
 800393a:	613c      	str	r4, [r7, #16]
 800393c:	3601      	adds	r6, #1
 800393e:	4630      	mov	r0, r6
 8003940:	b003      	add	sp, #12
 8003942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	3b04      	subs	r3, #4
 800394a:	2a00      	cmp	r2, #0
 800394c:	d1cb      	bne.n	80038e6 <quorem+0x94>
 800394e:	3c01      	subs	r4, #1
 8003950:	e7c6      	b.n	80038e0 <quorem+0x8e>
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	3b04      	subs	r3, #4
 8003956:	2a00      	cmp	r2, #0
 8003958:	d1ef      	bne.n	800393a <quorem+0xe8>
 800395a:	3c01      	subs	r4, #1
 800395c:	e7ea      	b.n	8003934 <quorem+0xe2>
 800395e:	2000      	movs	r0, #0
 8003960:	e7ee      	b.n	8003940 <quorem+0xee>
 8003962:	0000      	movs	r0, r0
 8003964:	0000      	movs	r0, r0
	...

08003968 <_dtoa_r>:
 8003968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396c:	69c7      	ldr	r7, [r0, #28]
 800396e:	b099      	sub	sp, #100	@ 0x64
 8003970:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003974:	ec55 4b10 	vmov	r4, r5, d0
 8003978:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800397a:	9109      	str	r1, [sp, #36]	@ 0x24
 800397c:	4683      	mov	fp, r0
 800397e:	920e      	str	r2, [sp, #56]	@ 0x38
 8003980:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003982:	b97f      	cbnz	r7, 80039a4 <_dtoa_r+0x3c>
 8003984:	2010      	movs	r0, #16
 8003986:	f000 fdfd 	bl	8004584 <malloc>
 800398a:	4602      	mov	r2, r0
 800398c:	f8cb 001c 	str.w	r0, [fp, #28]
 8003990:	b920      	cbnz	r0, 800399c <_dtoa_r+0x34>
 8003992:	4ba7      	ldr	r3, [pc, #668]	@ (8003c30 <_dtoa_r+0x2c8>)
 8003994:	21ef      	movs	r1, #239	@ 0xef
 8003996:	48a7      	ldr	r0, [pc, #668]	@ (8003c34 <_dtoa_r+0x2cc>)
 8003998:	f001 faf6 	bl	8004f88 <__assert_func>
 800399c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80039a0:	6007      	str	r7, [r0, #0]
 80039a2:	60c7      	str	r7, [r0, #12]
 80039a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80039a8:	6819      	ldr	r1, [r3, #0]
 80039aa:	b159      	cbz	r1, 80039c4 <_dtoa_r+0x5c>
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	604a      	str	r2, [r1, #4]
 80039b0:	2301      	movs	r3, #1
 80039b2:	4093      	lsls	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
 80039b6:	4658      	mov	r0, fp
 80039b8:	f000 feda 	bl	8004770 <_Bfree>
 80039bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	1e2b      	subs	r3, r5, #0
 80039c6:	bfb9      	ittee	lt
 80039c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80039cc:	9303      	strlt	r3, [sp, #12]
 80039ce:	2300      	movge	r3, #0
 80039d0:	6033      	strge	r3, [r6, #0]
 80039d2:	9f03      	ldr	r7, [sp, #12]
 80039d4:	4b98      	ldr	r3, [pc, #608]	@ (8003c38 <_dtoa_r+0x2d0>)
 80039d6:	bfbc      	itt	lt
 80039d8:	2201      	movlt	r2, #1
 80039da:	6032      	strlt	r2, [r6, #0]
 80039dc:	43bb      	bics	r3, r7
 80039de:	d112      	bne.n	8003a06 <_dtoa_r+0x9e>
 80039e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80039e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80039ec:	4323      	orrs	r3, r4
 80039ee:	f000 854d 	beq.w	800448c <_dtoa_r+0xb24>
 80039f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80039f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003c4c <_dtoa_r+0x2e4>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 854f 	beq.w	800449c <_dtoa_r+0xb34>
 80039fe:	f10a 0303 	add.w	r3, sl, #3
 8003a02:	f000 bd49 	b.w	8004498 <_dtoa_r+0xb30>
 8003a06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	ec51 0b17 	vmov	r0, r1, d7
 8003a10:	2300      	movs	r3, #0
 8003a12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003a16:	f7fd f87f 	bl	8000b18 <__aeabi_dcmpeq>
 8003a1a:	4680      	mov	r8, r0
 8003a1c:	b158      	cbz	r0, 8003a36 <_dtoa_r+0xce>
 8003a1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003a20:	2301      	movs	r3, #1
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003a26:	b113      	cbz	r3, 8003a2e <_dtoa_r+0xc6>
 8003a28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003a2a:	4b84      	ldr	r3, [pc, #528]	@ (8003c3c <_dtoa_r+0x2d4>)
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003c50 <_dtoa_r+0x2e8>
 8003a32:	f000 bd33 	b.w	800449c <_dtoa_r+0xb34>
 8003a36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003a3a:	aa16      	add	r2, sp, #88	@ 0x58
 8003a3c:	a917      	add	r1, sp, #92	@ 0x5c
 8003a3e:	4658      	mov	r0, fp
 8003a40:	f001 f980 	bl	8004d44 <__d2b>
 8003a44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003a48:	4681      	mov	r9, r0
 8003a4a:	2e00      	cmp	r6, #0
 8003a4c:	d077      	beq.n	8003b3e <_dtoa_r+0x1d6>
 8003a4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003a5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003a60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003a64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003a68:	4619      	mov	r1, r3
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	4b74      	ldr	r3, [pc, #464]	@ (8003c40 <_dtoa_r+0x2d8>)
 8003a6e:	f7fc fc33 	bl	80002d8 <__aeabi_dsub>
 8003a72:	a369      	add	r3, pc, #420	@ (adr r3, 8003c18 <_dtoa_r+0x2b0>)
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f7fc fde6 	bl	8000648 <__aeabi_dmul>
 8003a7c:	a368      	add	r3, pc, #416	@ (adr r3, 8003c20 <_dtoa_r+0x2b8>)
 8003a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a82:	f7fc fc2b 	bl	80002dc <__adddf3>
 8003a86:	4604      	mov	r4, r0
 8003a88:	4630      	mov	r0, r6
 8003a8a:	460d      	mov	r5, r1
 8003a8c:	f7fc fd72 	bl	8000574 <__aeabi_i2d>
 8003a90:	a365      	add	r3, pc, #404	@ (adr r3, 8003c28 <_dtoa_r+0x2c0>)
 8003a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a96:	f7fc fdd7 	bl	8000648 <__aeabi_dmul>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	f7fc fc1b 	bl	80002dc <__adddf3>
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	460d      	mov	r5, r1
 8003aaa:	f7fd f87d 	bl	8000ba8 <__aeabi_d2iz>
 8003aae:	2200      	movs	r2, #0
 8003ab0:	4607      	mov	r7, r0
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fd f838 	bl	8000b2c <__aeabi_dcmplt>
 8003abc:	b140      	cbz	r0, 8003ad0 <_dtoa_r+0x168>
 8003abe:	4638      	mov	r0, r7
 8003ac0:	f7fc fd58 	bl	8000574 <__aeabi_i2d>
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	462b      	mov	r3, r5
 8003ac8:	f7fd f826 	bl	8000b18 <__aeabi_dcmpeq>
 8003acc:	b900      	cbnz	r0, 8003ad0 <_dtoa_r+0x168>
 8003ace:	3f01      	subs	r7, #1
 8003ad0:	2f16      	cmp	r7, #22
 8003ad2:	d851      	bhi.n	8003b78 <_dtoa_r+0x210>
 8003ad4:	4b5b      	ldr	r3, [pc, #364]	@ (8003c44 <_dtoa_r+0x2dc>)
 8003ad6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ae2:	f7fd f823 	bl	8000b2c <__aeabi_dcmplt>
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	d048      	beq.n	8003b7c <_dtoa_r+0x214>
 8003aea:	3f01      	subs	r7, #1
 8003aec:	2300      	movs	r3, #0
 8003aee:	9312      	str	r3, [sp, #72]	@ 0x48
 8003af0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003af2:	1b9b      	subs	r3, r3, r6
 8003af4:	1e5a      	subs	r2, r3, #1
 8003af6:	bf44      	itt	mi
 8003af8:	f1c3 0801 	rsbmi	r8, r3, #1
 8003afc:	2300      	movmi	r3, #0
 8003afe:	9208      	str	r2, [sp, #32]
 8003b00:	bf54      	ite	pl
 8003b02:	f04f 0800 	movpl.w	r8, #0
 8003b06:	9308      	strmi	r3, [sp, #32]
 8003b08:	2f00      	cmp	r7, #0
 8003b0a:	db39      	blt.n	8003b80 <_dtoa_r+0x218>
 8003b0c:	9b08      	ldr	r3, [sp, #32]
 8003b0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8003b10:	443b      	add	r3, r7
 8003b12:	9308      	str	r3, [sp, #32]
 8003b14:	2300      	movs	r3, #0
 8003b16:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b1a:	2b09      	cmp	r3, #9
 8003b1c:	d864      	bhi.n	8003be8 <_dtoa_r+0x280>
 8003b1e:	2b05      	cmp	r3, #5
 8003b20:	bfc4      	itt	gt
 8003b22:	3b04      	subgt	r3, #4
 8003b24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8003b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b28:	f1a3 0302 	sub.w	r3, r3, #2
 8003b2c:	bfcc      	ite	gt
 8003b2e:	2400      	movgt	r4, #0
 8003b30:	2401      	movle	r4, #1
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d863      	bhi.n	8003bfe <_dtoa_r+0x296>
 8003b36:	e8df f003 	tbb	[pc, r3]
 8003b3a:	372a      	.short	0x372a
 8003b3c:	5535      	.short	0x5535
 8003b3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003b42:	441e      	add	r6, r3
 8003b44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	bfc1      	itttt	gt
 8003b4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003b50:	409f      	lslgt	r7, r3
 8003b52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003b56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003b5a:	bfd6      	itet	le
 8003b5c:	f1c3 0320 	rsble	r3, r3, #32
 8003b60:	ea47 0003 	orrgt.w	r0, r7, r3
 8003b64:	fa04 f003 	lslle.w	r0, r4, r3
 8003b68:	f7fc fcf4 	bl	8000554 <__aeabi_ui2d>
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003b72:	3e01      	subs	r6, #1
 8003b74:	9214      	str	r2, [sp, #80]	@ 0x50
 8003b76:	e777      	b.n	8003a68 <_dtoa_r+0x100>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e7b8      	b.n	8003aee <_dtoa_r+0x186>
 8003b7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8003b7e:	e7b7      	b.n	8003af0 <_dtoa_r+0x188>
 8003b80:	427b      	negs	r3, r7
 8003b82:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b84:	2300      	movs	r3, #0
 8003b86:	eba8 0807 	sub.w	r8, r8, r7
 8003b8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003b8c:	e7c4      	b.n	8003b18 <_dtoa_r+0x1b0>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	dc35      	bgt.n	8003c04 <_dtoa_r+0x29c>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	9307      	str	r3, [sp, #28]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	920e      	str	r2, [sp, #56]	@ 0x38
 8003ba2:	e00b      	b.n	8003bbc <_dtoa_r+0x254>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e7f3      	b.n	8003b90 <_dtoa_r+0x228>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003bac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003bae:	18fb      	adds	r3, r7, r3
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	9307      	str	r3, [sp, #28]
 8003bb8:	bfb8      	it	lt
 8003bba:	2301      	movlt	r3, #1
 8003bbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	f102 0514 	add.w	r5, r2, #20
 8003bc8:	429d      	cmp	r5, r3
 8003bca:	d91f      	bls.n	8003c0c <_dtoa_r+0x2a4>
 8003bcc:	6041      	str	r1, [r0, #4]
 8003bce:	4658      	mov	r0, fp
 8003bd0:	f000 fd8e 	bl	80046f0 <_Balloc>
 8003bd4:	4682      	mov	sl, r0
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d13c      	bne.n	8003c54 <_dtoa_r+0x2ec>
 8003bda:	4b1b      	ldr	r3, [pc, #108]	@ (8003c48 <_dtoa_r+0x2e0>)
 8003bdc:	4602      	mov	r2, r0
 8003bde:	f240 11af 	movw	r1, #431	@ 0x1af
 8003be2:	e6d8      	b.n	8003996 <_dtoa_r+0x2e>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e7e0      	b.n	8003baa <_dtoa_r+0x242>
 8003be8:	2401      	movs	r4, #1
 8003bea:	2300      	movs	r3, #0
 8003bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	9307      	str	r3, [sp, #28]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2312      	movs	r3, #18
 8003bfc:	e7d0      	b.n	8003ba0 <_dtoa_r+0x238>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c02:	e7f5      	b.n	8003bf0 <_dtoa_r+0x288>
 8003c04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	9307      	str	r3, [sp, #28]
 8003c0a:	e7d7      	b.n	8003bbc <_dtoa_r+0x254>
 8003c0c:	3101      	adds	r1, #1
 8003c0e:	0052      	lsls	r2, r2, #1
 8003c10:	e7d8      	b.n	8003bc4 <_dtoa_r+0x25c>
 8003c12:	bf00      	nop
 8003c14:	f3af 8000 	nop.w
 8003c18:	636f4361 	.word	0x636f4361
 8003c1c:	3fd287a7 	.word	0x3fd287a7
 8003c20:	8b60c8b3 	.word	0x8b60c8b3
 8003c24:	3fc68a28 	.word	0x3fc68a28
 8003c28:	509f79fb 	.word	0x509f79fb
 8003c2c:	3fd34413 	.word	0x3fd34413
 8003c30:	08005609 	.word	0x08005609
 8003c34:	08005620 	.word	0x08005620
 8003c38:	7ff00000 	.word	0x7ff00000
 8003c3c:	080055d9 	.word	0x080055d9
 8003c40:	3ff80000 	.word	0x3ff80000
 8003c44:	08005718 	.word	0x08005718
 8003c48:	08005678 	.word	0x08005678
 8003c4c:	08005605 	.word	0x08005605
 8003c50:	080055d8 	.word	0x080055d8
 8003c54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003c58:	6018      	str	r0, [r3, #0]
 8003c5a:	9b07      	ldr	r3, [sp, #28]
 8003c5c:	2b0e      	cmp	r3, #14
 8003c5e:	f200 80a4 	bhi.w	8003daa <_dtoa_r+0x442>
 8003c62:	2c00      	cmp	r4, #0
 8003c64:	f000 80a1 	beq.w	8003daa <_dtoa_r+0x442>
 8003c68:	2f00      	cmp	r7, #0
 8003c6a:	dd33      	ble.n	8003cd4 <_dtoa_r+0x36c>
 8003c6c:	4bad      	ldr	r3, [pc, #692]	@ (8003f24 <_dtoa_r+0x5bc>)
 8003c6e:	f007 020f 	and.w	r2, r7, #15
 8003c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c76:	ed93 7b00 	vldr	d7, [r3]
 8003c7a:	05f8      	lsls	r0, r7, #23
 8003c7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003c80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003c84:	d516      	bpl.n	8003cb4 <_dtoa_r+0x34c>
 8003c86:	4ba8      	ldr	r3, [pc, #672]	@ (8003f28 <_dtoa_r+0x5c0>)
 8003c88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c90:	f7fc fe04 	bl	800089c <__aeabi_ddiv>
 8003c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c98:	f004 040f 	and.w	r4, r4, #15
 8003c9c:	2603      	movs	r6, #3
 8003c9e:	4da2      	ldr	r5, [pc, #648]	@ (8003f28 <_dtoa_r+0x5c0>)
 8003ca0:	b954      	cbnz	r4, 8003cb8 <_dtoa_r+0x350>
 8003ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003caa:	f7fc fdf7 	bl	800089c <__aeabi_ddiv>
 8003cae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cb2:	e028      	b.n	8003d06 <_dtoa_r+0x39e>
 8003cb4:	2602      	movs	r6, #2
 8003cb6:	e7f2      	b.n	8003c9e <_dtoa_r+0x336>
 8003cb8:	07e1      	lsls	r1, r4, #31
 8003cba:	d508      	bpl.n	8003cce <_dtoa_r+0x366>
 8003cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003cc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003cc4:	f7fc fcc0 	bl	8000648 <__aeabi_dmul>
 8003cc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ccc:	3601      	adds	r6, #1
 8003cce:	1064      	asrs	r4, r4, #1
 8003cd0:	3508      	adds	r5, #8
 8003cd2:	e7e5      	b.n	8003ca0 <_dtoa_r+0x338>
 8003cd4:	f000 80d2 	beq.w	8003e7c <_dtoa_r+0x514>
 8003cd8:	427c      	negs	r4, r7
 8003cda:	4b92      	ldr	r3, [pc, #584]	@ (8003f24 <_dtoa_r+0x5bc>)
 8003cdc:	4d92      	ldr	r5, [pc, #584]	@ (8003f28 <_dtoa_r+0x5c0>)
 8003cde:	f004 020f 	and.w	r2, r4, #15
 8003ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003cee:	f7fc fcab 	bl	8000648 <__aeabi_dmul>
 8003cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cf6:	1124      	asrs	r4, r4, #4
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2602      	movs	r6, #2
 8003cfc:	2c00      	cmp	r4, #0
 8003cfe:	f040 80b2 	bne.w	8003e66 <_dtoa_r+0x4fe>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1d3      	bne.n	8003cae <_dtoa_r+0x346>
 8003d06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003d08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80b7 	beq.w	8003e80 <_dtoa_r+0x518>
 8003d12:	4b86      	ldr	r3, [pc, #536]	@ (8003f2c <_dtoa_r+0x5c4>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	4620      	mov	r0, r4
 8003d18:	4629      	mov	r1, r5
 8003d1a:	f7fc ff07 	bl	8000b2c <__aeabi_dcmplt>
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	f000 80ae 	beq.w	8003e80 <_dtoa_r+0x518>
 8003d24:	9b07      	ldr	r3, [sp, #28]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80aa 	beq.w	8003e80 <_dtoa_r+0x518>
 8003d2c:	9b00      	ldr	r3, [sp, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	dd37      	ble.n	8003da2 <_dtoa_r+0x43a>
 8003d32:	1e7b      	subs	r3, r7, #1
 8003d34:	9304      	str	r3, [sp, #16]
 8003d36:	4620      	mov	r0, r4
 8003d38:	4b7d      	ldr	r3, [pc, #500]	@ (8003f30 <_dtoa_r+0x5c8>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	f7fc fc83 	bl	8000648 <__aeabi_dmul>
 8003d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d46:	9c00      	ldr	r4, [sp, #0]
 8003d48:	3601      	adds	r6, #1
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f7fc fc12 	bl	8000574 <__aeabi_i2d>
 8003d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d54:	f7fc fc78 	bl	8000648 <__aeabi_dmul>
 8003d58:	4b76      	ldr	r3, [pc, #472]	@ (8003f34 <_dtoa_r+0x5cc>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f7fc fabe 	bl	80002dc <__adddf3>
 8003d60:	4605      	mov	r5, r0
 8003d62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003d66:	2c00      	cmp	r4, #0
 8003d68:	f040 808d 	bne.w	8003e86 <_dtoa_r+0x51e>
 8003d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d70:	4b71      	ldr	r3, [pc, #452]	@ (8003f38 <_dtoa_r+0x5d0>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	f7fc fab0 	bl	80002d8 <__aeabi_dsub>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d80:	462a      	mov	r2, r5
 8003d82:	4633      	mov	r3, r6
 8003d84:	f7fc fef0 	bl	8000b68 <__aeabi_dcmpgt>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	f040 828b 	bne.w	80042a4 <_dtoa_r+0x93c>
 8003d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d92:	462a      	mov	r2, r5
 8003d94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003d98:	f7fc fec8 	bl	8000b2c <__aeabi_dcmplt>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	f040 8128 	bne.w	8003ff2 <_dtoa_r+0x68a>
 8003da2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003da6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003daa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f2c0 815a 	blt.w	8004066 <_dtoa_r+0x6fe>
 8003db2:	2f0e      	cmp	r7, #14
 8003db4:	f300 8157 	bgt.w	8004066 <_dtoa_r+0x6fe>
 8003db8:	4b5a      	ldr	r3, [pc, #360]	@ (8003f24 <_dtoa_r+0x5bc>)
 8003dba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003dbe:	ed93 7b00 	vldr	d7, [r3]
 8003dc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	ed8d 7b00 	vstr	d7, [sp]
 8003dca:	da03      	bge.n	8003dd4 <_dtoa_r+0x46c>
 8003dcc:	9b07      	ldr	r3, [sp, #28]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f340 8101 	ble.w	8003fd6 <_dtoa_r+0x66e>
 8003dd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003dd8:	4656      	mov	r6, sl
 8003dda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003dde:	4620      	mov	r0, r4
 8003de0:	4629      	mov	r1, r5
 8003de2:	f7fc fd5b 	bl	800089c <__aeabi_ddiv>
 8003de6:	f7fc fedf 	bl	8000ba8 <__aeabi_d2iz>
 8003dea:	4680      	mov	r8, r0
 8003dec:	f7fc fbc2 	bl	8000574 <__aeabi_i2d>
 8003df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003df4:	f7fc fc28 	bl	8000648 <__aeabi_dmul>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	4629      	mov	r1, r5
 8003e00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003e04:	f7fc fa68 	bl	80002d8 <__aeabi_dsub>
 8003e08:	f806 4b01 	strb.w	r4, [r6], #1
 8003e0c:	9d07      	ldr	r5, [sp, #28]
 8003e0e:	eba6 040a 	sub.w	r4, r6, sl
 8003e12:	42a5      	cmp	r5, r4
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	f040 8117 	bne.w	800404a <_dtoa_r+0x6e2>
 8003e1c:	f7fc fa5e 	bl	80002dc <__adddf3>
 8003e20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e24:	4604      	mov	r4, r0
 8003e26:	460d      	mov	r5, r1
 8003e28:	f7fc fe9e 	bl	8000b68 <__aeabi_dcmpgt>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	f040 80f9 	bne.w	8004024 <_dtoa_r+0x6bc>
 8003e32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e36:	4620      	mov	r0, r4
 8003e38:	4629      	mov	r1, r5
 8003e3a:	f7fc fe6d 	bl	8000b18 <__aeabi_dcmpeq>
 8003e3e:	b118      	cbz	r0, 8003e48 <_dtoa_r+0x4e0>
 8003e40:	f018 0f01 	tst.w	r8, #1
 8003e44:	f040 80ee 	bne.w	8004024 <_dtoa_r+0x6bc>
 8003e48:	4649      	mov	r1, r9
 8003e4a:	4658      	mov	r0, fp
 8003e4c:	f000 fc90 	bl	8004770 <_Bfree>
 8003e50:	2300      	movs	r3, #0
 8003e52:	7033      	strb	r3, [r6, #0]
 8003e54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003e56:	3701      	adds	r7, #1
 8003e58:	601f      	str	r7, [r3, #0]
 8003e5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 831d 	beq.w	800449c <_dtoa_r+0xb34>
 8003e62:	601e      	str	r6, [r3, #0]
 8003e64:	e31a      	b.n	800449c <_dtoa_r+0xb34>
 8003e66:	07e2      	lsls	r2, r4, #31
 8003e68:	d505      	bpl.n	8003e76 <_dtoa_r+0x50e>
 8003e6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e6e:	f7fc fbeb 	bl	8000648 <__aeabi_dmul>
 8003e72:	3601      	adds	r6, #1
 8003e74:	2301      	movs	r3, #1
 8003e76:	1064      	asrs	r4, r4, #1
 8003e78:	3508      	adds	r5, #8
 8003e7a:	e73f      	b.n	8003cfc <_dtoa_r+0x394>
 8003e7c:	2602      	movs	r6, #2
 8003e7e:	e742      	b.n	8003d06 <_dtoa_r+0x39e>
 8003e80:	9c07      	ldr	r4, [sp, #28]
 8003e82:	9704      	str	r7, [sp, #16]
 8003e84:	e761      	b.n	8003d4a <_dtoa_r+0x3e2>
 8003e86:	4b27      	ldr	r3, [pc, #156]	@ (8003f24 <_dtoa_r+0x5bc>)
 8003e88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003e8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003e8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003e92:	4454      	add	r4, sl
 8003e94:	2900      	cmp	r1, #0
 8003e96:	d053      	beq.n	8003f40 <_dtoa_r+0x5d8>
 8003e98:	4928      	ldr	r1, [pc, #160]	@ (8003f3c <_dtoa_r+0x5d4>)
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f7fc fcfe 	bl	800089c <__aeabi_ddiv>
 8003ea0:	4633      	mov	r3, r6
 8003ea2:	462a      	mov	r2, r5
 8003ea4:	f7fc fa18 	bl	80002d8 <__aeabi_dsub>
 8003ea8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003eac:	4656      	mov	r6, sl
 8003eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003eb2:	f7fc fe79 	bl	8000ba8 <__aeabi_d2iz>
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	f7fc fb5c 	bl	8000574 <__aeabi_i2d>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ec4:	f7fc fa08 	bl	80002d8 <__aeabi_dsub>
 8003ec8:	3530      	adds	r5, #48	@ 0x30
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ed2:	f806 5b01 	strb.w	r5, [r6], #1
 8003ed6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003eda:	f7fc fe27 	bl	8000b2c <__aeabi_dcmplt>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d171      	bne.n	8003fc6 <_dtoa_r+0x65e>
 8003ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ee6:	4911      	ldr	r1, [pc, #68]	@ (8003f2c <_dtoa_r+0x5c4>)
 8003ee8:	2000      	movs	r0, #0
 8003eea:	f7fc f9f5 	bl	80002d8 <__aeabi_dsub>
 8003eee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003ef2:	f7fc fe1b 	bl	8000b2c <__aeabi_dcmplt>
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	f040 8095 	bne.w	8004026 <_dtoa_r+0x6be>
 8003efc:	42a6      	cmp	r6, r4
 8003efe:	f43f af50 	beq.w	8003da2 <_dtoa_r+0x43a>
 8003f02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003f06:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <_dtoa_r+0x5c8>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f7fc fb9d 	bl	8000648 <__aeabi_dmul>
 8003f0e:	4b08      	ldr	r3, [pc, #32]	@ (8003f30 <_dtoa_r+0x5c8>)
 8003f10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003f14:	2200      	movs	r2, #0
 8003f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f1a:	f7fc fb95 	bl	8000648 <__aeabi_dmul>
 8003f1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f22:	e7c4      	b.n	8003eae <_dtoa_r+0x546>
 8003f24:	08005718 	.word	0x08005718
 8003f28:	080056f0 	.word	0x080056f0
 8003f2c:	3ff00000 	.word	0x3ff00000
 8003f30:	40240000 	.word	0x40240000
 8003f34:	401c0000 	.word	0x401c0000
 8003f38:	40140000 	.word	0x40140000
 8003f3c:	3fe00000 	.word	0x3fe00000
 8003f40:	4631      	mov	r1, r6
 8003f42:	4628      	mov	r0, r5
 8003f44:	f7fc fb80 	bl	8000648 <__aeabi_dmul>
 8003f48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003f4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8003f4e:	4656      	mov	r6, sl
 8003f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f54:	f7fc fe28 	bl	8000ba8 <__aeabi_d2iz>
 8003f58:	4605      	mov	r5, r0
 8003f5a:	f7fc fb0b 	bl	8000574 <__aeabi_i2d>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f66:	f7fc f9b7 	bl	80002d8 <__aeabi_dsub>
 8003f6a:	3530      	adds	r5, #48	@ 0x30
 8003f6c:	f806 5b01 	strb.w	r5, [r6], #1
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	42a6      	cmp	r6, r4
 8003f76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	d124      	bne.n	8003fca <_dtoa_r+0x662>
 8003f80:	4bac      	ldr	r3, [pc, #688]	@ (8004234 <_dtoa_r+0x8cc>)
 8003f82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003f86:	f7fc f9a9 	bl	80002dc <__adddf3>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f92:	f7fc fde9 	bl	8000b68 <__aeabi_dcmpgt>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d145      	bne.n	8004026 <_dtoa_r+0x6be>
 8003f9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003f9e:	49a5      	ldr	r1, [pc, #660]	@ (8004234 <_dtoa_r+0x8cc>)
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f7fc f999 	bl	80002d8 <__aeabi_dsub>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fae:	f7fc fdbd 	bl	8000b2c <__aeabi_dcmplt>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	f43f aef5 	beq.w	8003da2 <_dtoa_r+0x43a>
 8003fb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8003fba:	1e73      	subs	r3, r6, #1
 8003fbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8003fbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003fc2:	2b30      	cmp	r3, #48	@ 0x30
 8003fc4:	d0f8      	beq.n	8003fb8 <_dtoa_r+0x650>
 8003fc6:	9f04      	ldr	r7, [sp, #16]
 8003fc8:	e73e      	b.n	8003e48 <_dtoa_r+0x4e0>
 8003fca:	4b9b      	ldr	r3, [pc, #620]	@ (8004238 <_dtoa_r+0x8d0>)
 8003fcc:	f7fc fb3c 	bl	8000648 <__aeabi_dmul>
 8003fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fd4:	e7bc      	b.n	8003f50 <_dtoa_r+0x5e8>
 8003fd6:	d10c      	bne.n	8003ff2 <_dtoa_r+0x68a>
 8003fd8:	4b98      	ldr	r3, [pc, #608]	@ (800423c <_dtoa_r+0x8d4>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fe0:	f7fc fb32 	bl	8000648 <__aeabi_dmul>
 8003fe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fe8:	f7fc fdb4 	bl	8000b54 <__aeabi_dcmpge>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	f000 8157 	beq.w	80042a0 <_dtoa_r+0x938>
 8003ff2:	2400      	movs	r4, #0
 8003ff4:	4625      	mov	r5, r4
 8003ff6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	9304      	str	r3, [sp, #16]
 8003ffc:	4656      	mov	r6, sl
 8003ffe:	2700      	movs	r7, #0
 8004000:	4621      	mov	r1, r4
 8004002:	4658      	mov	r0, fp
 8004004:	f000 fbb4 	bl	8004770 <_Bfree>
 8004008:	2d00      	cmp	r5, #0
 800400a:	d0dc      	beq.n	8003fc6 <_dtoa_r+0x65e>
 800400c:	b12f      	cbz	r7, 800401a <_dtoa_r+0x6b2>
 800400e:	42af      	cmp	r7, r5
 8004010:	d003      	beq.n	800401a <_dtoa_r+0x6b2>
 8004012:	4639      	mov	r1, r7
 8004014:	4658      	mov	r0, fp
 8004016:	f000 fbab 	bl	8004770 <_Bfree>
 800401a:	4629      	mov	r1, r5
 800401c:	4658      	mov	r0, fp
 800401e:	f000 fba7 	bl	8004770 <_Bfree>
 8004022:	e7d0      	b.n	8003fc6 <_dtoa_r+0x65e>
 8004024:	9704      	str	r7, [sp, #16]
 8004026:	4633      	mov	r3, r6
 8004028:	461e      	mov	r6, r3
 800402a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800402e:	2a39      	cmp	r2, #57	@ 0x39
 8004030:	d107      	bne.n	8004042 <_dtoa_r+0x6da>
 8004032:	459a      	cmp	sl, r3
 8004034:	d1f8      	bne.n	8004028 <_dtoa_r+0x6c0>
 8004036:	9a04      	ldr	r2, [sp, #16]
 8004038:	3201      	adds	r2, #1
 800403a:	9204      	str	r2, [sp, #16]
 800403c:	2230      	movs	r2, #48	@ 0x30
 800403e:	f88a 2000 	strb.w	r2, [sl]
 8004042:	781a      	ldrb	r2, [r3, #0]
 8004044:	3201      	adds	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
 8004048:	e7bd      	b.n	8003fc6 <_dtoa_r+0x65e>
 800404a:	4b7b      	ldr	r3, [pc, #492]	@ (8004238 <_dtoa_r+0x8d0>)
 800404c:	2200      	movs	r2, #0
 800404e:	f7fc fafb 	bl	8000648 <__aeabi_dmul>
 8004052:	2200      	movs	r2, #0
 8004054:	2300      	movs	r3, #0
 8004056:	4604      	mov	r4, r0
 8004058:	460d      	mov	r5, r1
 800405a:	f7fc fd5d 	bl	8000b18 <__aeabi_dcmpeq>
 800405e:	2800      	cmp	r0, #0
 8004060:	f43f aebb 	beq.w	8003dda <_dtoa_r+0x472>
 8004064:	e6f0      	b.n	8003e48 <_dtoa_r+0x4e0>
 8004066:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004068:	2a00      	cmp	r2, #0
 800406a:	f000 80db 	beq.w	8004224 <_dtoa_r+0x8bc>
 800406e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004070:	2a01      	cmp	r2, #1
 8004072:	f300 80bf 	bgt.w	80041f4 <_dtoa_r+0x88c>
 8004076:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004078:	2a00      	cmp	r2, #0
 800407a:	f000 80b7 	beq.w	80041ec <_dtoa_r+0x884>
 800407e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004082:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004084:	4646      	mov	r6, r8
 8004086:	9a08      	ldr	r2, [sp, #32]
 8004088:	2101      	movs	r1, #1
 800408a:	441a      	add	r2, r3
 800408c:	4658      	mov	r0, fp
 800408e:	4498      	add	r8, r3
 8004090:	9208      	str	r2, [sp, #32]
 8004092:	f000 fc21 	bl	80048d8 <__i2b>
 8004096:	4605      	mov	r5, r0
 8004098:	b15e      	cbz	r6, 80040b2 <_dtoa_r+0x74a>
 800409a:	9b08      	ldr	r3, [sp, #32]
 800409c:	2b00      	cmp	r3, #0
 800409e:	dd08      	ble.n	80040b2 <_dtoa_r+0x74a>
 80040a0:	42b3      	cmp	r3, r6
 80040a2:	9a08      	ldr	r2, [sp, #32]
 80040a4:	bfa8      	it	ge
 80040a6:	4633      	movge	r3, r6
 80040a8:	eba8 0803 	sub.w	r8, r8, r3
 80040ac:	1af6      	subs	r6, r6, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	9308      	str	r3, [sp, #32]
 80040b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040b4:	b1f3      	cbz	r3, 80040f4 <_dtoa_r+0x78c>
 80040b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80b7 	beq.w	800422c <_dtoa_r+0x8c4>
 80040be:	b18c      	cbz	r4, 80040e4 <_dtoa_r+0x77c>
 80040c0:	4629      	mov	r1, r5
 80040c2:	4622      	mov	r2, r4
 80040c4:	4658      	mov	r0, fp
 80040c6:	f000 fcc7 	bl	8004a58 <__pow5mult>
 80040ca:	464a      	mov	r2, r9
 80040cc:	4601      	mov	r1, r0
 80040ce:	4605      	mov	r5, r0
 80040d0:	4658      	mov	r0, fp
 80040d2:	f000 fc17 	bl	8004904 <__multiply>
 80040d6:	4649      	mov	r1, r9
 80040d8:	9004      	str	r0, [sp, #16]
 80040da:	4658      	mov	r0, fp
 80040dc:	f000 fb48 	bl	8004770 <_Bfree>
 80040e0:	9b04      	ldr	r3, [sp, #16]
 80040e2:	4699      	mov	r9, r3
 80040e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040e6:	1b1a      	subs	r2, r3, r4
 80040e8:	d004      	beq.n	80040f4 <_dtoa_r+0x78c>
 80040ea:	4649      	mov	r1, r9
 80040ec:	4658      	mov	r0, fp
 80040ee:	f000 fcb3 	bl	8004a58 <__pow5mult>
 80040f2:	4681      	mov	r9, r0
 80040f4:	2101      	movs	r1, #1
 80040f6:	4658      	mov	r0, fp
 80040f8:	f000 fbee 	bl	80048d8 <__i2b>
 80040fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80040fe:	4604      	mov	r4, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 81cf 	beq.w	80044a4 <_dtoa_r+0xb3c>
 8004106:	461a      	mov	r2, r3
 8004108:	4601      	mov	r1, r0
 800410a:	4658      	mov	r0, fp
 800410c:	f000 fca4 	bl	8004a58 <__pow5mult>
 8004110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004112:	2b01      	cmp	r3, #1
 8004114:	4604      	mov	r4, r0
 8004116:	f300 8095 	bgt.w	8004244 <_dtoa_r+0x8dc>
 800411a:	9b02      	ldr	r3, [sp, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f040 8087 	bne.w	8004230 <_dtoa_r+0x8c8>
 8004122:	9b03      	ldr	r3, [sp, #12]
 8004124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 8089 	bne.w	8004240 <_dtoa_r+0x8d8>
 800412e:	9b03      	ldr	r3, [sp, #12]
 8004130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004134:	0d1b      	lsrs	r3, r3, #20
 8004136:	051b      	lsls	r3, r3, #20
 8004138:	b12b      	cbz	r3, 8004146 <_dtoa_r+0x7de>
 800413a:	9b08      	ldr	r3, [sp, #32]
 800413c:	3301      	adds	r3, #1
 800413e:	9308      	str	r3, [sp, #32]
 8004140:	f108 0801 	add.w	r8, r8, #1
 8004144:	2301      	movs	r3, #1
 8004146:	930a      	str	r3, [sp, #40]	@ 0x28
 8004148:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 81b0 	beq.w	80044b0 <_dtoa_r+0xb48>
 8004150:	6923      	ldr	r3, [r4, #16]
 8004152:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004156:	6918      	ldr	r0, [r3, #16]
 8004158:	f000 fb72 	bl	8004840 <__hi0bits>
 800415c:	f1c0 0020 	rsb	r0, r0, #32
 8004160:	9b08      	ldr	r3, [sp, #32]
 8004162:	4418      	add	r0, r3
 8004164:	f010 001f 	ands.w	r0, r0, #31
 8004168:	d077      	beq.n	800425a <_dtoa_r+0x8f2>
 800416a:	f1c0 0320 	rsb	r3, r0, #32
 800416e:	2b04      	cmp	r3, #4
 8004170:	dd6b      	ble.n	800424a <_dtoa_r+0x8e2>
 8004172:	9b08      	ldr	r3, [sp, #32]
 8004174:	f1c0 001c 	rsb	r0, r0, #28
 8004178:	4403      	add	r3, r0
 800417a:	4480      	add	r8, r0
 800417c:	4406      	add	r6, r0
 800417e:	9308      	str	r3, [sp, #32]
 8004180:	f1b8 0f00 	cmp.w	r8, #0
 8004184:	dd05      	ble.n	8004192 <_dtoa_r+0x82a>
 8004186:	4649      	mov	r1, r9
 8004188:	4642      	mov	r2, r8
 800418a:	4658      	mov	r0, fp
 800418c:	f000 fcbe 	bl	8004b0c <__lshift>
 8004190:	4681      	mov	r9, r0
 8004192:	9b08      	ldr	r3, [sp, #32]
 8004194:	2b00      	cmp	r3, #0
 8004196:	dd05      	ble.n	80041a4 <_dtoa_r+0x83c>
 8004198:	4621      	mov	r1, r4
 800419a:	461a      	mov	r2, r3
 800419c:	4658      	mov	r0, fp
 800419e:	f000 fcb5 	bl	8004b0c <__lshift>
 80041a2:	4604      	mov	r4, r0
 80041a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d059      	beq.n	800425e <_dtoa_r+0x8f6>
 80041aa:	4621      	mov	r1, r4
 80041ac:	4648      	mov	r0, r9
 80041ae:	f000 fd19 	bl	8004be4 <__mcmp>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	da53      	bge.n	800425e <_dtoa_r+0x8f6>
 80041b6:	1e7b      	subs	r3, r7, #1
 80041b8:	9304      	str	r3, [sp, #16]
 80041ba:	4649      	mov	r1, r9
 80041bc:	2300      	movs	r3, #0
 80041be:	220a      	movs	r2, #10
 80041c0:	4658      	mov	r0, fp
 80041c2:	f000 faf7 	bl	80047b4 <__multadd>
 80041c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80041c8:	4681      	mov	r9, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8172 	beq.w	80044b4 <_dtoa_r+0xb4c>
 80041d0:	2300      	movs	r3, #0
 80041d2:	4629      	mov	r1, r5
 80041d4:	220a      	movs	r2, #10
 80041d6:	4658      	mov	r0, fp
 80041d8:	f000 faec 	bl	80047b4 <__multadd>
 80041dc:	9b00      	ldr	r3, [sp, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	4605      	mov	r5, r0
 80041e2:	dc67      	bgt.n	80042b4 <_dtoa_r+0x94c>
 80041e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	dc41      	bgt.n	800426e <_dtoa_r+0x906>
 80041ea:	e063      	b.n	80042b4 <_dtoa_r+0x94c>
 80041ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80041ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80041f2:	e746      	b.n	8004082 <_dtoa_r+0x71a>
 80041f4:	9b07      	ldr	r3, [sp, #28]
 80041f6:	1e5c      	subs	r4, r3, #1
 80041f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041fa:	42a3      	cmp	r3, r4
 80041fc:	bfbf      	itttt	lt
 80041fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004200:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004202:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004204:	1ae3      	sublt	r3, r4, r3
 8004206:	bfb4      	ite	lt
 8004208:	18d2      	addlt	r2, r2, r3
 800420a:	1b1c      	subge	r4, r3, r4
 800420c:	9b07      	ldr	r3, [sp, #28]
 800420e:	bfbc      	itt	lt
 8004210:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004212:	2400      	movlt	r4, #0
 8004214:	2b00      	cmp	r3, #0
 8004216:	bfb5      	itete	lt
 8004218:	eba8 0603 	sublt.w	r6, r8, r3
 800421c:	9b07      	ldrge	r3, [sp, #28]
 800421e:	2300      	movlt	r3, #0
 8004220:	4646      	movge	r6, r8
 8004222:	e730      	b.n	8004086 <_dtoa_r+0x71e>
 8004224:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004226:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004228:	4646      	mov	r6, r8
 800422a:	e735      	b.n	8004098 <_dtoa_r+0x730>
 800422c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800422e:	e75c      	b.n	80040ea <_dtoa_r+0x782>
 8004230:	2300      	movs	r3, #0
 8004232:	e788      	b.n	8004146 <_dtoa_r+0x7de>
 8004234:	3fe00000 	.word	0x3fe00000
 8004238:	40240000 	.word	0x40240000
 800423c:	40140000 	.word	0x40140000
 8004240:	9b02      	ldr	r3, [sp, #8]
 8004242:	e780      	b.n	8004146 <_dtoa_r+0x7de>
 8004244:	2300      	movs	r3, #0
 8004246:	930a      	str	r3, [sp, #40]	@ 0x28
 8004248:	e782      	b.n	8004150 <_dtoa_r+0x7e8>
 800424a:	d099      	beq.n	8004180 <_dtoa_r+0x818>
 800424c:	9a08      	ldr	r2, [sp, #32]
 800424e:	331c      	adds	r3, #28
 8004250:	441a      	add	r2, r3
 8004252:	4498      	add	r8, r3
 8004254:	441e      	add	r6, r3
 8004256:	9208      	str	r2, [sp, #32]
 8004258:	e792      	b.n	8004180 <_dtoa_r+0x818>
 800425a:	4603      	mov	r3, r0
 800425c:	e7f6      	b.n	800424c <_dtoa_r+0x8e4>
 800425e:	9b07      	ldr	r3, [sp, #28]
 8004260:	9704      	str	r7, [sp, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	dc20      	bgt.n	80042a8 <_dtoa_r+0x940>
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800426a:	2b02      	cmp	r3, #2
 800426c:	dd1e      	ble.n	80042ac <_dtoa_r+0x944>
 800426e:	9b00      	ldr	r3, [sp, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f47f aec0 	bne.w	8003ff6 <_dtoa_r+0x68e>
 8004276:	4621      	mov	r1, r4
 8004278:	2205      	movs	r2, #5
 800427a:	4658      	mov	r0, fp
 800427c:	f000 fa9a 	bl	80047b4 <__multadd>
 8004280:	4601      	mov	r1, r0
 8004282:	4604      	mov	r4, r0
 8004284:	4648      	mov	r0, r9
 8004286:	f000 fcad 	bl	8004be4 <__mcmp>
 800428a:	2800      	cmp	r0, #0
 800428c:	f77f aeb3 	ble.w	8003ff6 <_dtoa_r+0x68e>
 8004290:	4656      	mov	r6, sl
 8004292:	2331      	movs	r3, #49	@ 0x31
 8004294:	f806 3b01 	strb.w	r3, [r6], #1
 8004298:	9b04      	ldr	r3, [sp, #16]
 800429a:	3301      	adds	r3, #1
 800429c:	9304      	str	r3, [sp, #16]
 800429e:	e6ae      	b.n	8003ffe <_dtoa_r+0x696>
 80042a0:	9c07      	ldr	r4, [sp, #28]
 80042a2:	9704      	str	r7, [sp, #16]
 80042a4:	4625      	mov	r5, r4
 80042a6:	e7f3      	b.n	8004290 <_dtoa_r+0x928>
 80042a8:	9b07      	ldr	r3, [sp, #28]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8104 	beq.w	80044bc <_dtoa_r+0xb54>
 80042b4:	2e00      	cmp	r6, #0
 80042b6:	dd05      	ble.n	80042c4 <_dtoa_r+0x95c>
 80042b8:	4629      	mov	r1, r5
 80042ba:	4632      	mov	r2, r6
 80042bc:	4658      	mov	r0, fp
 80042be:	f000 fc25 	bl	8004b0c <__lshift>
 80042c2:	4605      	mov	r5, r0
 80042c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d05a      	beq.n	8004380 <_dtoa_r+0xa18>
 80042ca:	6869      	ldr	r1, [r5, #4]
 80042cc:	4658      	mov	r0, fp
 80042ce:	f000 fa0f 	bl	80046f0 <_Balloc>
 80042d2:	4606      	mov	r6, r0
 80042d4:	b928      	cbnz	r0, 80042e2 <_dtoa_r+0x97a>
 80042d6:	4b84      	ldr	r3, [pc, #528]	@ (80044e8 <_dtoa_r+0xb80>)
 80042d8:	4602      	mov	r2, r0
 80042da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80042de:	f7ff bb5a 	b.w	8003996 <_dtoa_r+0x2e>
 80042e2:	692a      	ldr	r2, [r5, #16]
 80042e4:	3202      	adds	r2, #2
 80042e6:	0092      	lsls	r2, r2, #2
 80042e8:	f105 010c 	add.w	r1, r5, #12
 80042ec:	300c      	adds	r0, #12
 80042ee:	f000 fe3d 	bl	8004f6c <memcpy>
 80042f2:	2201      	movs	r2, #1
 80042f4:	4631      	mov	r1, r6
 80042f6:	4658      	mov	r0, fp
 80042f8:	f000 fc08 	bl	8004b0c <__lshift>
 80042fc:	f10a 0301 	add.w	r3, sl, #1
 8004300:	9307      	str	r3, [sp, #28]
 8004302:	9b00      	ldr	r3, [sp, #0]
 8004304:	4453      	add	r3, sl
 8004306:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004308:	9b02      	ldr	r3, [sp, #8]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	462f      	mov	r7, r5
 8004310:	930a      	str	r3, [sp, #40]	@ 0x28
 8004312:	4605      	mov	r5, r0
 8004314:	9b07      	ldr	r3, [sp, #28]
 8004316:	4621      	mov	r1, r4
 8004318:	3b01      	subs	r3, #1
 800431a:	4648      	mov	r0, r9
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	f7ff fa98 	bl	8003852 <quorem>
 8004322:	4639      	mov	r1, r7
 8004324:	9002      	str	r0, [sp, #8]
 8004326:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800432a:	4648      	mov	r0, r9
 800432c:	f000 fc5a 	bl	8004be4 <__mcmp>
 8004330:	462a      	mov	r2, r5
 8004332:	9008      	str	r0, [sp, #32]
 8004334:	4621      	mov	r1, r4
 8004336:	4658      	mov	r0, fp
 8004338:	f000 fc70 	bl	8004c1c <__mdiff>
 800433c:	68c2      	ldr	r2, [r0, #12]
 800433e:	4606      	mov	r6, r0
 8004340:	bb02      	cbnz	r2, 8004384 <_dtoa_r+0xa1c>
 8004342:	4601      	mov	r1, r0
 8004344:	4648      	mov	r0, r9
 8004346:	f000 fc4d 	bl	8004be4 <__mcmp>
 800434a:	4602      	mov	r2, r0
 800434c:	4631      	mov	r1, r6
 800434e:	4658      	mov	r0, fp
 8004350:	920e      	str	r2, [sp, #56]	@ 0x38
 8004352:	f000 fa0d 	bl	8004770 <_Bfree>
 8004356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004358:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800435a:	9e07      	ldr	r6, [sp, #28]
 800435c:	ea43 0102 	orr.w	r1, r3, r2
 8004360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004362:	4319      	orrs	r1, r3
 8004364:	d110      	bne.n	8004388 <_dtoa_r+0xa20>
 8004366:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800436a:	d029      	beq.n	80043c0 <_dtoa_r+0xa58>
 800436c:	9b08      	ldr	r3, [sp, #32]
 800436e:	2b00      	cmp	r3, #0
 8004370:	dd02      	ble.n	8004378 <_dtoa_r+0xa10>
 8004372:	9b02      	ldr	r3, [sp, #8]
 8004374:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004378:	9b00      	ldr	r3, [sp, #0]
 800437a:	f883 8000 	strb.w	r8, [r3]
 800437e:	e63f      	b.n	8004000 <_dtoa_r+0x698>
 8004380:	4628      	mov	r0, r5
 8004382:	e7bb      	b.n	80042fc <_dtoa_r+0x994>
 8004384:	2201      	movs	r2, #1
 8004386:	e7e1      	b.n	800434c <_dtoa_r+0x9e4>
 8004388:	9b08      	ldr	r3, [sp, #32]
 800438a:	2b00      	cmp	r3, #0
 800438c:	db04      	blt.n	8004398 <_dtoa_r+0xa30>
 800438e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004390:	430b      	orrs	r3, r1
 8004392:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004394:	430b      	orrs	r3, r1
 8004396:	d120      	bne.n	80043da <_dtoa_r+0xa72>
 8004398:	2a00      	cmp	r2, #0
 800439a:	dded      	ble.n	8004378 <_dtoa_r+0xa10>
 800439c:	4649      	mov	r1, r9
 800439e:	2201      	movs	r2, #1
 80043a0:	4658      	mov	r0, fp
 80043a2:	f000 fbb3 	bl	8004b0c <__lshift>
 80043a6:	4621      	mov	r1, r4
 80043a8:	4681      	mov	r9, r0
 80043aa:	f000 fc1b 	bl	8004be4 <__mcmp>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	dc03      	bgt.n	80043ba <_dtoa_r+0xa52>
 80043b2:	d1e1      	bne.n	8004378 <_dtoa_r+0xa10>
 80043b4:	f018 0f01 	tst.w	r8, #1
 80043b8:	d0de      	beq.n	8004378 <_dtoa_r+0xa10>
 80043ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80043be:	d1d8      	bne.n	8004372 <_dtoa_r+0xa0a>
 80043c0:	9a00      	ldr	r2, [sp, #0]
 80043c2:	2339      	movs	r3, #57	@ 0x39
 80043c4:	7013      	strb	r3, [r2, #0]
 80043c6:	4633      	mov	r3, r6
 80043c8:	461e      	mov	r6, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80043d0:	2a39      	cmp	r2, #57	@ 0x39
 80043d2:	d052      	beq.n	800447a <_dtoa_r+0xb12>
 80043d4:	3201      	adds	r2, #1
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	e612      	b.n	8004000 <_dtoa_r+0x698>
 80043da:	2a00      	cmp	r2, #0
 80043dc:	dd07      	ble.n	80043ee <_dtoa_r+0xa86>
 80043de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80043e2:	d0ed      	beq.n	80043c0 <_dtoa_r+0xa58>
 80043e4:	9a00      	ldr	r2, [sp, #0]
 80043e6:	f108 0301 	add.w	r3, r8, #1
 80043ea:	7013      	strb	r3, [r2, #0]
 80043ec:	e608      	b.n	8004000 <_dtoa_r+0x698>
 80043ee:	9b07      	ldr	r3, [sp, #28]
 80043f0:	9a07      	ldr	r2, [sp, #28]
 80043f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80043f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d028      	beq.n	800444e <_dtoa_r+0xae6>
 80043fc:	4649      	mov	r1, r9
 80043fe:	2300      	movs	r3, #0
 8004400:	220a      	movs	r2, #10
 8004402:	4658      	mov	r0, fp
 8004404:	f000 f9d6 	bl	80047b4 <__multadd>
 8004408:	42af      	cmp	r7, r5
 800440a:	4681      	mov	r9, r0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	f04f 020a 	mov.w	r2, #10
 8004414:	4639      	mov	r1, r7
 8004416:	4658      	mov	r0, fp
 8004418:	d107      	bne.n	800442a <_dtoa_r+0xac2>
 800441a:	f000 f9cb 	bl	80047b4 <__multadd>
 800441e:	4607      	mov	r7, r0
 8004420:	4605      	mov	r5, r0
 8004422:	9b07      	ldr	r3, [sp, #28]
 8004424:	3301      	adds	r3, #1
 8004426:	9307      	str	r3, [sp, #28]
 8004428:	e774      	b.n	8004314 <_dtoa_r+0x9ac>
 800442a:	f000 f9c3 	bl	80047b4 <__multadd>
 800442e:	4629      	mov	r1, r5
 8004430:	4607      	mov	r7, r0
 8004432:	2300      	movs	r3, #0
 8004434:	220a      	movs	r2, #10
 8004436:	4658      	mov	r0, fp
 8004438:	f000 f9bc 	bl	80047b4 <__multadd>
 800443c:	4605      	mov	r5, r0
 800443e:	e7f0      	b.n	8004422 <_dtoa_r+0xaba>
 8004440:	9b00      	ldr	r3, [sp, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	bfcc      	ite	gt
 8004446:	461e      	movgt	r6, r3
 8004448:	2601      	movle	r6, #1
 800444a:	4456      	add	r6, sl
 800444c:	2700      	movs	r7, #0
 800444e:	4649      	mov	r1, r9
 8004450:	2201      	movs	r2, #1
 8004452:	4658      	mov	r0, fp
 8004454:	f000 fb5a 	bl	8004b0c <__lshift>
 8004458:	4621      	mov	r1, r4
 800445a:	4681      	mov	r9, r0
 800445c:	f000 fbc2 	bl	8004be4 <__mcmp>
 8004460:	2800      	cmp	r0, #0
 8004462:	dcb0      	bgt.n	80043c6 <_dtoa_r+0xa5e>
 8004464:	d102      	bne.n	800446c <_dtoa_r+0xb04>
 8004466:	f018 0f01 	tst.w	r8, #1
 800446a:	d1ac      	bne.n	80043c6 <_dtoa_r+0xa5e>
 800446c:	4633      	mov	r3, r6
 800446e:	461e      	mov	r6, r3
 8004470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004474:	2a30      	cmp	r2, #48	@ 0x30
 8004476:	d0fa      	beq.n	800446e <_dtoa_r+0xb06>
 8004478:	e5c2      	b.n	8004000 <_dtoa_r+0x698>
 800447a:	459a      	cmp	sl, r3
 800447c:	d1a4      	bne.n	80043c8 <_dtoa_r+0xa60>
 800447e:	9b04      	ldr	r3, [sp, #16]
 8004480:	3301      	adds	r3, #1
 8004482:	9304      	str	r3, [sp, #16]
 8004484:	2331      	movs	r3, #49	@ 0x31
 8004486:	f88a 3000 	strb.w	r3, [sl]
 800448a:	e5b9      	b.n	8004000 <_dtoa_r+0x698>
 800448c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800448e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80044ec <_dtoa_r+0xb84>
 8004492:	b11b      	cbz	r3, 800449c <_dtoa_r+0xb34>
 8004494:	f10a 0308 	add.w	r3, sl, #8
 8004498:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	4650      	mov	r0, sl
 800449e:	b019      	add	sp, #100	@ 0x64
 80044a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	f77f ae37 	ble.w	800411a <_dtoa_r+0x7b2>
 80044ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80044b0:	2001      	movs	r0, #1
 80044b2:	e655      	b.n	8004160 <_dtoa_r+0x7f8>
 80044b4:	9b00      	ldr	r3, [sp, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f77f aed6 	ble.w	8004268 <_dtoa_r+0x900>
 80044bc:	4656      	mov	r6, sl
 80044be:	4621      	mov	r1, r4
 80044c0:	4648      	mov	r0, r9
 80044c2:	f7ff f9c6 	bl	8003852 <quorem>
 80044c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80044ca:	f806 8b01 	strb.w	r8, [r6], #1
 80044ce:	9b00      	ldr	r3, [sp, #0]
 80044d0:	eba6 020a 	sub.w	r2, r6, sl
 80044d4:	4293      	cmp	r3, r2
 80044d6:	ddb3      	ble.n	8004440 <_dtoa_r+0xad8>
 80044d8:	4649      	mov	r1, r9
 80044da:	2300      	movs	r3, #0
 80044dc:	220a      	movs	r2, #10
 80044de:	4658      	mov	r0, fp
 80044e0:	f000 f968 	bl	80047b4 <__multadd>
 80044e4:	4681      	mov	r9, r0
 80044e6:	e7ea      	b.n	80044be <_dtoa_r+0xb56>
 80044e8:	08005678 	.word	0x08005678
 80044ec:	080055fc 	.word	0x080055fc

080044f0 <_free_r>:
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	4605      	mov	r5, r0
 80044f4:	2900      	cmp	r1, #0
 80044f6:	d041      	beq.n	800457c <_free_r+0x8c>
 80044f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044fc:	1f0c      	subs	r4, r1, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	bfb8      	it	lt
 8004502:	18e4      	addlt	r4, r4, r3
 8004504:	f000 f8e8 	bl	80046d8 <__malloc_lock>
 8004508:	4a1d      	ldr	r2, [pc, #116]	@ (8004580 <_free_r+0x90>)
 800450a:	6813      	ldr	r3, [r2, #0]
 800450c:	b933      	cbnz	r3, 800451c <_free_r+0x2c>
 800450e:	6063      	str	r3, [r4, #4]
 8004510:	6014      	str	r4, [r2, #0]
 8004512:	4628      	mov	r0, r5
 8004514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004518:	f000 b8e4 	b.w	80046e4 <__malloc_unlock>
 800451c:	42a3      	cmp	r3, r4
 800451e:	d908      	bls.n	8004532 <_free_r+0x42>
 8004520:	6820      	ldr	r0, [r4, #0]
 8004522:	1821      	adds	r1, r4, r0
 8004524:	428b      	cmp	r3, r1
 8004526:	bf01      	itttt	eq
 8004528:	6819      	ldreq	r1, [r3, #0]
 800452a:	685b      	ldreq	r3, [r3, #4]
 800452c:	1809      	addeq	r1, r1, r0
 800452e:	6021      	streq	r1, [r4, #0]
 8004530:	e7ed      	b.n	800450e <_free_r+0x1e>
 8004532:	461a      	mov	r2, r3
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	b10b      	cbz	r3, 800453c <_free_r+0x4c>
 8004538:	42a3      	cmp	r3, r4
 800453a:	d9fa      	bls.n	8004532 <_free_r+0x42>
 800453c:	6811      	ldr	r1, [r2, #0]
 800453e:	1850      	adds	r0, r2, r1
 8004540:	42a0      	cmp	r0, r4
 8004542:	d10b      	bne.n	800455c <_free_r+0x6c>
 8004544:	6820      	ldr	r0, [r4, #0]
 8004546:	4401      	add	r1, r0
 8004548:	1850      	adds	r0, r2, r1
 800454a:	4283      	cmp	r3, r0
 800454c:	6011      	str	r1, [r2, #0]
 800454e:	d1e0      	bne.n	8004512 <_free_r+0x22>
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	6053      	str	r3, [r2, #4]
 8004556:	4408      	add	r0, r1
 8004558:	6010      	str	r0, [r2, #0]
 800455a:	e7da      	b.n	8004512 <_free_r+0x22>
 800455c:	d902      	bls.n	8004564 <_free_r+0x74>
 800455e:	230c      	movs	r3, #12
 8004560:	602b      	str	r3, [r5, #0]
 8004562:	e7d6      	b.n	8004512 <_free_r+0x22>
 8004564:	6820      	ldr	r0, [r4, #0]
 8004566:	1821      	adds	r1, r4, r0
 8004568:	428b      	cmp	r3, r1
 800456a:	bf04      	itt	eq
 800456c:	6819      	ldreq	r1, [r3, #0]
 800456e:	685b      	ldreq	r3, [r3, #4]
 8004570:	6063      	str	r3, [r4, #4]
 8004572:	bf04      	itt	eq
 8004574:	1809      	addeq	r1, r1, r0
 8004576:	6021      	streq	r1, [r4, #0]
 8004578:	6054      	str	r4, [r2, #4]
 800457a:	e7ca      	b.n	8004512 <_free_r+0x22>
 800457c:	bd38      	pop	{r3, r4, r5, pc}
 800457e:	bf00      	nop
 8004580:	200003d0 	.word	0x200003d0

08004584 <malloc>:
 8004584:	4b02      	ldr	r3, [pc, #8]	@ (8004590 <malloc+0xc>)
 8004586:	4601      	mov	r1, r0
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	f000 b825 	b.w	80045d8 <_malloc_r>
 800458e:	bf00      	nop
 8004590:	20000028 	.word	0x20000028

08004594 <sbrk_aligned>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	4e0f      	ldr	r6, [pc, #60]	@ (80045d4 <sbrk_aligned+0x40>)
 8004598:	460c      	mov	r4, r1
 800459a:	6831      	ldr	r1, [r6, #0]
 800459c:	4605      	mov	r5, r0
 800459e:	b911      	cbnz	r1, 80045a6 <sbrk_aligned+0x12>
 80045a0:	f000 fcd4 	bl	8004f4c <_sbrk_r>
 80045a4:	6030      	str	r0, [r6, #0]
 80045a6:	4621      	mov	r1, r4
 80045a8:	4628      	mov	r0, r5
 80045aa:	f000 fccf 	bl	8004f4c <_sbrk_r>
 80045ae:	1c43      	adds	r3, r0, #1
 80045b0:	d103      	bne.n	80045ba <sbrk_aligned+0x26>
 80045b2:	f04f 34ff 	mov.w	r4, #4294967295
 80045b6:	4620      	mov	r0, r4
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
 80045ba:	1cc4      	adds	r4, r0, #3
 80045bc:	f024 0403 	bic.w	r4, r4, #3
 80045c0:	42a0      	cmp	r0, r4
 80045c2:	d0f8      	beq.n	80045b6 <sbrk_aligned+0x22>
 80045c4:	1a21      	subs	r1, r4, r0
 80045c6:	4628      	mov	r0, r5
 80045c8:	f000 fcc0 	bl	8004f4c <_sbrk_r>
 80045cc:	3001      	adds	r0, #1
 80045ce:	d1f2      	bne.n	80045b6 <sbrk_aligned+0x22>
 80045d0:	e7ef      	b.n	80045b2 <sbrk_aligned+0x1e>
 80045d2:	bf00      	nop
 80045d4:	200003cc 	.word	0x200003cc

080045d8 <_malloc_r>:
 80045d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045dc:	1ccd      	adds	r5, r1, #3
 80045de:	f025 0503 	bic.w	r5, r5, #3
 80045e2:	3508      	adds	r5, #8
 80045e4:	2d0c      	cmp	r5, #12
 80045e6:	bf38      	it	cc
 80045e8:	250c      	movcc	r5, #12
 80045ea:	2d00      	cmp	r5, #0
 80045ec:	4606      	mov	r6, r0
 80045ee:	db01      	blt.n	80045f4 <_malloc_r+0x1c>
 80045f0:	42a9      	cmp	r1, r5
 80045f2:	d904      	bls.n	80045fe <_malloc_r+0x26>
 80045f4:	230c      	movs	r3, #12
 80045f6:	6033      	str	r3, [r6, #0]
 80045f8:	2000      	movs	r0, #0
 80045fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046d4 <_malloc_r+0xfc>
 8004602:	f000 f869 	bl	80046d8 <__malloc_lock>
 8004606:	f8d8 3000 	ldr.w	r3, [r8]
 800460a:	461c      	mov	r4, r3
 800460c:	bb44      	cbnz	r4, 8004660 <_malloc_r+0x88>
 800460e:	4629      	mov	r1, r5
 8004610:	4630      	mov	r0, r6
 8004612:	f7ff ffbf 	bl	8004594 <sbrk_aligned>
 8004616:	1c43      	adds	r3, r0, #1
 8004618:	4604      	mov	r4, r0
 800461a:	d158      	bne.n	80046ce <_malloc_r+0xf6>
 800461c:	f8d8 4000 	ldr.w	r4, [r8]
 8004620:	4627      	mov	r7, r4
 8004622:	2f00      	cmp	r7, #0
 8004624:	d143      	bne.n	80046ae <_malloc_r+0xd6>
 8004626:	2c00      	cmp	r4, #0
 8004628:	d04b      	beq.n	80046c2 <_malloc_r+0xea>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	4639      	mov	r1, r7
 800462e:	4630      	mov	r0, r6
 8004630:	eb04 0903 	add.w	r9, r4, r3
 8004634:	f000 fc8a 	bl	8004f4c <_sbrk_r>
 8004638:	4581      	cmp	r9, r0
 800463a:	d142      	bne.n	80046c2 <_malloc_r+0xea>
 800463c:	6821      	ldr	r1, [r4, #0]
 800463e:	1a6d      	subs	r5, r5, r1
 8004640:	4629      	mov	r1, r5
 8004642:	4630      	mov	r0, r6
 8004644:	f7ff ffa6 	bl	8004594 <sbrk_aligned>
 8004648:	3001      	adds	r0, #1
 800464a:	d03a      	beq.n	80046c2 <_malloc_r+0xea>
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	442b      	add	r3, r5
 8004650:	6023      	str	r3, [r4, #0]
 8004652:	f8d8 3000 	ldr.w	r3, [r8]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	bb62      	cbnz	r2, 80046b4 <_malloc_r+0xdc>
 800465a:	f8c8 7000 	str.w	r7, [r8]
 800465e:	e00f      	b.n	8004680 <_malloc_r+0xa8>
 8004660:	6822      	ldr	r2, [r4, #0]
 8004662:	1b52      	subs	r2, r2, r5
 8004664:	d420      	bmi.n	80046a8 <_malloc_r+0xd0>
 8004666:	2a0b      	cmp	r2, #11
 8004668:	d917      	bls.n	800469a <_malloc_r+0xc2>
 800466a:	1961      	adds	r1, r4, r5
 800466c:	42a3      	cmp	r3, r4
 800466e:	6025      	str	r5, [r4, #0]
 8004670:	bf18      	it	ne
 8004672:	6059      	strne	r1, [r3, #4]
 8004674:	6863      	ldr	r3, [r4, #4]
 8004676:	bf08      	it	eq
 8004678:	f8c8 1000 	streq.w	r1, [r8]
 800467c:	5162      	str	r2, [r4, r5]
 800467e:	604b      	str	r3, [r1, #4]
 8004680:	4630      	mov	r0, r6
 8004682:	f000 f82f 	bl	80046e4 <__malloc_unlock>
 8004686:	f104 000b 	add.w	r0, r4, #11
 800468a:	1d23      	adds	r3, r4, #4
 800468c:	f020 0007 	bic.w	r0, r0, #7
 8004690:	1ac2      	subs	r2, r0, r3
 8004692:	bf1c      	itt	ne
 8004694:	1a1b      	subne	r3, r3, r0
 8004696:	50a3      	strne	r3, [r4, r2]
 8004698:	e7af      	b.n	80045fa <_malloc_r+0x22>
 800469a:	6862      	ldr	r2, [r4, #4]
 800469c:	42a3      	cmp	r3, r4
 800469e:	bf0c      	ite	eq
 80046a0:	f8c8 2000 	streq.w	r2, [r8]
 80046a4:	605a      	strne	r2, [r3, #4]
 80046a6:	e7eb      	b.n	8004680 <_malloc_r+0xa8>
 80046a8:	4623      	mov	r3, r4
 80046aa:	6864      	ldr	r4, [r4, #4]
 80046ac:	e7ae      	b.n	800460c <_malloc_r+0x34>
 80046ae:	463c      	mov	r4, r7
 80046b0:	687f      	ldr	r7, [r7, #4]
 80046b2:	e7b6      	b.n	8004622 <_malloc_r+0x4a>
 80046b4:	461a      	mov	r2, r3
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	42a3      	cmp	r3, r4
 80046ba:	d1fb      	bne.n	80046b4 <_malloc_r+0xdc>
 80046bc:	2300      	movs	r3, #0
 80046be:	6053      	str	r3, [r2, #4]
 80046c0:	e7de      	b.n	8004680 <_malloc_r+0xa8>
 80046c2:	230c      	movs	r3, #12
 80046c4:	6033      	str	r3, [r6, #0]
 80046c6:	4630      	mov	r0, r6
 80046c8:	f000 f80c 	bl	80046e4 <__malloc_unlock>
 80046cc:	e794      	b.n	80045f8 <_malloc_r+0x20>
 80046ce:	6005      	str	r5, [r0, #0]
 80046d0:	e7d6      	b.n	8004680 <_malloc_r+0xa8>
 80046d2:	bf00      	nop
 80046d4:	200003d0 	.word	0x200003d0

080046d8 <__malloc_lock>:
 80046d8:	4801      	ldr	r0, [pc, #4]	@ (80046e0 <__malloc_lock+0x8>)
 80046da:	f7ff b8b8 	b.w	800384e <__retarget_lock_acquire_recursive>
 80046de:	bf00      	nop
 80046e0:	200003c8 	.word	0x200003c8

080046e4 <__malloc_unlock>:
 80046e4:	4801      	ldr	r0, [pc, #4]	@ (80046ec <__malloc_unlock+0x8>)
 80046e6:	f7ff b8b3 	b.w	8003850 <__retarget_lock_release_recursive>
 80046ea:	bf00      	nop
 80046ec:	200003c8 	.word	0x200003c8

080046f0 <_Balloc>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	69c6      	ldr	r6, [r0, #28]
 80046f4:	4604      	mov	r4, r0
 80046f6:	460d      	mov	r5, r1
 80046f8:	b976      	cbnz	r6, 8004718 <_Balloc+0x28>
 80046fa:	2010      	movs	r0, #16
 80046fc:	f7ff ff42 	bl	8004584 <malloc>
 8004700:	4602      	mov	r2, r0
 8004702:	61e0      	str	r0, [r4, #28]
 8004704:	b920      	cbnz	r0, 8004710 <_Balloc+0x20>
 8004706:	4b18      	ldr	r3, [pc, #96]	@ (8004768 <_Balloc+0x78>)
 8004708:	4818      	ldr	r0, [pc, #96]	@ (800476c <_Balloc+0x7c>)
 800470a:	216b      	movs	r1, #107	@ 0x6b
 800470c:	f000 fc3c 	bl	8004f88 <__assert_func>
 8004710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004714:	6006      	str	r6, [r0, #0]
 8004716:	60c6      	str	r6, [r0, #12]
 8004718:	69e6      	ldr	r6, [r4, #28]
 800471a:	68f3      	ldr	r3, [r6, #12]
 800471c:	b183      	cbz	r3, 8004740 <_Balloc+0x50>
 800471e:	69e3      	ldr	r3, [r4, #28]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004726:	b9b8      	cbnz	r0, 8004758 <_Balloc+0x68>
 8004728:	2101      	movs	r1, #1
 800472a:	fa01 f605 	lsl.w	r6, r1, r5
 800472e:	1d72      	adds	r2, r6, #5
 8004730:	0092      	lsls	r2, r2, #2
 8004732:	4620      	mov	r0, r4
 8004734:	f000 fc46 	bl	8004fc4 <_calloc_r>
 8004738:	b160      	cbz	r0, 8004754 <_Balloc+0x64>
 800473a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800473e:	e00e      	b.n	800475e <_Balloc+0x6e>
 8004740:	2221      	movs	r2, #33	@ 0x21
 8004742:	2104      	movs	r1, #4
 8004744:	4620      	mov	r0, r4
 8004746:	f000 fc3d 	bl	8004fc4 <_calloc_r>
 800474a:	69e3      	ldr	r3, [r4, #28]
 800474c:	60f0      	str	r0, [r6, #12]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e4      	bne.n	800471e <_Balloc+0x2e>
 8004754:	2000      	movs	r0, #0
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	6802      	ldr	r2, [r0, #0]
 800475a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800475e:	2300      	movs	r3, #0
 8004760:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004764:	e7f7      	b.n	8004756 <_Balloc+0x66>
 8004766:	bf00      	nop
 8004768:	08005609 	.word	0x08005609
 800476c:	08005689 	.word	0x08005689

08004770 <_Bfree>:
 8004770:	b570      	push	{r4, r5, r6, lr}
 8004772:	69c6      	ldr	r6, [r0, #28]
 8004774:	4605      	mov	r5, r0
 8004776:	460c      	mov	r4, r1
 8004778:	b976      	cbnz	r6, 8004798 <_Bfree+0x28>
 800477a:	2010      	movs	r0, #16
 800477c:	f7ff ff02 	bl	8004584 <malloc>
 8004780:	4602      	mov	r2, r0
 8004782:	61e8      	str	r0, [r5, #28]
 8004784:	b920      	cbnz	r0, 8004790 <_Bfree+0x20>
 8004786:	4b09      	ldr	r3, [pc, #36]	@ (80047ac <_Bfree+0x3c>)
 8004788:	4809      	ldr	r0, [pc, #36]	@ (80047b0 <_Bfree+0x40>)
 800478a:	218f      	movs	r1, #143	@ 0x8f
 800478c:	f000 fbfc 	bl	8004f88 <__assert_func>
 8004790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004794:	6006      	str	r6, [r0, #0]
 8004796:	60c6      	str	r6, [r0, #12]
 8004798:	b13c      	cbz	r4, 80047aa <_Bfree+0x3a>
 800479a:	69eb      	ldr	r3, [r5, #28]
 800479c:	6862      	ldr	r2, [r4, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047a4:	6021      	str	r1, [r4, #0]
 80047a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80047aa:	bd70      	pop	{r4, r5, r6, pc}
 80047ac:	08005609 	.word	0x08005609
 80047b0:	08005689 	.word	0x08005689

080047b4 <__multadd>:
 80047b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b8:	690d      	ldr	r5, [r1, #16]
 80047ba:	4607      	mov	r7, r0
 80047bc:	460c      	mov	r4, r1
 80047be:	461e      	mov	r6, r3
 80047c0:	f101 0c14 	add.w	ip, r1, #20
 80047c4:	2000      	movs	r0, #0
 80047c6:	f8dc 3000 	ldr.w	r3, [ip]
 80047ca:	b299      	uxth	r1, r3
 80047cc:	fb02 6101 	mla	r1, r2, r1, r6
 80047d0:	0c1e      	lsrs	r6, r3, #16
 80047d2:	0c0b      	lsrs	r3, r1, #16
 80047d4:	fb02 3306 	mla	r3, r2, r6, r3
 80047d8:	b289      	uxth	r1, r1
 80047da:	3001      	adds	r0, #1
 80047dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80047e0:	4285      	cmp	r5, r0
 80047e2:	f84c 1b04 	str.w	r1, [ip], #4
 80047e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80047ea:	dcec      	bgt.n	80047c6 <__multadd+0x12>
 80047ec:	b30e      	cbz	r6, 8004832 <__multadd+0x7e>
 80047ee:	68a3      	ldr	r3, [r4, #8]
 80047f0:	42ab      	cmp	r3, r5
 80047f2:	dc19      	bgt.n	8004828 <__multadd+0x74>
 80047f4:	6861      	ldr	r1, [r4, #4]
 80047f6:	4638      	mov	r0, r7
 80047f8:	3101      	adds	r1, #1
 80047fa:	f7ff ff79 	bl	80046f0 <_Balloc>
 80047fe:	4680      	mov	r8, r0
 8004800:	b928      	cbnz	r0, 800480e <__multadd+0x5a>
 8004802:	4602      	mov	r2, r0
 8004804:	4b0c      	ldr	r3, [pc, #48]	@ (8004838 <__multadd+0x84>)
 8004806:	480d      	ldr	r0, [pc, #52]	@ (800483c <__multadd+0x88>)
 8004808:	21ba      	movs	r1, #186	@ 0xba
 800480a:	f000 fbbd 	bl	8004f88 <__assert_func>
 800480e:	6922      	ldr	r2, [r4, #16]
 8004810:	3202      	adds	r2, #2
 8004812:	f104 010c 	add.w	r1, r4, #12
 8004816:	0092      	lsls	r2, r2, #2
 8004818:	300c      	adds	r0, #12
 800481a:	f000 fba7 	bl	8004f6c <memcpy>
 800481e:	4621      	mov	r1, r4
 8004820:	4638      	mov	r0, r7
 8004822:	f7ff ffa5 	bl	8004770 <_Bfree>
 8004826:	4644      	mov	r4, r8
 8004828:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800482c:	3501      	adds	r5, #1
 800482e:	615e      	str	r6, [r3, #20]
 8004830:	6125      	str	r5, [r4, #16]
 8004832:	4620      	mov	r0, r4
 8004834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004838:	08005678 	.word	0x08005678
 800483c:	08005689 	.word	0x08005689

08004840 <__hi0bits>:
 8004840:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004844:	4603      	mov	r3, r0
 8004846:	bf36      	itet	cc
 8004848:	0403      	lslcc	r3, r0, #16
 800484a:	2000      	movcs	r0, #0
 800484c:	2010      	movcc	r0, #16
 800484e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004852:	bf3c      	itt	cc
 8004854:	021b      	lslcc	r3, r3, #8
 8004856:	3008      	addcc	r0, #8
 8004858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800485c:	bf3c      	itt	cc
 800485e:	011b      	lslcc	r3, r3, #4
 8004860:	3004      	addcc	r0, #4
 8004862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004866:	bf3c      	itt	cc
 8004868:	009b      	lslcc	r3, r3, #2
 800486a:	3002      	addcc	r0, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	db05      	blt.n	800487c <__hi0bits+0x3c>
 8004870:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004874:	f100 0001 	add.w	r0, r0, #1
 8004878:	bf08      	it	eq
 800487a:	2020      	moveq	r0, #32
 800487c:	4770      	bx	lr

0800487e <__lo0bits>:
 800487e:	6803      	ldr	r3, [r0, #0]
 8004880:	4602      	mov	r2, r0
 8004882:	f013 0007 	ands.w	r0, r3, #7
 8004886:	d00b      	beq.n	80048a0 <__lo0bits+0x22>
 8004888:	07d9      	lsls	r1, r3, #31
 800488a:	d421      	bmi.n	80048d0 <__lo0bits+0x52>
 800488c:	0798      	lsls	r0, r3, #30
 800488e:	bf49      	itett	mi
 8004890:	085b      	lsrmi	r3, r3, #1
 8004892:	089b      	lsrpl	r3, r3, #2
 8004894:	2001      	movmi	r0, #1
 8004896:	6013      	strmi	r3, [r2, #0]
 8004898:	bf5c      	itt	pl
 800489a:	6013      	strpl	r3, [r2, #0]
 800489c:	2002      	movpl	r0, #2
 800489e:	4770      	bx	lr
 80048a0:	b299      	uxth	r1, r3
 80048a2:	b909      	cbnz	r1, 80048a8 <__lo0bits+0x2a>
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	2010      	movs	r0, #16
 80048a8:	b2d9      	uxtb	r1, r3
 80048aa:	b909      	cbnz	r1, 80048b0 <__lo0bits+0x32>
 80048ac:	3008      	adds	r0, #8
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	0719      	lsls	r1, r3, #28
 80048b2:	bf04      	itt	eq
 80048b4:	091b      	lsreq	r3, r3, #4
 80048b6:	3004      	addeq	r0, #4
 80048b8:	0799      	lsls	r1, r3, #30
 80048ba:	bf04      	itt	eq
 80048bc:	089b      	lsreq	r3, r3, #2
 80048be:	3002      	addeq	r0, #2
 80048c0:	07d9      	lsls	r1, r3, #31
 80048c2:	d403      	bmi.n	80048cc <__lo0bits+0x4e>
 80048c4:	085b      	lsrs	r3, r3, #1
 80048c6:	f100 0001 	add.w	r0, r0, #1
 80048ca:	d003      	beq.n	80048d4 <__lo0bits+0x56>
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	4770      	bx	lr
 80048d0:	2000      	movs	r0, #0
 80048d2:	4770      	bx	lr
 80048d4:	2020      	movs	r0, #32
 80048d6:	4770      	bx	lr

080048d8 <__i2b>:
 80048d8:	b510      	push	{r4, lr}
 80048da:	460c      	mov	r4, r1
 80048dc:	2101      	movs	r1, #1
 80048de:	f7ff ff07 	bl	80046f0 <_Balloc>
 80048e2:	4602      	mov	r2, r0
 80048e4:	b928      	cbnz	r0, 80048f2 <__i2b+0x1a>
 80048e6:	4b05      	ldr	r3, [pc, #20]	@ (80048fc <__i2b+0x24>)
 80048e8:	4805      	ldr	r0, [pc, #20]	@ (8004900 <__i2b+0x28>)
 80048ea:	f240 1145 	movw	r1, #325	@ 0x145
 80048ee:	f000 fb4b 	bl	8004f88 <__assert_func>
 80048f2:	2301      	movs	r3, #1
 80048f4:	6144      	str	r4, [r0, #20]
 80048f6:	6103      	str	r3, [r0, #16]
 80048f8:	bd10      	pop	{r4, pc}
 80048fa:	bf00      	nop
 80048fc:	08005678 	.word	0x08005678
 8004900:	08005689 	.word	0x08005689

08004904 <__multiply>:
 8004904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004908:	4614      	mov	r4, r2
 800490a:	690a      	ldr	r2, [r1, #16]
 800490c:	6923      	ldr	r3, [r4, #16]
 800490e:	429a      	cmp	r2, r3
 8004910:	bfa8      	it	ge
 8004912:	4623      	movge	r3, r4
 8004914:	460f      	mov	r7, r1
 8004916:	bfa4      	itt	ge
 8004918:	460c      	movge	r4, r1
 800491a:	461f      	movge	r7, r3
 800491c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004920:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004924:	68a3      	ldr	r3, [r4, #8]
 8004926:	6861      	ldr	r1, [r4, #4]
 8004928:	eb0a 0609 	add.w	r6, sl, r9
 800492c:	42b3      	cmp	r3, r6
 800492e:	b085      	sub	sp, #20
 8004930:	bfb8      	it	lt
 8004932:	3101      	addlt	r1, #1
 8004934:	f7ff fedc 	bl	80046f0 <_Balloc>
 8004938:	b930      	cbnz	r0, 8004948 <__multiply+0x44>
 800493a:	4602      	mov	r2, r0
 800493c:	4b44      	ldr	r3, [pc, #272]	@ (8004a50 <__multiply+0x14c>)
 800493e:	4845      	ldr	r0, [pc, #276]	@ (8004a54 <__multiply+0x150>)
 8004940:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004944:	f000 fb20 	bl	8004f88 <__assert_func>
 8004948:	f100 0514 	add.w	r5, r0, #20
 800494c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004950:	462b      	mov	r3, r5
 8004952:	2200      	movs	r2, #0
 8004954:	4543      	cmp	r3, r8
 8004956:	d321      	bcc.n	800499c <__multiply+0x98>
 8004958:	f107 0114 	add.w	r1, r7, #20
 800495c:	f104 0214 	add.w	r2, r4, #20
 8004960:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004964:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004968:	9302      	str	r3, [sp, #8]
 800496a:	1b13      	subs	r3, r2, r4
 800496c:	3b15      	subs	r3, #21
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	3304      	adds	r3, #4
 8004974:	f104 0715 	add.w	r7, r4, #21
 8004978:	42ba      	cmp	r2, r7
 800497a:	bf38      	it	cc
 800497c:	2304      	movcc	r3, #4
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	9b02      	ldr	r3, [sp, #8]
 8004982:	9103      	str	r1, [sp, #12]
 8004984:	428b      	cmp	r3, r1
 8004986:	d80c      	bhi.n	80049a2 <__multiply+0x9e>
 8004988:	2e00      	cmp	r6, #0
 800498a:	dd03      	ble.n	8004994 <__multiply+0x90>
 800498c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004990:	2b00      	cmp	r3, #0
 8004992:	d05b      	beq.n	8004a4c <__multiply+0x148>
 8004994:	6106      	str	r6, [r0, #16]
 8004996:	b005      	add	sp, #20
 8004998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800499c:	f843 2b04 	str.w	r2, [r3], #4
 80049a0:	e7d8      	b.n	8004954 <__multiply+0x50>
 80049a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80049a6:	f1ba 0f00 	cmp.w	sl, #0
 80049aa:	d024      	beq.n	80049f6 <__multiply+0xf2>
 80049ac:	f104 0e14 	add.w	lr, r4, #20
 80049b0:	46a9      	mov	r9, r5
 80049b2:	f04f 0c00 	mov.w	ip, #0
 80049b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80049ba:	f8d9 3000 	ldr.w	r3, [r9]
 80049be:	fa1f fb87 	uxth.w	fp, r7
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80049c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80049cc:	f8d9 7000 	ldr.w	r7, [r9]
 80049d0:	4463      	add	r3, ip
 80049d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80049d6:	fb0a c70b 	mla	r7, sl, fp, ip
 80049da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80049de:	b29b      	uxth	r3, r3
 80049e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80049e4:	4572      	cmp	r2, lr
 80049e6:	f849 3b04 	str.w	r3, [r9], #4
 80049ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80049ee:	d8e2      	bhi.n	80049b6 <__multiply+0xb2>
 80049f0:	9b01      	ldr	r3, [sp, #4]
 80049f2:	f845 c003 	str.w	ip, [r5, r3]
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80049fc:	3104      	adds	r1, #4
 80049fe:	f1b9 0f00 	cmp.w	r9, #0
 8004a02:	d021      	beq.n	8004a48 <__multiply+0x144>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	f104 0c14 	add.w	ip, r4, #20
 8004a0a:	46ae      	mov	lr, r5
 8004a0c:	f04f 0a00 	mov.w	sl, #0
 8004a10:	f8bc b000 	ldrh.w	fp, [ip]
 8004a14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004a18:	fb09 770b 	mla	r7, r9, fp, r7
 8004a1c:	4457      	add	r7, sl
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004a24:	f84e 3b04 	str.w	r3, [lr], #4
 8004a28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a30:	f8be 3000 	ldrh.w	r3, [lr]
 8004a34:	fb09 330a 	mla	r3, r9, sl, r3
 8004a38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004a3c:	4562      	cmp	r2, ip
 8004a3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a42:	d8e5      	bhi.n	8004a10 <__multiply+0x10c>
 8004a44:	9f01      	ldr	r7, [sp, #4]
 8004a46:	51eb      	str	r3, [r5, r7]
 8004a48:	3504      	adds	r5, #4
 8004a4a:	e799      	b.n	8004980 <__multiply+0x7c>
 8004a4c:	3e01      	subs	r6, #1
 8004a4e:	e79b      	b.n	8004988 <__multiply+0x84>
 8004a50:	08005678 	.word	0x08005678
 8004a54:	08005689 	.word	0x08005689

08004a58 <__pow5mult>:
 8004a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a5c:	4615      	mov	r5, r2
 8004a5e:	f012 0203 	ands.w	r2, r2, #3
 8004a62:	4607      	mov	r7, r0
 8004a64:	460e      	mov	r6, r1
 8004a66:	d007      	beq.n	8004a78 <__pow5mult+0x20>
 8004a68:	4c25      	ldr	r4, [pc, #148]	@ (8004b00 <__pow5mult+0xa8>)
 8004a6a:	3a01      	subs	r2, #1
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a72:	f7ff fe9f 	bl	80047b4 <__multadd>
 8004a76:	4606      	mov	r6, r0
 8004a78:	10ad      	asrs	r5, r5, #2
 8004a7a:	d03d      	beq.n	8004af8 <__pow5mult+0xa0>
 8004a7c:	69fc      	ldr	r4, [r7, #28]
 8004a7e:	b97c      	cbnz	r4, 8004aa0 <__pow5mult+0x48>
 8004a80:	2010      	movs	r0, #16
 8004a82:	f7ff fd7f 	bl	8004584 <malloc>
 8004a86:	4602      	mov	r2, r0
 8004a88:	61f8      	str	r0, [r7, #28]
 8004a8a:	b928      	cbnz	r0, 8004a98 <__pow5mult+0x40>
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b04 <__pow5mult+0xac>)
 8004a8e:	481e      	ldr	r0, [pc, #120]	@ (8004b08 <__pow5mult+0xb0>)
 8004a90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004a94:	f000 fa78 	bl	8004f88 <__assert_func>
 8004a98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a9c:	6004      	str	r4, [r0, #0]
 8004a9e:	60c4      	str	r4, [r0, #12]
 8004aa0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004aa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004aa8:	b94c      	cbnz	r4, 8004abe <__pow5mult+0x66>
 8004aaa:	f240 2171 	movw	r1, #625	@ 0x271
 8004aae:	4638      	mov	r0, r7
 8004ab0:	f7ff ff12 	bl	80048d8 <__i2b>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f8c8 0008 	str.w	r0, [r8, #8]
 8004aba:	4604      	mov	r4, r0
 8004abc:	6003      	str	r3, [r0, #0]
 8004abe:	f04f 0900 	mov.w	r9, #0
 8004ac2:	07eb      	lsls	r3, r5, #31
 8004ac4:	d50a      	bpl.n	8004adc <__pow5mult+0x84>
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4622      	mov	r2, r4
 8004aca:	4638      	mov	r0, r7
 8004acc:	f7ff ff1a 	bl	8004904 <__multiply>
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	4680      	mov	r8, r0
 8004ad4:	4638      	mov	r0, r7
 8004ad6:	f7ff fe4b 	bl	8004770 <_Bfree>
 8004ada:	4646      	mov	r6, r8
 8004adc:	106d      	asrs	r5, r5, #1
 8004ade:	d00b      	beq.n	8004af8 <__pow5mult+0xa0>
 8004ae0:	6820      	ldr	r0, [r4, #0]
 8004ae2:	b938      	cbnz	r0, 8004af4 <__pow5mult+0x9c>
 8004ae4:	4622      	mov	r2, r4
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	4638      	mov	r0, r7
 8004aea:	f7ff ff0b 	bl	8004904 <__multiply>
 8004aee:	6020      	str	r0, [r4, #0]
 8004af0:	f8c0 9000 	str.w	r9, [r0]
 8004af4:	4604      	mov	r4, r0
 8004af6:	e7e4      	b.n	8004ac2 <__pow5mult+0x6a>
 8004af8:	4630      	mov	r0, r6
 8004afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004afe:	bf00      	nop
 8004b00:	080056e4 	.word	0x080056e4
 8004b04:	08005609 	.word	0x08005609
 8004b08:	08005689 	.word	0x08005689

08004b0c <__lshift>:
 8004b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	460c      	mov	r4, r1
 8004b12:	6849      	ldr	r1, [r1, #4]
 8004b14:	6923      	ldr	r3, [r4, #16]
 8004b16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004b1a:	68a3      	ldr	r3, [r4, #8]
 8004b1c:	4607      	mov	r7, r0
 8004b1e:	4691      	mov	r9, r2
 8004b20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b24:	f108 0601 	add.w	r6, r8, #1
 8004b28:	42b3      	cmp	r3, r6
 8004b2a:	db0b      	blt.n	8004b44 <__lshift+0x38>
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	f7ff fddf 	bl	80046f0 <_Balloc>
 8004b32:	4605      	mov	r5, r0
 8004b34:	b948      	cbnz	r0, 8004b4a <__lshift+0x3e>
 8004b36:	4602      	mov	r2, r0
 8004b38:	4b28      	ldr	r3, [pc, #160]	@ (8004bdc <__lshift+0xd0>)
 8004b3a:	4829      	ldr	r0, [pc, #164]	@ (8004be0 <__lshift+0xd4>)
 8004b3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004b40:	f000 fa22 	bl	8004f88 <__assert_func>
 8004b44:	3101      	adds	r1, #1
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	e7ee      	b.n	8004b28 <__lshift+0x1c>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f100 0114 	add.w	r1, r0, #20
 8004b50:	f100 0210 	add.w	r2, r0, #16
 8004b54:	4618      	mov	r0, r3
 8004b56:	4553      	cmp	r3, sl
 8004b58:	db33      	blt.n	8004bc2 <__lshift+0xb6>
 8004b5a:	6920      	ldr	r0, [r4, #16]
 8004b5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b60:	f104 0314 	add.w	r3, r4, #20
 8004b64:	f019 091f 	ands.w	r9, r9, #31
 8004b68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004b70:	d02b      	beq.n	8004bca <__lshift+0xbe>
 8004b72:	f1c9 0e20 	rsb	lr, r9, #32
 8004b76:	468a      	mov	sl, r1
 8004b78:	2200      	movs	r2, #0
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	fa00 f009 	lsl.w	r0, r0, r9
 8004b80:	4310      	orrs	r0, r2
 8004b82:	f84a 0b04 	str.w	r0, [sl], #4
 8004b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b8a:	459c      	cmp	ip, r3
 8004b8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004b90:	d8f3      	bhi.n	8004b7a <__lshift+0x6e>
 8004b92:	ebac 0304 	sub.w	r3, ip, r4
 8004b96:	3b15      	subs	r3, #21
 8004b98:	f023 0303 	bic.w	r3, r3, #3
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	f104 0015 	add.w	r0, r4, #21
 8004ba2:	4584      	cmp	ip, r0
 8004ba4:	bf38      	it	cc
 8004ba6:	2304      	movcc	r3, #4
 8004ba8:	50ca      	str	r2, [r1, r3]
 8004baa:	b10a      	cbz	r2, 8004bb0 <__lshift+0xa4>
 8004bac:	f108 0602 	add.w	r6, r8, #2
 8004bb0:	3e01      	subs	r6, #1
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	612e      	str	r6, [r5, #16]
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	f7ff fdda 	bl	8004770 <_Bfree>
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	e7c5      	b.n	8004b56 <__lshift+0x4a>
 8004bca:	3904      	subs	r1, #4
 8004bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8004bd4:	459c      	cmp	ip, r3
 8004bd6:	d8f9      	bhi.n	8004bcc <__lshift+0xc0>
 8004bd8:	e7ea      	b.n	8004bb0 <__lshift+0xa4>
 8004bda:	bf00      	nop
 8004bdc:	08005678 	.word	0x08005678
 8004be0:	08005689 	.word	0x08005689

08004be4 <__mcmp>:
 8004be4:	690a      	ldr	r2, [r1, #16]
 8004be6:	4603      	mov	r3, r0
 8004be8:	6900      	ldr	r0, [r0, #16]
 8004bea:	1a80      	subs	r0, r0, r2
 8004bec:	b530      	push	{r4, r5, lr}
 8004bee:	d10e      	bne.n	8004c0e <__mcmp+0x2a>
 8004bf0:	3314      	adds	r3, #20
 8004bf2:	3114      	adds	r1, #20
 8004bf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004bf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004bfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004c04:	4295      	cmp	r5, r2
 8004c06:	d003      	beq.n	8004c10 <__mcmp+0x2c>
 8004c08:	d205      	bcs.n	8004c16 <__mcmp+0x32>
 8004c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0e:	bd30      	pop	{r4, r5, pc}
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	d3f3      	bcc.n	8004bfc <__mcmp+0x18>
 8004c14:	e7fb      	b.n	8004c0e <__mcmp+0x2a>
 8004c16:	2001      	movs	r0, #1
 8004c18:	e7f9      	b.n	8004c0e <__mcmp+0x2a>
	...

08004c1c <__mdiff>:
 8004c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c20:	4689      	mov	r9, r1
 8004c22:	4606      	mov	r6, r0
 8004c24:	4611      	mov	r1, r2
 8004c26:	4648      	mov	r0, r9
 8004c28:	4614      	mov	r4, r2
 8004c2a:	f7ff ffdb 	bl	8004be4 <__mcmp>
 8004c2e:	1e05      	subs	r5, r0, #0
 8004c30:	d112      	bne.n	8004c58 <__mdiff+0x3c>
 8004c32:	4629      	mov	r1, r5
 8004c34:	4630      	mov	r0, r6
 8004c36:	f7ff fd5b 	bl	80046f0 <_Balloc>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	b928      	cbnz	r0, 8004c4a <__mdiff+0x2e>
 8004c3e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d3c <__mdiff+0x120>)
 8004c40:	f240 2137 	movw	r1, #567	@ 0x237
 8004c44:	483e      	ldr	r0, [pc, #248]	@ (8004d40 <__mdiff+0x124>)
 8004c46:	f000 f99f 	bl	8004f88 <__assert_func>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004c50:	4610      	mov	r0, r2
 8004c52:	b003      	add	sp, #12
 8004c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c58:	bfbc      	itt	lt
 8004c5a:	464b      	movlt	r3, r9
 8004c5c:	46a1      	movlt	r9, r4
 8004c5e:	4630      	mov	r0, r6
 8004c60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004c64:	bfba      	itte	lt
 8004c66:	461c      	movlt	r4, r3
 8004c68:	2501      	movlt	r5, #1
 8004c6a:	2500      	movge	r5, #0
 8004c6c:	f7ff fd40 	bl	80046f0 <_Balloc>
 8004c70:	4602      	mov	r2, r0
 8004c72:	b918      	cbnz	r0, 8004c7c <__mdiff+0x60>
 8004c74:	4b31      	ldr	r3, [pc, #196]	@ (8004d3c <__mdiff+0x120>)
 8004c76:	f240 2145 	movw	r1, #581	@ 0x245
 8004c7a:	e7e3      	b.n	8004c44 <__mdiff+0x28>
 8004c7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004c80:	6926      	ldr	r6, [r4, #16]
 8004c82:	60c5      	str	r5, [r0, #12]
 8004c84:	f109 0310 	add.w	r3, r9, #16
 8004c88:	f109 0514 	add.w	r5, r9, #20
 8004c8c:	f104 0e14 	add.w	lr, r4, #20
 8004c90:	f100 0b14 	add.w	fp, r0, #20
 8004c94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004c98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	46d9      	mov	r9, fp
 8004ca0:	f04f 0c00 	mov.w	ip, #0
 8004ca4:	9b01      	ldr	r3, [sp, #4]
 8004ca6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004caa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	fa1f f38a 	uxth.w	r3, sl
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	b283      	uxth	r3, r0
 8004cb8:	1acb      	subs	r3, r1, r3
 8004cba:	0c00      	lsrs	r0, r0, #16
 8004cbc:	4463      	add	r3, ip
 8004cbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004cc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004ccc:	4576      	cmp	r6, lr
 8004cce:	f849 3b04 	str.w	r3, [r9], #4
 8004cd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004cd6:	d8e5      	bhi.n	8004ca4 <__mdiff+0x88>
 8004cd8:	1b33      	subs	r3, r6, r4
 8004cda:	3b15      	subs	r3, #21
 8004cdc:	f023 0303 	bic.w	r3, r3, #3
 8004ce0:	3415      	adds	r4, #21
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	42a6      	cmp	r6, r4
 8004ce6:	bf38      	it	cc
 8004ce8:	2304      	movcc	r3, #4
 8004cea:	441d      	add	r5, r3
 8004cec:	445b      	add	r3, fp
 8004cee:	461e      	mov	r6, r3
 8004cf0:	462c      	mov	r4, r5
 8004cf2:	4544      	cmp	r4, r8
 8004cf4:	d30e      	bcc.n	8004d14 <__mdiff+0xf8>
 8004cf6:	f108 0103 	add.w	r1, r8, #3
 8004cfa:	1b49      	subs	r1, r1, r5
 8004cfc:	f021 0103 	bic.w	r1, r1, #3
 8004d00:	3d03      	subs	r5, #3
 8004d02:	45a8      	cmp	r8, r5
 8004d04:	bf38      	it	cc
 8004d06:	2100      	movcc	r1, #0
 8004d08:	440b      	add	r3, r1
 8004d0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004d0e:	b191      	cbz	r1, 8004d36 <__mdiff+0x11a>
 8004d10:	6117      	str	r7, [r2, #16]
 8004d12:	e79d      	b.n	8004c50 <__mdiff+0x34>
 8004d14:	f854 1b04 	ldr.w	r1, [r4], #4
 8004d18:	46e6      	mov	lr, ip
 8004d1a:	0c08      	lsrs	r0, r1, #16
 8004d1c:	fa1c fc81 	uxtah	ip, ip, r1
 8004d20:	4471      	add	r1, lr
 8004d22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004d26:	b289      	uxth	r1, r1
 8004d28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004d2c:	f846 1b04 	str.w	r1, [r6], #4
 8004d30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004d34:	e7dd      	b.n	8004cf2 <__mdiff+0xd6>
 8004d36:	3f01      	subs	r7, #1
 8004d38:	e7e7      	b.n	8004d0a <__mdiff+0xee>
 8004d3a:	bf00      	nop
 8004d3c:	08005678 	.word	0x08005678
 8004d40:	08005689 	.word	0x08005689

08004d44 <__d2b>:
 8004d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d48:	460f      	mov	r7, r1
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	ec59 8b10 	vmov	r8, r9, d0
 8004d50:	4616      	mov	r6, r2
 8004d52:	f7ff fccd 	bl	80046f0 <_Balloc>
 8004d56:	4604      	mov	r4, r0
 8004d58:	b930      	cbnz	r0, 8004d68 <__d2b+0x24>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	4b23      	ldr	r3, [pc, #140]	@ (8004dec <__d2b+0xa8>)
 8004d5e:	4824      	ldr	r0, [pc, #144]	@ (8004df0 <__d2b+0xac>)
 8004d60:	f240 310f 	movw	r1, #783	@ 0x30f
 8004d64:	f000 f910 	bl	8004f88 <__assert_func>
 8004d68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004d6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d70:	b10d      	cbz	r5, 8004d76 <__d2b+0x32>
 8004d72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	f1b8 0300 	subs.w	r3, r8, #0
 8004d7c:	d023      	beq.n	8004dc6 <__d2b+0x82>
 8004d7e:	4668      	mov	r0, sp
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	f7ff fd7c 	bl	800487e <__lo0bits>
 8004d86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004d8a:	b1d0      	cbz	r0, 8004dc2 <__d2b+0x7e>
 8004d8c:	f1c0 0320 	rsb	r3, r0, #32
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	430b      	orrs	r3, r1
 8004d96:	40c2      	lsrs	r2, r0
 8004d98:	6163      	str	r3, [r4, #20]
 8004d9a:	9201      	str	r2, [sp, #4]
 8004d9c:	9b01      	ldr	r3, [sp, #4]
 8004d9e:	61a3      	str	r3, [r4, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bf0c      	ite	eq
 8004da4:	2201      	moveq	r2, #1
 8004da6:	2202      	movne	r2, #2
 8004da8:	6122      	str	r2, [r4, #16]
 8004daa:	b1a5      	cbz	r5, 8004dd6 <__d2b+0x92>
 8004dac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004db0:	4405      	add	r5, r0
 8004db2:	603d      	str	r5, [r7, #0]
 8004db4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004db8:	6030      	str	r0, [r6, #0]
 8004dba:	4620      	mov	r0, r4
 8004dbc:	b003      	add	sp, #12
 8004dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dc2:	6161      	str	r1, [r4, #20]
 8004dc4:	e7ea      	b.n	8004d9c <__d2b+0x58>
 8004dc6:	a801      	add	r0, sp, #4
 8004dc8:	f7ff fd59 	bl	800487e <__lo0bits>
 8004dcc:	9b01      	ldr	r3, [sp, #4]
 8004dce:	6163      	str	r3, [r4, #20]
 8004dd0:	3020      	adds	r0, #32
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	e7e8      	b.n	8004da8 <__d2b+0x64>
 8004dd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004dda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004dde:	6038      	str	r0, [r7, #0]
 8004de0:	6918      	ldr	r0, [r3, #16]
 8004de2:	f7ff fd2d 	bl	8004840 <__hi0bits>
 8004de6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004dea:	e7e5      	b.n	8004db8 <__d2b+0x74>
 8004dec:	08005678 	.word	0x08005678
 8004df0:	08005689 	.word	0x08005689

08004df4 <__sflush_r>:
 8004df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfc:	0716      	lsls	r6, r2, #28
 8004dfe:	4605      	mov	r5, r0
 8004e00:	460c      	mov	r4, r1
 8004e02:	d454      	bmi.n	8004eae <__sflush_r+0xba>
 8004e04:	684b      	ldr	r3, [r1, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	dc02      	bgt.n	8004e10 <__sflush_r+0x1c>
 8004e0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	dd48      	ble.n	8004ea2 <__sflush_r+0xae>
 8004e10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e12:	2e00      	cmp	r6, #0
 8004e14:	d045      	beq.n	8004ea2 <__sflush_r+0xae>
 8004e16:	2300      	movs	r3, #0
 8004e18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e1c:	682f      	ldr	r7, [r5, #0]
 8004e1e:	6a21      	ldr	r1, [r4, #32]
 8004e20:	602b      	str	r3, [r5, #0]
 8004e22:	d030      	beq.n	8004e86 <__sflush_r+0x92>
 8004e24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e26:	89a3      	ldrh	r3, [r4, #12]
 8004e28:	0759      	lsls	r1, r3, #29
 8004e2a:	d505      	bpl.n	8004e38 <__sflush_r+0x44>
 8004e2c:	6863      	ldr	r3, [r4, #4]
 8004e2e:	1ad2      	subs	r2, r2, r3
 8004e30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e32:	b10b      	cbz	r3, 8004e38 <__sflush_r+0x44>
 8004e34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e36:	1ad2      	subs	r2, r2, r3
 8004e38:	2300      	movs	r3, #0
 8004e3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e3c:	6a21      	ldr	r1, [r4, #32]
 8004e3e:	4628      	mov	r0, r5
 8004e40:	47b0      	blx	r6
 8004e42:	1c43      	adds	r3, r0, #1
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	d106      	bne.n	8004e56 <__sflush_r+0x62>
 8004e48:	6829      	ldr	r1, [r5, #0]
 8004e4a:	291d      	cmp	r1, #29
 8004e4c:	d82b      	bhi.n	8004ea6 <__sflush_r+0xb2>
 8004e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ef8 <__sflush_r+0x104>)
 8004e50:	410a      	asrs	r2, r1
 8004e52:	07d6      	lsls	r6, r2, #31
 8004e54:	d427      	bmi.n	8004ea6 <__sflush_r+0xb2>
 8004e56:	2200      	movs	r2, #0
 8004e58:	6062      	str	r2, [r4, #4]
 8004e5a:	04d9      	lsls	r1, r3, #19
 8004e5c:	6922      	ldr	r2, [r4, #16]
 8004e5e:	6022      	str	r2, [r4, #0]
 8004e60:	d504      	bpl.n	8004e6c <__sflush_r+0x78>
 8004e62:	1c42      	adds	r2, r0, #1
 8004e64:	d101      	bne.n	8004e6a <__sflush_r+0x76>
 8004e66:	682b      	ldr	r3, [r5, #0]
 8004e68:	b903      	cbnz	r3, 8004e6c <__sflush_r+0x78>
 8004e6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e6e:	602f      	str	r7, [r5, #0]
 8004e70:	b1b9      	cbz	r1, 8004ea2 <__sflush_r+0xae>
 8004e72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e76:	4299      	cmp	r1, r3
 8004e78:	d002      	beq.n	8004e80 <__sflush_r+0x8c>
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f7ff fb38 	bl	80044f0 <_free_r>
 8004e80:	2300      	movs	r3, #0
 8004e82:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e84:	e00d      	b.n	8004ea2 <__sflush_r+0xae>
 8004e86:	2301      	movs	r3, #1
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b0      	blx	r6
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	1c50      	adds	r0, r2, #1
 8004e90:	d1c9      	bne.n	8004e26 <__sflush_r+0x32>
 8004e92:	682b      	ldr	r3, [r5, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0c6      	beq.n	8004e26 <__sflush_r+0x32>
 8004e98:	2b1d      	cmp	r3, #29
 8004e9a:	d001      	beq.n	8004ea0 <__sflush_r+0xac>
 8004e9c:	2b16      	cmp	r3, #22
 8004e9e:	d11e      	bne.n	8004ede <__sflush_r+0xea>
 8004ea0:	602f      	str	r7, [r5, #0]
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e022      	b.n	8004eec <__sflush_r+0xf8>
 8004ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eaa:	b21b      	sxth	r3, r3
 8004eac:	e01b      	b.n	8004ee6 <__sflush_r+0xf2>
 8004eae:	690f      	ldr	r7, [r1, #16]
 8004eb0:	2f00      	cmp	r7, #0
 8004eb2:	d0f6      	beq.n	8004ea2 <__sflush_r+0xae>
 8004eb4:	0793      	lsls	r3, r2, #30
 8004eb6:	680e      	ldr	r6, [r1, #0]
 8004eb8:	bf08      	it	eq
 8004eba:	694b      	ldreq	r3, [r1, #20]
 8004ebc:	600f      	str	r7, [r1, #0]
 8004ebe:	bf18      	it	ne
 8004ec0:	2300      	movne	r3, #0
 8004ec2:	eba6 0807 	sub.w	r8, r6, r7
 8004ec6:	608b      	str	r3, [r1, #8]
 8004ec8:	f1b8 0f00 	cmp.w	r8, #0
 8004ecc:	dde9      	ble.n	8004ea2 <__sflush_r+0xae>
 8004ece:	6a21      	ldr	r1, [r4, #32]
 8004ed0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ed2:	4643      	mov	r3, r8
 8004ed4:	463a      	mov	r2, r7
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	47b0      	blx	r6
 8004eda:	2800      	cmp	r0, #0
 8004edc:	dc08      	bgt.n	8004ef0 <__sflush_r+0xfc>
 8004ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ee6:	81a3      	strh	r3, [r4, #12]
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef0:	4407      	add	r7, r0
 8004ef2:	eba8 0800 	sub.w	r8, r8, r0
 8004ef6:	e7e7      	b.n	8004ec8 <__sflush_r+0xd4>
 8004ef8:	dfbffffe 	.word	0xdfbffffe

08004efc <_fflush_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	690b      	ldr	r3, [r1, #16]
 8004f00:	4605      	mov	r5, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	b913      	cbnz	r3, 8004f0c <_fflush_r+0x10>
 8004f06:	2500      	movs	r5, #0
 8004f08:	4628      	mov	r0, r5
 8004f0a:	bd38      	pop	{r3, r4, r5, pc}
 8004f0c:	b118      	cbz	r0, 8004f16 <_fflush_r+0x1a>
 8004f0e:	6a03      	ldr	r3, [r0, #32]
 8004f10:	b90b      	cbnz	r3, 8004f16 <_fflush_r+0x1a>
 8004f12:	f7fe fba5 	bl	8003660 <__sinit>
 8004f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f3      	beq.n	8004f06 <_fflush_r+0xa>
 8004f1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f20:	07d0      	lsls	r0, r2, #31
 8004f22:	d404      	bmi.n	8004f2e <_fflush_r+0x32>
 8004f24:	0599      	lsls	r1, r3, #22
 8004f26:	d402      	bmi.n	8004f2e <_fflush_r+0x32>
 8004f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f2a:	f7fe fc90 	bl	800384e <__retarget_lock_acquire_recursive>
 8004f2e:	4628      	mov	r0, r5
 8004f30:	4621      	mov	r1, r4
 8004f32:	f7ff ff5f 	bl	8004df4 <__sflush_r>
 8004f36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f38:	07da      	lsls	r2, r3, #31
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	d4e4      	bmi.n	8004f08 <_fflush_r+0xc>
 8004f3e:	89a3      	ldrh	r3, [r4, #12]
 8004f40:	059b      	lsls	r3, r3, #22
 8004f42:	d4e1      	bmi.n	8004f08 <_fflush_r+0xc>
 8004f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f46:	f7fe fc83 	bl	8003850 <__retarget_lock_release_recursive>
 8004f4a:	e7dd      	b.n	8004f08 <_fflush_r+0xc>

08004f4c <_sbrk_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4d06      	ldr	r5, [pc, #24]	@ (8004f68 <_sbrk_r+0x1c>)
 8004f50:	2300      	movs	r3, #0
 8004f52:	4604      	mov	r4, r0
 8004f54:	4608      	mov	r0, r1
 8004f56:	602b      	str	r3, [r5, #0]
 8004f58:	f7fc f856 	bl	8001008 <_sbrk>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d102      	bne.n	8004f66 <_sbrk_r+0x1a>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	b103      	cbz	r3, 8004f66 <_sbrk_r+0x1a>
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	200003c4 	.word	0x200003c4

08004f6c <memcpy>:
 8004f6c:	440a      	add	r2, r1
 8004f6e:	4291      	cmp	r1, r2
 8004f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f74:	d100      	bne.n	8004f78 <memcpy+0xc>
 8004f76:	4770      	bx	lr
 8004f78:	b510      	push	{r4, lr}
 8004f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f82:	4291      	cmp	r1, r2
 8004f84:	d1f9      	bne.n	8004f7a <memcpy+0xe>
 8004f86:	bd10      	pop	{r4, pc}

08004f88 <__assert_func>:
 8004f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f8a:	4614      	mov	r4, r2
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4b09      	ldr	r3, [pc, #36]	@ (8004fb4 <__assert_func+0x2c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4605      	mov	r5, r0
 8004f94:	68d8      	ldr	r0, [r3, #12]
 8004f96:	b954      	cbnz	r4, 8004fae <__assert_func+0x26>
 8004f98:	4b07      	ldr	r3, [pc, #28]	@ (8004fb8 <__assert_func+0x30>)
 8004f9a:	461c      	mov	r4, r3
 8004f9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004fa0:	9100      	str	r1, [sp, #0]
 8004fa2:	462b      	mov	r3, r5
 8004fa4:	4905      	ldr	r1, [pc, #20]	@ (8004fbc <__assert_func+0x34>)
 8004fa6:	f000 f841 	bl	800502c <fiprintf>
 8004faa:	f000 f851 	bl	8005050 <abort>
 8004fae:	4b04      	ldr	r3, [pc, #16]	@ (8004fc0 <__assert_func+0x38>)
 8004fb0:	e7f4      	b.n	8004f9c <__assert_func+0x14>
 8004fb2:	bf00      	nop
 8004fb4:	20000028 	.word	0x20000028
 8004fb8:	08005825 	.word	0x08005825
 8004fbc:	080057f7 	.word	0x080057f7
 8004fc0:	080057ea 	.word	0x080057ea

08004fc4 <_calloc_r>:
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	fba1 5402 	umull	r5, r4, r1, r2
 8004fca:	b93c      	cbnz	r4, 8004fdc <_calloc_r+0x18>
 8004fcc:	4629      	mov	r1, r5
 8004fce:	f7ff fb03 	bl	80045d8 <_malloc_r>
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	b928      	cbnz	r0, 8004fe2 <_calloc_r+0x1e>
 8004fd6:	2600      	movs	r6, #0
 8004fd8:	4630      	mov	r0, r6
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	220c      	movs	r2, #12
 8004fde:	6002      	str	r2, [r0, #0]
 8004fe0:	e7f9      	b.n	8004fd6 <_calloc_r+0x12>
 8004fe2:	462a      	mov	r2, r5
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	f7fe fbb4 	bl	8003752 <memset>
 8004fea:	e7f5      	b.n	8004fd8 <_calloc_r+0x14>

08004fec <__ascii_mbtowc>:
 8004fec:	b082      	sub	sp, #8
 8004fee:	b901      	cbnz	r1, 8004ff2 <__ascii_mbtowc+0x6>
 8004ff0:	a901      	add	r1, sp, #4
 8004ff2:	b142      	cbz	r2, 8005006 <__ascii_mbtowc+0x1a>
 8004ff4:	b14b      	cbz	r3, 800500a <__ascii_mbtowc+0x1e>
 8004ff6:	7813      	ldrb	r3, [r2, #0]
 8004ff8:	600b      	str	r3, [r1, #0]
 8004ffa:	7812      	ldrb	r2, [r2, #0]
 8004ffc:	1e10      	subs	r0, r2, #0
 8004ffe:	bf18      	it	ne
 8005000:	2001      	movne	r0, #1
 8005002:	b002      	add	sp, #8
 8005004:	4770      	bx	lr
 8005006:	4610      	mov	r0, r2
 8005008:	e7fb      	b.n	8005002 <__ascii_mbtowc+0x16>
 800500a:	f06f 0001 	mvn.w	r0, #1
 800500e:	e7f8      	b.n	8005002 <__ascii_mbtowc+0x16>

08005010 <__ascii_wctomb>:
 8005010:	4603      	mov	r3, r0
 8005012:	4608      	mov	r0, r1
 8005014:	b141      	cbz	r1, 8005028 <__ascii_wctomb+0x18>
 8005016:	2aff      	cmp	r2, #255	@ 0xff
 8005018:	d904      	bls.n	8005024 <__ascii_wctomb+0x14>
 800501a:	228a      	movs	r2, #138	@ 0x8a
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	f04f 30ff 	mov.w	r0, #4294967295
 8005022:	4770      	bx	lr
 8005024:	700a      	strb	r2, [r1, #0]
 8005026:	2001      	movs	r0, #1
 8005028:	4770      	bx	lr
	...

0800502c <fiprintf>:
 800502c:	b40e      	push	{r1, r2, r3}
 800502e:	b503      	push	{r0, r1, lr}
 8005030:	4601      	mov	r1, r0
 8005032:	ab03      	add	r3, sp, #12
 8005034:	4805      	ldr	r0, [pc, #20]	@ (800504c <fiprintf+0x20>)
 8005036:	f853 2b04 	ldr.w	r2, [r3], #4
 800503a:	6800      	ldr	r0, [r0, #0]
 800503c:	9301      	str	r3, [sp, #4]
 800503e:	f000 f837 	bl	80050b0 <_vfiprintf_r>
 8005042:	b002      	add	sp, #8
 8005044:	f85d eb04 	ldr.w	lr, [sp], #4
 8005048:	b003      	add	sp, #12
 800504a:	4770      	bx	lr
 800504c:	20000028 	.word	0x20000028

08005050 <abort>:
 8005050:	b508      	push	{r3, lr}
 8005052:	2006      	movs	r0, #6
 8005054:	f000 fa00 	bl	8005458 <raise>
 8005058:	2001      	movs	r0, #1
 800505a:	f7fb ff5d 	bl	8000f18 <_exit>

0800505e <__sfputc_r>:
 800505e:	6893      	ldr	r3, [r2, #8]
 8005060:	3b01      	subs	r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	b410      	push	{r4}
 8005066:	6093      	str	r3, [r2, #8]
 8005068:	da08      	bge.n	800507c <__sfputc_r+0x1e>
 800506a:	6994      	ldr	r4, [r2, #24]
 800506c:	42a3      	cmp	r3, r4
 800506e:	db01      	blt.n	8005074 <__sfputc_r+0x16>
 8005070:	290a      	cmp	r1, #10
 8005072:	d103      	bne.n	800507c <__sfputc_r+0x1e>
 8005074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005078:	f000 b932 	b.w	80052e0 <__swbuf_r>
 800507c:	6813      	ldr	r3, [r2, #0]
 800507e:	1c58      	adds	r0, r3, #1
 8005080:	6010      	str	r0, [r2, #0]
 8005082:	7019      	strb	r1, [r3, #0]
 8005084:	4608      	mov	r0, r1
 8005086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800508a:	4770      	bx	lr

0800508c <__sfputs_r>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	4606      	mov	r6, r0
 8005090:	460f      	mov	r7, r1
 8005092:	4614      	mov	r4, r2
 8005094:	18d5      	adds	r5, r2, r3
 8005096:	42ac      	cmp	r4, r5
 8005098:	d101      	bne.n	800509e <__sfputs_r+0x12>
 800509a:	2000      	movs	r0, #0
 800509c:	e007      	b.n	80050ae <__sfputs_r+0x22>
 800509e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a2:	463a      	mov	r2, r7
 80050a4:	4630      	mov	r0, r6
 80050a6:	f7ff ffda 	bl	800505e <__sfputc_r>
 80050aa:	1c43      	adds	r3, r0, #1
 80050ac:	d1f3      	bne.n	8005096 <__sfputs_r+0xa>
 80050ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080050b0 <_vfiprintf_r>:
 80050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b4:	460d      	mov	r5, r1
 80050b6:	b09d      	sub	sp, #116	@ 0x74
 80050b8:	4614      	mov	r4, r2
 80050ba:	4698      	mov	r8, r3
 80050bc:	4606      	mov	r6, r0
 80050be:	b118      	cbz	r0, 80050c8 <_vfiprintf_r+0x18>
 80050c0:	6a03      	ldr	r3, [r0, #32]
 80050c2:	b90b      	cbnz	r3, 80050c8 <_vfiprintf_r+0x18>
 80050c4:	f7fe facc 	bl	8003660 <__sinit>
 80050c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050ca:	07d9      	lsls	r1, r3, #31
 80050cc:	d405      	bmi.n	80050da <_vfiprintf_r+0x2a>
 80050ce:	89ab      	ldrh	r3, [r5, #12]
 80050d0:	059a      	lsls	r2, r3, #22
 80050d2:	d402      	bmi.n	80050da <_vfiprintf_r+0x2a>
 80050d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050d6:	f7fe fbba 	bl	800384e <__retarget_lock_acquire_recursive>
 80050da:	89ab      	ldrh	r3, [r5, #12]
 80050dc:	071b      	lsls	r3, r3, #28
 80050de:	d501      	bpl.n	80050e4 <_vfiprintf_r+0x34>
 80050e0:	692b      	ldr	r3, [r5, #16]
 80050e2:	b99b      	cbnz	r3, 800510c <_vfiprintf_r+0x5c>
 80050e4:	4629      	mov	r1, r5
 80050e6:	4630      	mov	r0, r6
 80050e8:	f000 f938 	bl	800535c <__swsetup_r>
 80050ec:	b170      	cbz	r0, 800510c <_vfiprintf_r+0x5c>
 80050ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050f0:	07dc      	lsls	r4, r3, #31
 80050f2:	d504      	bpl.n	80050fe <_vfiprintf_r+0x4e>
 80050f4:	f04f 30ff 	mov.w	r0, #4294967295
 80050f8:	b01d      	add	sp, #116	@ 0x74
 80050fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fe:	89ab      	ldrh	r3, [r5, #12]
 8005100:	0598      	lsls	r0, r3, #22
 8005102:	d4f7      	bmi.n	80050f4 <_vfiprintf_r+0x44>
 8005104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005106:	f7fe fba3 	bl	8003850 <__retarget_lock_release_recursive>
 800510a:	e7f3      	b.n	80050f4 <_vfiprintf_r+0x44>
 800510c:	2300      	movs	r3, #0
 800510e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005110:	2320      	movs	r3, #32
 8005112:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005116:	f8cd 800c 	str.w	r8, [sp, #12]
 800511a:	2330      	movs	r3, #48	@ 0x30
 800511c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80052cc <_vfiprintf_r+0x21c>
 8005120:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005124:	f04f 0901 	mov.w	r9, #1
 8005128:	4623      	mov	r3, r4
 800512a:	469a      	mov	sl, r3
 800512c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005130:	b10a      	cbz	r2, 8005136 <_vfiprintf_r+0x86>
 8005132:	2a25      	cmp	r2, #37	@ 0x25
 8005134:	d1f9      	bne.n	800512a <_vfiprintf_r+0x7a>
 8005136:	ebba 0b04 	subs.w	fp, sl, r4
 800513a:	d00b      	beq.n	8005154 <_vfiprintf_r+0xa4>
 800513c:	465b      	mov	r3, fp
 800513e:	4622      	mov	r2, r4
 8005140:	4629      	mov	r1, r5
 8005142:	4630      	mov	r0, r6
 8005144:	f7ff ffa2 	bl	800508c <__sfputs_r>
 8005148:	3001      	adds	r0, #1
 800514a:	f000 80a7 	beq.w	800529c <_vfiprintf_r+0x1ec>
 800514e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005150:	445a      	add	r2, fp
 8005152:	9209      	str	r2, [sp, #36]	@ 0x24
 8005154:	f89a 3000 	ldrb.w	r3, [sl]
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 809f 	beq.w	800529c <_vfiprintf_r+0x1ec>
 800515e:	2300      	movs	r3, #0
 8005160:	f04f 32ff 	mov.w	r2, #4294967295
 8005164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005168:	f10a 0a01 	add.w	sl, sl, #1
 800516c:	9304      	str	r3, [sp, #16]
 800516e:	9307      	str	r3, [sp, #28]
 8005170:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005174:	931a      	str	r3, [sp, #104]	@ 0x68
 8005176:	4654      	mov	r4, sl
 8005178:	2205      	movs	r2, #5
 800517a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800517e:	4853      	ldr	r0, [pc, #332]	@ (80052cc <_vfiprintf_r+0x21c>)
 8005180:	f7fb f84e 	bl	8000220 <memchr>
 8005184:	9a04      	ldr	r2, [sp, #16]
 8005186:	b9d8      	cbnz	r0, 80051c0 <_vfiprintf_r+0x110>
 8005188:	06d1      	lsls	r1, r2, #27
 800518a:	bf44      	itt	mi
 800518c:	2320      	movmi	r3, #32
 800518e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005192:	0713      	lsls	r3, r2, #28
 8005194:	bf44      	itt	mi
 8005196:	232b      	movmi	r3, #43	@ 0x2b
 8005198:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800519c:	f89a 3000 	ldrb.w	r3, [sl]
 80051a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80051a2:	d015      	beq.n	80051d0 <_vfiprintf_r+0x120>
 80051a4:	9a07      	ldr	r2, [sp, #28]
 80051a6:	4654      	mov	r4, sl
 80051a8:	2000      	movs	r0, #0
 80051aa:	f04f 0c0a 	mov.w	ip, #10
 80051ae:	4621      	mov	r1, r4
 80051b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051b4:	3b30      	subs	r3, #48	@ 0x30
 80051b6:	2b09      	cmp	r3, #9
 80051b8:	d94b      	bls.n	8005252 <_vfiprintf_r+0x1a2>
 80051ba:	b1b0      	cbz	r0, 80051ea <_vfiprintf_r+0x13a>
 80051bc:	9207      	str	r2, [sp, #28]
 80051be:	e014      	b.n	80051ea <_vfiprintf_r+0x13a>
 80051c0:	eba0 0308 	sub.w	r3, r0, r8
 80051c4:	fa09 f303 	lsl.w	r3, r9, r3
 80051c8:	4313      	orrs	r3, r2
 80051ca:	9304      	str	r3, [sp, #16]
 80051cc:	46a2      	mov	sl, r4
 80051ce:	e7d2      	b.n	8005176 <_vfiprintf_r+0xc6>
 80051d0:	9b03      	ldr	r3, [sp, #12]
 80051d2:	1d19      	adds	r1, r3, #4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	9103      	str	r1, [sp, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	bfbb      	ittet	lt
 80051dc:	425b      	neglt	r3, r3
 80051de:	f042 0202 	orrlt.w	r2, r2, #2
 80051e2:	9307      	strge	r3, [sp, #28]
 80051e4:	9307      	strlt	r3, [sp, #28]
 80051e6:	bfb8      	it	lt
 80051e8:	9204      	strlt	r2, [sp, #16]
 80051ea:	7823      	ldrb	r3, [r4, #0]
 80051ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80051ee:	d10a      	bne.n	8005206 <_vfiprintf_r+0x156>
 80051f0:	7863      	ldrb	r3, [r4, #1]
 80051f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80051f4:	d132      	bne.n	800525c <_vfiprintf_r+0x1ac>
 80051f6:	9b03      	ldr	r3, [sp, #12]
 80051f8:	1d1a      	adds	r2, r3, #4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	9203      	str	r2, [sp, #12]
 80051fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005202:	3402      	adds	r4, #2
 8005204:	9305      	str	r3, [sp, #20]
 8005206:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80052dc <_vfiprintf_r+0x22c>
 800520a:	7821      	ldrb	r1, [r4, #0]
 800520c:	2203      	movs	r2, #3
 800520e:	4650      	mov	r0, sl
 8005210:	f7fb f806 	bl	8000220 <memchr>
 8005214:	b138      	cbz	r0, 8005226 <_vfiprintf_r+0x176>
 8005216:	9b04      	ldr	r3, [sp, #16]
 8005218:	eba0 000a 	sub.w	r0, r0, sl
 800521c:	2240      	movs	r2, #64	@ 0x40
 800521e:	4082      	lsls	r2, r0
 8005220:	4313      	orrs	r3, r2
 8005222:	3401      	adds	r4, #1
 8005224:	9304      	str	r3, [sp, #16]
 8005226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800522a:	4829      	ldr	r0, [pc, #164]	@ (80052d0 <_vfiprintf_r+0x220>)
 800522c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005230:	2206      	movs	r2, #6
 8005232:	f7fa fff5 	bl	8000220 <memchr>
 8005236:	2800      	cmp	r0, #0
 8005238:	d03f      	beq.n	80052ba <_vfiprintf_r+0x20a>
 800523a:	4b26      	ldr	r3, [pc, #152]	@ (80052d4 <_vfiprintf_r+0x224>)
 800523c:	bb1b      	cbnz	r3, 8005286 <_vfiprintf_r+0x1d6>
 800523e:	9b03      	ldr	r3, [sp, #12]
 8005240:	3307      	adds	r3, #7
 8005242:	f023 0307 	bic.w	r3, r3, #7
 8005246:	3308      	adds	r3, #8
 8005248:	9303      	str	r3, [sp, #12]
 800524a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800524c:	443b      	add	r3, r7
 800524e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005250:	e76a      	b.n	8005128 <_vfiprintf_r+0x78>
 8005252:	fb0c 3202 	mla	r2, ip, r2, r3
 8005256:	460c      	mov	r4, r1
 8005258:	2001      	movs	r0, #1
 800525a:	e7a8      	b.n	80051ae <_vfiprintf_r+0xfe>
 800525c:	2300      	movs	r3, #0
 800525e:	3401      	adds	r4, #1
 8005260:	9305      	str	r3, [sp, #20]
 8005262:	4619      	mov	r1, r3
 8005264:	f04f 0c0a 	mov.w	ip, #10
 8005268:	4620      	mov	r0, r4
 800526a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800526e:	3a30      	subs	r2, #48	@ 0x30
 8005270:	2a09      	cmp	r2, #9
 8005272:	d903      	bls.n	800527c <_vfiprintf_r+0x1cc>
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0c6      	beq.n	8005206 <_vfiprintf_r+0x156>
 8005278:	9105      	str	r1, [sp, #20]
 800527a:	e7c4      	b.n	8005206 <_vfiprintf_r+0x156>
 800527c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005280:	4604      	mov	r4, r0
 8005282:	2301      	movs	r3, #1
 8005284:	e7f0      	b.n	8005268 <_vfiprintf_r+0x1b8>
 8005286:	ab03      	add	r3, sp, #12
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	462a      	mov	r2, r5
 800528c:	4b12      	ldr	r3, [pc, #72]	@ (80052d8 <_vfiprintf_r+0x228>)
 800528e:	a904      	add	r1, sp, #16
 8005290:	4630      	mov	r0, r6
 8005292:	f7fd fda1 	bl	8002dd8 <_printf_float>
 8005296:	4607      	mov	r7, r0
 8005298:	1c78      	adds	r0, r7, #1
 800529a:	d1d6      	bne.n	800524a <_vfiprintf_r+0x19a>
 800529c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800529e:	07d9      	lsls	r1, r3, #31
 80052a0:	d405      	bmi.n	80052ae <_vfiprintf_r+0x1fe>
 80052a2:	89ab      	ldrh	r3, [r5, #12]
 80052a4:	059a      	lsls	r2, r3, #22
 80052a6:	d402      	bmi.n	80052ae <_vfiprintf_r+0x1fe>
 80052a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052aa:	f7fe fad1 	bl	8003850 <__retarget_lock_release_recursive>
 80052ae:	89ab      	ldrh	r3, [r5, #12]
 80052b0:	065b      	lsls	r3, r3, #25
 80052b2:	f53f af1f 	bmi.w	80050f4 <_vfiprintf_r+0x44>
 80052b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052b8:	e71e      	b.n	80050f8 <_vfiprintf_r+0x48>
 80052ba:	ab03      	add	r3, sp, #12
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	462a      	mov	r2, r5
 80052c0:	4b05      	ldr	r3, [pc, #20]	@ (80052d8 <_vfiprintf_r+0x228>)
 80052c2:	a904      	add	r1, sp, #16
 80052c4:	4630      	mov	r0, r6
 80052c6:	f7fe f81f 	bl	8003308 <_printf_i>
 80052ca:	e7e4      	b.n	8005296 <_vfiprintf_r+0x1e6>
 80052cc:	08005927 	.word	0x08005927
 80052d0:	08005931 	.word	0x08005931
 80052d4:	08002dd9 	.word	0x08002dd9
 80052d8:	0800508d 	.word	0x0800508d
 80052dc:	0800592d 	.word	0x0800592d

080052e0 <__swbuf_r>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	460e      	mov	r6, r1
 80052e4:	4614      	mov	r4, r2
 80052e6:	4605      	mov	r5, r0
 80052e8:	b118      	cbz	r0, 80052f2 <__swbuf_r+0x12>
 80052ea:	6a03      	ldr	r3, [r0, #32]
 80052ec:	b90b      	cbnz	r3, 80052f2 <__swbuf_r+0x12>
 80052ee:	f7fe f9b7 	bl	8003660 <__sinit>
 80052f2:	69a3      	ldr	r3, [r4, #24]
 80052f4:	60a3      	str	r3, [r4, #8]
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	071a      	lsls	r2, r3, #28
 80052fa:	d501      	bpl.n	8005300 <__swbuf_r+0x20>
 80052fc:	6923      	ldr	r3, [r4, #16]
 80052fe:	b943      	cbnz	r3, 8005312 <__swbuf_r+0x32>
 8005300:	4621      	mov	r1, r4
 8005302:	4628      	mov	r0, r5
 8005304:	f000 f82a 	bl	800535c <__swsetup_r>
 8005308:	b118      	cbz	r0, 8005312 <__swbuf_r+0x32>
 800530a:	f04f 37ff 	mov.w	r7, #4294967295
 800530e:	4638      	mov	r0, r7
 8005310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	6922      	ldr	r2, [r4, #16]
 8005316:	1a98      	subs	r0, r3, r2
 8005318:	6963      	ldr	r3, [r4, #20]
 800531a:	b2f6      	uxtb	r6, r6
 800531c:	4283      	cmp	r3, r0
 800531e:	4637      	mov	r7, r6
 8005320:	dc05      	bgt.n	800532e <__swbuf_r+0x4e>
 8005322:	4621      	mov	r1, r4
 8005324:	4628      	mov	r0, r5
 8005326:	f7ff fde9 	bl	8004efc <_fflush_r>
 800532a:	2800      	cmp	r0, #0
 800532c:	d1ed      	bne.n	800530a <__swbuf_r+0x2a>
 800532e:	68a3      	ldr	r3, [r4, #8]
 8005330:	3b01      	subs	r3, #1
 8005332:	60a3      	str	r3, [r4, #8]
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	6022      	str	r2, [r4, #0]
 800533a:	701e      	strb	r6, [r3, #0]
 800533c:	6962      	ldr	r2, [r4, #20]
 800533e:	1c43      	adds	r3, r0, #1
 8005340:	429a      	cmp	r2, r3
 8005342:	d004      	beq.n	800534e <__swbuf_r+0x6e>
 8005344:	89a3      	ldrh	r3, [r4, #12]
 8005346:	07db      	lsls	r3, r3, #31
 8005348:	d5e1      	bpl.n	800530e <__swbuf_r+0x2e>
 800534a:	2e0a      	cmp	r6, #10
 800534c:	d1df      	bne.n	800530e <__swbuf_r+0x2e>
 800534e:	4621      	mov	r1, r4
 8005350:	4628      	mov	r0, r5
 8005352:	f7ff fdd3 	bl	8004efc <_fflush_r>
 8005356:	2800      	cmp	r0, #0
 8005358:	d0d9      	beq.n	800530e <__swbuf_r+0x2e>
 800535a:	e7d6      	b.n	800530a <__swbuf_r+0x2a>

0800535c <__swsetup_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4b29      	ldr	r3, [pc, #164]	@ (8005404 <__swsetup_r+0xa8>)
 8005360:	4605      	mov	r5, r0
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	460c      	mov	r4, r1
 8005366:	b118      	cbz	r0, 8005370 <__swsetup_r+0x14>
 8005368:	6a03      	ldr	r3, [r0, #32]
 800536a:	b90b      	cbnz	r3, 8005370 <__swsetup_r+0x14>
 800536c:	f7fe f978 	bl	8003660 <__sinit>
 8005370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005374:	0719      	lsls	r1, r3, #28
 8005376:	d422      	bmi.n	80053be <__swsetup_r+0x62>
 8005378:	06da      	lsls	r2, r3, #27
 800537a:	d407      	bmi.n	800538c <__swsetup_r+0x30>
 800537c:	2209      	movs	r2, #9
 800537e:	602a      	str	r2, [r5, #0]
 8005380:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	f04f 30ff 	mov.w	r0, #4294967295
 800538a:	e033      	b.n	80053f4 <__swsetup_r+0x98>
 800538c:	0758      	lsls	r0, r3, #29
 800538e:	d512      	bpl.n	80053b6 <__swsetup_r+0x5a>
 8005390:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005392:	b141      	cbz	r1, 80053a6 <__swsetup_r+0x4a>
 8005394:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005398:	4299      	cmp	r1, r3
 800539a:	d002      	beq.n	80053a2 <__swsetup_r+0x46>
 800539c:	4628      	mov	r0, r5
 800539e:	f7ff f8a7 	bl	80044f0 <_free_r>
 80053a2:	2300      	movs	r3, #0
 80053a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80053a6:	89a3      	ldrh	r3, [r4, #12]
 80053a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80053ac:	81a3      	strh	r3, [r4, #12]
 80053ae:	2300      	movs	r3, #0
 80053b0:	6063      	str	r3, [r4, #4]
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	89a3      	ldrh	r3, [r4, #12]
 80053b8:	f043 0308 	orr.w	r3, r3, #8
 80053bc:	81a3      	strh	r3, [r4, #12]
 80053be:	6923      	ldr	r3, [r4, #16]
 80053c0:	b94b      	cbnz	r3, 80053d6 <__swsetup_r+0x7a>
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80053c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053cc:	d003      	beq.n	80053d6 <__swsetup_r+0x7a>
 80053ce:	4621      	mov	r1, r4
 80053d0:	4628      	mov	r0, r5
 80053d2:	f000 f883 	bl	80054dc <__smakebuf_r>
 80053d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053da:	f013 0201 	ands.w	r2, r3, #1
 80053de:	d00a      	beq.n	80053f6 <__swsetup_r+0x9a>
 80053e0:	2200      	movs	r2, #0
 80053e2:	60a2      	str	r2, [r4, #8]
 80053e4:	6962      	ldr	r2, [r4, #20]
 80053e6:	4252      	negs	r2, r2
 80053e8:	61a2      	str	r2, [r4, #24]
 80053ea:	6922      	ldr	r2, [r4, #16]
 80053ec:	b942      	cbnz	r2, 8005400 <__swsetup_r+0xa4>
 80053ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053f2:	d1c5      	bne.n	8005380 <__swsetup_r+0x24>
 80053f4:	bd38      	pop	{r3, r4, r5, pc}
 80053f6:	0799      	lsls	r1, r3, #30
 80053f8:	bf58      	it	pl
 80053fa:	6962      	ldrpl	r2, [r4, #20]
 80053fc:	60a2      	str	r2, [r4, #8]
 80053fe:	e7f4      	b.n	80053ea <__swsetup_r+0x8e>
 8005400:	2000      	movs	r0, #0
 8005402:	e7f7      	b.n	80053f4 <__swsetup_r+0x98>
 8005404:	20000028 	.word	0x20000028

08005408 <_raise_r>:
 8005408:	291f      	cmp	r1, #31
 800540a:	b538      	push	{r3, r4, r5, lr}
 800540c:	4605      	mov	r5, r0
 800540e:	460c      	mov	r4, r1
 8005410:	d904      	bls.n	800541c <_raise_r+0x14>
 8005412:	2316      	movs	r3, #22
 8005414:	6003      	str	r3, [r0, #0]
 8005416:	f04f 30ff 	mov.w	r0, #4294967295
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800541e:	b112      	cbz	r2, 8005426 <_raise_r+0x1e>
 8005420:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005424:	b94b      	cbnz	r3, 800543a <_raise_r+0x32>
 8005426:	4628      	mov	r0, r5
 8005428:	f000 f830 	bl	800548c <_getpid_r>
 800542c:	4622      	mov	r2, r4
 800542e:	4601      	mov	r1, r0
 8005430:	4628      	mov	r0, r5
 8005432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005436:	f000 b817 	b.w	8005468 <_kill_r>
 800543a:	2b01      	cmp	r3, #1
 800543c:	d00a      	beq.n	8005454 <_raise_r+0x4c>
 800543e:	1c59      	adds	r1, r3, #1
 8005440:	d103      	bne.n	800544a <_raise_r+0x42>
 8005442:	2316      	movs	r3, #22
 8005444:	6003      	str	r3, [r0, #0]
 8005446:	2001      	movs	r0, #1
 8005448:	e7e7      	b.n	800541a <_raise_r+0x12>
 800544a:	2100      	movs	r1, #0
 800544c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005450:	4620      	mov	r0, r4
 8005452:	4798      	blx	r3
 8005454:	2000      	movs	r0, #0
 8005456:	e7e0      	b.n	800541a <_raise_r+0x12>

08005458 <raise>:
 8005458:	4b02      	ldr	r3, [pc, #8]	@ (8005464 <raise+0xc>)
 800545a:	4601      	mov	r1, r0
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	f7ff bfd3 	b.w	8005408 <_raise_r>
 8005462:	bf00      	nop
 8005464:	20000028 	.word	0x20000028

08005468 <_kill_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4d07      	ldr	r5, [pc, #28]	@ (8005488 <_kill_r+0x20>)
 800546c:	2300      	movs	r3, #0
 800546e:	4604      	mov	r4, r0
 8005470:	4608      	mov	r0, r1
 8005472:	4611      	mov	r1, r2
 8005474:	602b      	str	r3, [r5, #0]
 8005476:	f7fb fd3f 	bl	8000ef8 <_kill>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	d102      	bne.n	8005484 <_kill_r+0x1c>
 800547e:	682b      	ldr	r3, [r5, #0]
 8005480:	b103      	cbz	r3, 8005484 <_kill_r+0x1c>
 8005482:	6023      	str	r3, [r4, #0]
 8005484:	bd38      	pop	{r3, r4, r5, pc}
 8005486:	bf00      	nop
 8005488:	200003c4 	.word	0x200003c4

0800548c <_getpid_r>:
 800548c:	f7fb bd2c 	b.w	8000ee8 <_getpid>

08005490 <__swhatbuf_r>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	460c      	mov	r4, r1
 8005494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005498:	2900      	cmp	r1, #0
 800549a:	b096      	sub	sp, #88	@ 0x58
 800549c:	4615      	mov	r5, r2
 800549e:	461e      	mov	r6, r3
 80054a0:	da0d      	bge.n	80054be <__swhatbuf_r+0x2e>
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80054a8:	f04f 0100 	mov.w	r1, #0
 80054ac:	bf14      	ite	ne
 80054ae:	2340      	movne	r3, #64	@ 0x40
 80054b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80054b4:	2000      	movs	r0, #0
 80054b6:	6031      	str	r1, [r6, #0]
 80054b8:	602b      	str	r3, [r5, #0]
 80054ba:	b016      	add	sp, #88	@ 0x58
 80054bc:	bd70      	pop	{r4, r5, r6, pc}
 80054be:	466a      	mov	r2, sp
 80054c0:	f000 f848 	bl	8005554 <_fstat_r>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	dbec      	blt.n	80054a2 <__swhatbuf_r+0x12>
 80054c8:	9901      	ldr	r1, [sp, #4]
 80054ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80054ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80054d2:	4259      	negs	r1, r3
 80054d4:	4159      	adcs	r1, r3
 80054d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054da:	e7eb      	b.n	80054b4 <__swhatbuf_r+0x24>

080054dc <__smakebuf_r>:
 80054dc:	898b      	ldrh	r3, [r1, #12]
 80054de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054e0:	079d      	lsls	r5, r3, #30
 80054e2:	4606      	mov	r6, r0
 80054e4:	460c      	mov	r4, r1
 80054e6:	d507      	bpl.n	80054f8 <__smakebuf_r+0x1c>
 80054e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	6123      	str	r3, [r4, #16]
 80054f0:	2301      	movs	r3, #1
 80054f2:	6163      	str	r3, [r4, #20]
 80054f4:	b003      	add	sp, #12
 80054f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054f8:	ab01      	add	r3, sp, #4
 80054fa:	466a      	mov	r2, sp
 80054fc:	f7ff ffc8 	bl	8005490 <__swhatbuf_r>
 8005500:	9f00      	ldr	r7, [sp, #0]
 8005502:	4605      	mov	r5, r0
 8005504:	4639      	mov	r1, r7
 8005506:	4630      	mov	r0, r6
 8005508:	f7ff f866 	bl	80045d8 <_malloc_r>
 800550c:	b948      	cbnz	r0, 8005522 <__smakebuf_r+0x46>
 800550e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005512:	059a      	lsls	r2, r3, #22
 8005514:	d4ee      	bmi.n	80054f4 <__smakebuf_r+0x18>
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	f043 0302 	orr.w	r3, r3, #2
 800551e:	81a3      	strh	r3, [r4, #12]
 8005520:	e7e2      	b.n	80054e8 <__smakebuf_r+0xc>
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	6020      	str	r0, [r4, #0]
 8005526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800552a:	81a3      	strh	r3, [r4, #12]
 800552c:	9b01      	ldr	r3, [sp, #4]
 800552e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005532:	b15b      	cbz	r3, 800554c <__smakebuf_r+0x70>
 8005534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005538:	4630      	mov	r0, r6
 800553a:	f000 f81d 	bl	8005578 <_isatty_r>
 800553e:	b128      	cbz	r0, 800554c <__smakebuf_r+0x70>
 8005540:	89a3      	ldrh	r3, [r4, #12]
 8005542:	f023 0303 	bic.w	r3, r3, #3
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	81a3      	strh	r3, [r4, #12]
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	431d      	orrs	r5, r3
 8005550:	81a5      	strh	r5, [r4, #12]
 8005552:	e7cf      	b.n	80054f4 <__smakebuf_r+0x18>

08005554 <_fstat_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4d07      	ldr	r5, [pc, #28]	@ (8005574 <_fstat_r+0x20>)
 8005558:	2300      	movs	r3, #0
 800555a:	4604      	mov	r4, r0
 800555c:	4608      	mov	r0, r1
 800555e:	4611      	mov	r1, r2
 8005560:	602b      	str	r3, [r5, #0]
 8005562:	f7fb fd29 	bl	8000fb8 <_fstat>
 8005566:	1c43      	adds	r3, r0, #1
 8005568:	d102      	bne.n	8005570 <_fstat_r+0x1c>
 800556a:	682b      	ldr	r3, [r5, #0]
 800556c:	b103      	cbz	r3, 8005570 <_fstat_r+0x1c>
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	bd38      	pop	{r3, r4, r5, pc}
 8005572:	bf00      	nop
 8005574:	200003c4 	.word	0x200003c4

08005578 <_isatty_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4d06      	ldr	r5, [pc, #24]	@ (8005594 <_isatty_r+0x1c>)
 800557c:	2300      	movs	r3, #0
 800557e:	4604      	mov	r4, r0
 8005580:	4608      	mov	r0, r1
 8005582:	602b      	str	r3, [r5, #0]
 8005584:	f7fb fd28 	bl	8000fd8 <_isatty>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d102      	bne.n	8005592 <_isatty_r+0x1a>
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	b103      	cbz	r3, 8005592 <_isatty_r+0x1a>
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	200003c4 	.word	0x200003c4

08005598 <_init>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	bf00      	nop
 800559c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559e:	bc08      	pop	{r3}
 80055a0:	469e      	mov	lr, r3
 80055a2:	4770      	bx	lr

080055a4 <_fini>:
 80055a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a6:	bf00      	nop
 80055a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055aa:	bc08      	pop	{r3}
 80055ac:	469e      	mov	lr, r3
 80055ae:	4770      	bx	lr
